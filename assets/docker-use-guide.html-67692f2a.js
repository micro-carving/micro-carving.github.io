import{_ as o,W as c,X as l,Y as n,Z as s,$ as e,a1 as t,C as r}from"./framework-158a71b3.js";const p="/assets/docker-use-guide-1-c00e990d.png",d="/assets/docker-use-guide-2-2b1c5a04.png",u="/assets/docker-use-guide-3-dc69806f.png",k="/assets/docker-use-guide-4-3fb13db6.png",m="/assets/docker-use-guide-5-5a707454.png",v="/assets/docker-use-guide-6-88fa09bb.png",b="/assets/docker-use-guide-7-df74a022.png",h="/assets/docker-use-guide-8-5207ee9d.png",g="/assets/docker-use-guide-9-4bc8734d.png",y="/assets/docker-use-guide-8-5207ee9d.png",f="/assets/docker-use-guide-12-6057288f.png",i="/assets/docker-use-guide-13-463ebbcf.png",_="/assets/docker-use-guide-14-57534394.png",q="/assets/docker-use-guide-15-6feb642d.png",x="/assets/docker-use-guide-16-9f03daa6.png",w="/assets/docker-use-guide-17-98e1ecc6.png",S="/assets/docker-use-guide-18-36008e01.png",D="/assets/docker-use-guide-19-0e10f6d6.png",O="/assets/docker-use-guide-20-32ff06b4.png",j={},R=t('<h2 id="一、docker-简介" tabindex="-1"><a class="header-anchor" href="#一、docker-简介" aria-hidden="true">#</a> 一、docker 简介</h2><h3 id="_1-什么是-docker" tabindex="-1"><a class="header-anchor" href="#_1-什么是-docker" aria-hidden="true">#</a> 1.什么是 docker</h3><p>Docker 是一个开源的应用容器引擎，由于 docker 影响巨大，今天也用 &quot;Docker&quot; 指代容器化技术。</p><h3 id="_2-docker-的优势" tabindex="-1"><a class="header-anchor" href="#_2-docker-的优势" aria-hidden="true">#</a> 2.docker 的优势</h3><h4 id="一键部署-开箱即用" tabindex="-1"><a class="header-anchor" href="#一键部署-开箱即用" aria-hidden="true">#</a> 一键部署，开箱即用</h4><p>容器使用基于 image 镜像的部署模式，image 中包含了运行应用程序所需的一切：代码、运行时、系统工具、系统库和配置文件。</p><p>无论是单个程序还是多个程序组成的复杂服务，或者分布式系统，都可以使用 <code>docker run</code> 或 <code>docker compose up</code> 命令一键部署，省去了大量搭建、配置环境、调试和排查错误的时间。</p><h4 id="一次打包-到处运行" tabindex="-1"><a class="header-anchor" href="#一次打包-到处运行" aria-hidden="true">#</a> 一次打包，到处运行</h4><p>Docker 为容器创建了行业标准，使容器成为了软件交付过程中的一种标准化格式，将软打包成容器镜 (image)，能够使软件在不同环境下运行一致，应用程序可以快速可靠地从一个环境移植到另外一个环境，并确保在所有的部署目标（例如开发、测试、生产环境）上都按预期运行，从而避免了 “在我电脑上是好的，怎么到你那却不能用了？” 的问题。</p><h3 id="_3-容器与虚拟机" tabindex="-1"><a class="header-anchor" href="#_3-容器与虚拟机" aria-hidden="true">#</a> 3.容器与虚拟机</h3>',10),A={href:"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch01.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://lwn.net/Articles/528078/",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"因此，容器相比于虚拟机更加轻量化，它体积小，启动快，占用资源少，性能好。",-1),P=n("p",null,"虚拟机使用虚拟化技术，应用程序运行在完整的操作系统（OS）之上，因此占用的资源更多，安装更复杂。",-1),L=n("p",null,"但是由于容器与宿主机共享内核，所以在隔离性和安全性方面不如虚拟机。",-1),E=n("figure",null,[n("img",{src:p,alt:"容器和虚拟机区别",tabindex:"0",loading:"lazy"}),n("figcaption",null,"容器和虚拟机区别")],-1),Y=n("h3",{id:"_4-参考文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-参考文档","aria-hidden":"true"},"#"),s(" 4.参考文档")],-1),W={href:"https://www.docker.com/resources/what-container/#/package_software",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.docker.com/engine/security/",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="二、安装-docker" tabindex="-1"><a class="header-anchor" href="#二、安装-docker" aria-hidden="true">#</a> 二、安装 docker</h2><h3 id="_1-windows-下安装-docker" tabindex="-1"><a class="header-anchor" href="#_1-windows-下安装-docker" aria-hidden="true">#</a> 1.Windows 下安装 Docker</h3><blockquote><p><strong>注意事项</strong></p><p>容器主要使用 Linux 内核技术，因此 windows 下安装 docker 可能会有遇到各种问题，建议刚入门的同学先在 Linux 虚拟机里安装 docker，学完之后在 windows 下安装，免得遇到问题后，还没入门就放弃了。</p></blockquote><h3 id="_2-linux-下安装-docker" tabindex="-1"><a class="header-anchor" href="#_2-linux-下安装-docker" aria-hidden="true">#</a> 2.Linux 下安装 Docker</h3><p>安装环境：CentOS 7.3+</p><p>如果之前安装了旧版 docker，请先删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 移除自带的 docker</span>
<span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 安装 yum 工具包</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils

<span class="token comment">## 添加 docker 仓库</span>
<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 docker engine</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><strong>docker-ce</strong>：服务端 <br><strong>docker-ce-cli</strong>：客户端 <br> 客户端发出的指令交给服务端，服务端并不直接创建容器，而是交给 <code>containerd.in</code> 创建容器，销毁运行容器 <br><strong>docker-compose-plugin</strong>：容器编排工具 <br></p></blockquote><p>启动 docker，运行 hello world 查看是否成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
<span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置国内镜像仓库地址</p><p>新建 <code>/etc/docker/daemon.json</code> 文件，输入如下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;https://registry.docker-cn.com&quot;</span>,
    <span class="token string">&quot;https://hub-mirror.c.163.com&quot;</span>,
    <span class="token string">&quot;https://fsp2sfpr.mirror.aliyuncs.com/&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启，配置开机启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> containerd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、docker-run-开箱即用" tabindex="-1"><a class="header-anchor" href="#三、docker-run-开箱即用" aria-hidden="true">#</a> 三、<code>docker run</code> 开箱即用</h2><h3 id="_1-docker-架构" tabindex="-1"><a class="header-anchor" href="#_1-docker-架构" aria-hidden="true">#</a> 1.docker 架构</h3><figure><img src="`+d+'" alt="Docker 架构" tabindex="0" loading="lazy"><figcaption>Docker 架构</figcaption></figure><h4 id="registry-镜像仓库" tabindex="-1"><a class="header-anchor" href="#registry-镜像仓库" aria-hidden="true">#</a> registry 镜像仓库</h4><p>registry 可以理解为镜像仓库，用于保存 docker image。</p><p>Docker Hub 是 docker 官方的镜像仓库，docker 命令默认从 docker hub 中拉取镜像。我们也可以搭建自己的镜像仓库。</p><h4 id="image-镜像" tabindex="-1"><a class="header-anchor" href="#image-镜像" aria-hidden="true">#</a> image 镜像</h4><p>image 可以理解为一个只读的应用模板。image 包含了应用程序及其所需要的依赖环境，例如可执行文件、环境变量、初始化脚本、启动命令等。</p><h4 id="container-容器" tabindex="-1"><a class="header-anchor" href="#container-容器" aria-hidden="true">#</a> container 容器</h4><p>容器是 image 的一个运行实例。当我们运行一个 image，就创建了一个容器。</p><h3 id="_2-docker-pull-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_2-docker-pull-拉取镜像" aria-hidden="true">#</a> 2.docker pull 拉取镜像</h3><p>从镜像仓库拉取镜像到本地</p><p><code>docker pull nginx</code> 不写默认是 <code>latest</code></p><p><code>docker pull nginx:latest</code></p><p><code>docker pull nginx:1.22</code></p><p><code>docker pull nginx:1.22.0-alpine</code></p><p>一般不建议使用 <code>latest</code>，因为最新的镜像是滚动更新的，过一段时间，可能跟你本地的不是同一个。</p><p>使用 <code>docker images</code> 命令查看本地镜像</p><h3 id="_3-docker-run-命令" tabindex="-1"><a class="header-anchor" href="#_3-docker-run-命令" aria-hidden="true">#</a> 3.docker run 命令</h3><p>格式：<code>docker run [可选参数] 镜像名:版本 []</code></p><h4 id="公开端口-p" tabindex="-1"><a class="header-anchor" href="#公开端口-p" aria-hidden="true">#</a> 公开端口 (-p)</h4><p><code>docker run --name some-nginx -d -p 8080:80 nginx:1.22</code></p><p>默认情况下，容器无法通过外部网络访问。</p><p>需要使用 <code>-p</code> 参数将容器的端口映射到宿主机端口，才可以通过宿主机 IP 进行访问。</p><p>浏览器打开 <code>http://宿主机IP:8080</code></p><figure><img src="'+u+`" alt="Nginx" tabindex="0" loading="lazy"><figcaption>Nginx</figcaption></figure><p><code>-p 8080-8090:8080-8090</code> 公开端口范围，前后必须对应</p><p><code>-p 192.168.56.106:8080:80</code> 如果宿主机有多个 ip，可以指定绑定到哪个 ip</p><h4 id="后台运行" tabindex="-1"><a class="header-anchor" href="#后台运行" aria-hidden="true">#</a> 后台运行</h4><p><code>docker run --name db-mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</code></p><p>使用 run 命令，部署 mysql，docker 先去本地查找镜像，如果找不到，就去 docker hub 中拉取镜像</p><ul><li><code>--name</code>：定义容器的名称</li><li><code>-e</code>：声明环境变量</li><li><code>-d</code>：容器在后台运行</li></ul><p>查看容器 ip</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect db-mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用以下命令操作容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 启动 db-mysql 容器</span>
<span class="token function">docker</span> start db-mysql
<span class="token comment">## 关闭容器</span>
<span class="token function">docker</span> stop db-mysql
<span class="token comment">## 重启容器</span>
<span class="token function">docker</span> restart db-mysql
<span class="token comment">## 删除容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> db-mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="前台交互运行" tabindex="-1"><a class="header-anchor" href="#前台交互运行" aria-hidden="true">#</a> 前台交互运行</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建一个新的容器，使用 mysql 客户端</span>

<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> mysql:5.7 mysql <span class="token parameter variable">-h127.0.0.1</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><strong>-it</strong>：使用交互模式，可以在控制台里输入、输出 <br><strong>--rm</strong>：在容器退出时自动删除容器。一般在使用客户端程序时使用此参数。如果每次使用客户端都创建一个新的容器，这样将占用大量的系统空间。<br><strong>mysql -h127.0.0.1 -uroot -p</strong>：表示启动容器时执行的命令。<br></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 进入 db-mysql 容器中执行命令</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> db-mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><strong>docker exec</strong>：在运行的容器中执行命令，一般配合 <strong>-it</strong> 参数使用交互模式</p></blockquote><h3 id="_3-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-常用命令" aria-hidden="true">#</a> 3.常用命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment">## 查看所有容器，包括正在运行和停止的</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> 
<span class="token comment">## 查看指定容器的信息</span>
<span class="token function">docker</span> inspect <span class="token punctuation">[</span>容器名或者容器 ID<span class="token punctuation">]</span>
<span class="token comment">## 查看指定容器日志</span>
<span class="token function">docker</span> logs <span class="token punctuation">[</span>容器名或者容器 ID<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 在容器和宿主机间复制文件</span>

<span class="token comment">## 从宿主机复制到容器中</span>
<span class="token function">docker</span> <span class="token function">cp</span> ./some_file 容器名:/work
<span class="token comment">## 从容器中复制到宿主机</span>
<span class="token function">docker</span> <span class="token function">cp</span> 容器名:/var/logs/ /tmp/app_logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-参考文档-1" tabindex="-1"><a class="header-anchor" href="#_4-参考文档-1" aria-hidden="true">#</a> 4.参考文档</h3>`,64),I={href:"https://docs.docker.com/get-started/overview/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.docker.com/engine/reference/run/",target:"_blank",rel:"noopener noreferrer"},C=t(`<h2 id="四、docker-网络" tabindex="-1"><a class="header-anchor" href="#四、docker-网络" aria-hidden="true">#</a> 四、docker 网络</h2><h3 id="_1-默认网络" tabindex="-1"><a class="header-anchor" href="#_1-默认网络" aria-hidden="true">#</a> 1.默认网络</h3><p>docker 会自动创建三个网络，<code>bridge</code> , <code>host</code>, <code>none</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查看创建的网络</span>
<span class="token function">docker</span> network <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="查看 docker 网络" tabindex="0" loading="lazy"><figcaption>查看 docker 网络</figcaption></figure><ul><li><strong>bridge</strong></li></ul><p>如果不指定，新创建的容器默认将连接到 bridge（桥接网络） 网络。</p><p>默认情况下，使用 bridge 网络，宿主机可以 ping 通容器 IP，容器中也能 ping 通宿主机。</p><p>容器之间只能通过 IP 地址相互访问，由于容器的 IP 会随着启动顺序发生变化，因此不推荐使用 IP 访问。</p><ul><li><strong>host</strong></li></ul><blockquote><p><strong>说明</strong></p><p>慎用，可能会有安全问题。</p></blockquote><p>容器与宿主机共享网络，不需要映射端口即可通过宿主机 IP 访问。（-p 选项会被忽略）</p><p>主机模式网络可用于优化性能，在容器需要处理大量端口的情况下，它不需要网络地址转换（NAT），并且不会为每个端口创建 “用户空间代理”。</p><ul><li><strong>none</strong></li></ul><p>禁用容器中所用网络，在启动容器时使用。</p><h3 id="_2-用户自定义网络" tabindex="-1"><a class="header-anchor" href="#_2-用户自定义网络" aria-hidden="true">#</a> 2.用户自定义网络</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建用户自定义网络</span>
<span class="token function">docker</span> network create my-net

<span class="token comment">## 将已有容器连接到此网络</span>
<span class="token function">docker</span> network connect my-net db-mysql

<span class="token comment">## 创建容器时指定网络</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--network</span> my-net mysql:5.7 mysql -hdb-mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在用户自定义网络上，容器之间可以通过容器名进行访问。</p><p>用户自定义网络使用 Docker 的嵌入式 DNS 服务器将容器名解析成 IP。</p><h3 id="_3-主机名解析" tabindex="-1"><a class="header-anchor" href="#_3-主机名解析" aria-hidden="true">#</a> 3.主机名解析</h3><h4 id="hostname" tabindex="-1"><a class="header-anchor" href="#hostname" aria-hidden="true">#</a> hostname</h4><p>容器的 hostname 默认为容器的 ID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 启动容器，使用指定 hostname</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> my-alpine <span class="token parameter variable">--name</span> my-alpine  alpine:3.15

<span class="token comment">## 查看容器信息</span>
<span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span> my-alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="查看容器信息" tabindex="0" loading="lazy"><figcaption>查看容器信息</figcaption></figure><h4 id="etc-hosts" tabindex="-1"><a class="header-anchor" href="#etc-hosts" aria-hidden="true">#</a> /etc/hosts</h4><p>在容器内手动修改 <code>/etc/hosts</code> 文件，容器重启后会恢复默认配置。</p><p>要使 <code>/etc/hosts</code> 修改生效，使用 <code>--add-host</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run --add-host<span class="token operator">=</span>my-alpine:172.17.0.3 <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> alpine:3.15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-参考文档-2" tabindex="-1"><a class="header-anchor" href="#_4-参考文档-2" aria-hidden="true">#</a> 4.参考文档</h3>`,29),B={href:"https://docs.docker.com/network/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://docs.docker.com/network/bridge/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.docker.com/config/containers/container-networking/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.docker.com/network/network-tutorial-standalone/",target:"_blank",rel:"noopener noreferrer"},G=t('<h2 id="五、docker-存储" tabindex="-1"><a class="header-anchor" href="#五、docker-存储" aria-hidden="true">#</a> 五、docker 存储</h2><p>将数据存储在容器中，一旦容器被删除，数据也会被删除。同时也会使容器变得越来越大，不方便恢复和迁移。</p><p>将数据存储到容器之外，这样删除容器也不会丢失数据。一旦容器故障，我们可以重新创建一个容器，将数据挂载到容器里，就可以快速的恢复。</p><h3 id="_1-存储方式" tabindex="-1"><a class="header-anchor" href="#_1-存储方式" aria-hidden="true">#</a> 1.存储方式</h3><p>docker 提供了以下存储选项</p><figure><img src="'+v+`" alt="Docker 存储方式" tabindex="0" loading="lazy"><figcaption>Docker 存储方式</figcaption></figure><ul><li><strong>volume 卷</strong></li></ul><p>卷存储在主机文件系统分配一块专有存储区域，由 Docker（在 Linux 上）管理，并且与主机的核心功能隔离。非 Docker 进程不能修改文件系统的这一部分。卷是在 Docker 中持久保存数据的最佳方式。</p><ul><li><strong>bind mount 绑定挂载</strong></li></ul><p>绑定挂载可以将主机文件系统上目录或文件装载到容器中，但是主机上的非 Docker 进程可以修改它们，同时在容器中也可以更改主机文件系统，包括创建、修改或删除文件或目录，使用不当，可能会带来安全隐患。</p><ul><li><strong>tmpfs 临时挂载</strong></li></ul><p>tmpfs 挂载仅存储在主机系统的内存中，从不写入主机系统的文件系统。当容器停止时，数据将被删除。</p><h4 id="绑定挂载-bind-mount" tabindex="-1"><a class="header-anchor" href="#绑定挂载-bind-mount" aria-hidden="true">#</a> 绑定挂载（bind mount）</h4><p>绑定挂载适用以下场景：</p><ul><li>将配置文件从主机共享到容器。</li><li>在 Docker 主机上的开发环境和容器之间共享源代码或编译目录。 <ul><li>例如，可以将 Maven 的 <code>target/</code> 目录挂载到容器中，每次在主机上用 Maven 打包项目时，容器内都可以使用新编译的程序包。</li></ul></li></ul><h5 id="v" tabindex="-1"><a class="header-anchor" href="#v" aria-hidden="true">#</a> -v</h5><p>绑定挂载将主机上的目录或者文件装载到容器中。绑定挂载会覆盖容器中的目录或文件。</p><p>如果宿主机目录不存在，docker 会自动创建这个目录。但是 docker 只自动创建文件夹，不会创建文件。</p><p>例如，mysql 的配置文件和数据存储目录使用主机的目录。可以将配置文件设置为只读（read-only）防止容器更改主机中的文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
           <span class="token parameter variable">-v</span> /home/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro  <span class="token punctuation">\\</span>
           <span class="token parameter variable">-v</span> /home/mysql/data:/var/lib/mysql  <span class="token punctuation">\\</span>
           <span class="token parameter variable">-d</span> mysql:5.7 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="tmpfs-临时挂载" tabindex="-1"><a class="header-anchor" href="#tmpfs-临时挂载" aria-hidden="true">#</a> --tmpfs 临时挂载</h5><p>临时挂载将数据保留在主机内存中，当容器停止时，文件将被删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--tmpfs</span> /tmp nginx:1.22-alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="volume-卷" tabindex="-1"><a class="header-anchor" href="#volume-卷" aria-hidden="true">#</a> volume 卷</h4><p>卷是 docker 容器存储数据的首选方式，卷有以下优势：</p><ul><li>卷可以在多个正在运行的容器之间共享数据。仅当显式删除卷时，才会删除卷。</li><li>当你想要将容器数据存储在外部网络存储上或云提供商上，而不是本地时。</li><li>卷更容易备份或迁移，当您需要备份、还原数据或将数据从一个 Docker 主机迁移到另一个 Docker 主机时，卷是更好的选择。</li></ul><h4 id="创建和挂载卷" tabindex="-1"><a class="header-anchor" href="#创建和挂载卷" aria-hidden="true">#</a> 创建和挂载卷</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建挂载卷</span>
<span class="token function">docker</span> volume create my-data

<span class="token comment">## 运行容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
           <span class="token parameter variable">-v</span> /home/mysql/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf:ro  <span class="token punctuation">\\</span>
           <span class="token parameter variable">-v</span> my-data:/var/lib/mysql  <span class="token punctuation">\\</span>
           <span class="token parameter variable">-d</span> mysql:5.7 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 nfs 卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create <span class="token parameter variable">--driver</span> <span class="token builtin class-name">local</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--opt</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>nfs <span class="token punctuation">\\</span>
    <span class="token parameter variable">--opt</span> <span class="token assign-left variable">o</span><span class="token operator">=</span>addr<span class="token operator">=</span><span class="token number">192.168</span>.1.1,rw <span class="token punctuation">\\</span>
    <span class="token parameter variable">--opt</span> <span class="token assign-left variable">device</span><span class="token operator">=</span>:/path/to/dir <span class="token punctuation">\\</span>
    vol-nfs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-参考文档" tabindex="-1"><a class="header-anchor" href="#_2-参考文档" aria-hidden="true">#</a> 2.参考文档</h3>`,31),$={href:"https://docs.docker.com/storage/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.docker.com/storage/bind-mounts/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://docs.docker.com/storage/tmpfs/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.docker.com/storage/volumes/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://docs.docker.com/engine/reference/commandline/volume_create/",target:"_blank",rel:"noopener noreferrer"},Z=n("h2",{id:"六、部署自己的应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#六、部署自己的应用","aria-hidden":"true"},"#"),s(" 六、部署自己的应用")],-1),nn=n("p",null,"本例子我们使用 docker 来部署一个应用系统，RuoYi 是一款用 java 编写的，基于 SpringBoot+Bootstrap 的后台管理系统。",-1),sn={href:"http://doc.ruoyi.vip/ruoyi/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://gitee.com/y_project/RuoYi/tree/v4.7.4/",target:"_blank",rel:"noopener noreferrer"},en=t(`<p>将源码编译打包成 <code>ruoyi-admin.jar</code> 文件，放到宿主机 <code>/home/app</code> 目录下，<code>/home/app/sql</code> 目录下是数据库初始化脚本。</p><p>配置文件中修改了端口、数据库连接信息。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># application.yml</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token comment"># 服务器的 HTTP 端口，默认为 80</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>

<span class="token punctuation">---</span>
<span class="token comment"># application-druid.yml</span>
  <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//ruoyi<span class="token punctuation">-</span>db<span class="token punctuation">:</span>3306/ry<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8</span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> root
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建存储卷</span>
<span class="token function">docker</span> volume create ruoyi-data
<span class="token comment">## 创建网络</span>
<span class="token function">docker</span> network create ruoyi-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-部署-mysql-并初始化数据库" tabindex="-1"><a class="header-anchor" href="#_1-部署-mysql-并初始化数据库" aria-hidden="true">#</a> 1.部署 mysql 并初始化数据库</h3><p>我们在创建数据库容器的时候，需要做三件事：</p><ul><li>创建数据库 <code>ry</code></li><li>设置字符集为 <code>utf-8</code></li><li>执行数据库初始化脚本</li></ul><p>使用 <code>MYSQL_DATABASE</code> 环境变量创建数据库</p><p>设置字符集 <code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code></p><p>容器使用 <code>/docker-entrypoint-initdb.d</code> 目录下的脚本初始化数据库，脚本可以是 <code>.sh</code>，<code>.sql</code> 和 <code>.sql.gz</code> 这三种格式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>ry <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/app/sql:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> ruoyi-data:/var/lib/mysql  <span class="token punctuation">\\</span>
<span class="token parameter variable">--network</span> ruoyi-net <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> ruoyi-db <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7 <span class="token punctuation">\\</span>
--character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-部署应用" tabindex="-1"><a class="header-anchor" href="#_2-部署应用" aria-hidden="true">#</a> 2.部署应用</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/app/ruoyi-admin.jar:/usr/local/src/ruoyi-admin.jar <span class="token punctuation">\\</span>
<span class="token parameter variable">--network</span> ruoyi-net <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> ruoyi-java <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> openjdk:8u342-jre <span class="token punctuation">\\</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> /usr/local/src/ruoyi-admin.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-解决乱码问题" tabindex="-1"><a class="header-anchor" href="#_3-解决乱码问题" aria-hidden="true">#</a> 3.解决乱码问题</h3><p>乱码问题是容器中 mysql 默认字符集引起的，我们需要将默认字符集改为 utf8mb4。</p>`,16),tn={href:"https://github.com/docker-library/mysql/issues/131",target:"_blank",rel:"noopener noreferrer"},on=t(`<p>可以进入容器，使用以下命令查看数据库字符集</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> ruoyi-db mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>

<span class="token operator">&gt;</span> show variables like <span class="token string">&#39;%character%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong></p><p>由于删除容器不会删除存储卷，修改字符集需要删除存储卷，不然已经导入的数据字符集不会发生改变</p></blockquote><p>删除容器和卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop ruoyi-db
<span class="token function">docker</span> <span class="token function">rm</span> ruoyi-db
<span class="token function">docker</span> volume <span class="token function">rm</span> ruoyi-data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过以下两种解决方法</p><h4 id="修改运行参数" tabindex="-1"><a class="header-anchor" href="#修改运行参数" aria-hidden="true">#</a> 修改运行参数</h4><p>使用环境变量 <code>LANG=C.UTF-8</code> 设置客户端字符集</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>ry <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C.UTF-8 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/app/sql:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> ruoyi-data:/var/lib/mysql  <span class="token punctuation">\\</span>
<span class="token parameter variable">--network</span> ruoyi-net <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> ruoyi-db <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7 <span class="token punctuation">\\</span>
--character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>或者</strong></p><p>使用 <code>--skip-character-set-client-handshake</code> 忽略客户端字符集，使用客户端和服务端字符集一致。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>ry <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/app/sql:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> ruoyi-data:/var/lib/mysql  <span class="token punctuation">\\</span>
<span class="token parameter variable">--network</span> ruoyi-net <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> ruoyi-db <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7 <span class="token punctuation">\\</span>
--skip-character-set-client-handshake --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h4><p>修改 <code>/home/mysql/mysql.cnf</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
character-set-server<span class="token operator">=</span>utf8mb4
collation-server<span class="token operator">=</span>utf8mb4_general_ci
init-connect<span class="token operator">=</span><span class="token string">&#39;SET NAMES utf8mb4&#39;</span>

<span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8mb4

<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8mb4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将配置文件挂载到容器中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>ry <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro  <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/app/sql:/docker-entrypoint-initdb.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> ruoyi-data:/var/lib/mysql  <span class="token punctuation">\\</span>
<span class="token parameter variable">--network</span> ruoyi-net <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> ruoyi-db <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-参考文档-3" tabindex="-1"><a class="header-anchor" href="#_4-参考文档-3" aria-hidden="true">#</a> 4.参考文档</h3>`,18),cn={href:"https://mariadb.com/kb/en/setting-character-sets-and-collations/",target:"_blank",rel:"noopener noreferrer"},ln=n("h2",{id:"七、docker-compose-容器编排",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#七、docker-compose-容器编排","aria-hidden":"true"},"#"),s(" 七、docker compose 容器编排")],-1),rn=n("p",null,"在实际工作中，部署一个应用可能需要部署多个容器，一个一个部署非常不方便。docker compose 可以一键部署和启动多个容器，它使用 yaml 文件来编排服务。",-1),pn=n("p",null,[s("github 和 docker hub 很多项目都提供了 "),n("code",null,"docker-compose.yaml"),s(" 文件，我们可以一键部署项目，非常方便。")],-1),dn=n("h3",{id:"_1-一键部署-wordpress",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-一键部署-wordpress","aria-hidden":"true"},"#"),s(" 1.一键部署 wordpress")],-1),un={href:"https://hub.docker.com/_/wordpress",target:"_blank",rel:"noopener noreferrer"},kn=t(`<p>将以下内容保存到本地的 <code>docker-compose.yml</code> 文件中。</p><p><code>docker compose</code> 命令启动时，默认在当前目录下寻找 <code>compose.yaml</code> 或 <code>compose.yml</code>，为了兼容之前的版本，也会查找 <code>docker-compose.yaml</code> 或 <code>docker-compose.yml</code>。</p><p>也可以使用 <code>-f</code> 参数手动指定文件 <code>docker compose -f docker-compose-dev.yml up -d</code> 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;3.1&#39;</span>

services:
  wordpress:
    image: wordpress
    restart: always
    ports:
      - <span class="token number">8080</span>:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    volumes:
      - wordpress:/var/www/html

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: <span class="token string">&#39;1&#39;</span>
    volumes:
      - db:/var/lib/mysql

volumes:
  wordpress:
  db:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 一键部署启动</span>
<span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
<span class="token comment">## 启动/停止服务</span>
<span class="token function">docker</span> compose start/stop 
<span class="token comment">## 停止并删除容器，不会删除存储卷 volume</span>
<span class="token function">docker</span> compose down 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-compose-文件结构" tabindex="-1"><a class="header-anchor" href="#_2-compose-文件结构" aria-hidden="true">#</a> 2.compose 文件结构</h3><p><code>docker-compose.yml</code> 通常需要包含以下几个顶级元素：</p><ul><li><strong>version</strong> 已弃用，早期版本需要此元素。</li><li><strong>services</strong> 必要元素，定义一个或多个容器的运行参数，在 services 中可以通过以下元素定义容器的运行参数 <ul><li><strong>image</strong> 容器镜像</li><li><strong>ports</strong> 端口映射</li><li><strong>environment</strong> 环境变量</li><li><strong>networks</strong> 容器使用的网络</li><li><strong>volumes</strong> 容器挂载的存储卷</li><li><strong>command</strong> 容器启动时执行的命令</li><li><strong>depends_on</strong> 定义启动顺序，复数形式（例如 ports，networks，volumes，depends_on）参数需要传入列表</li></ul></li><li><strong>networks</strong> 创建自定义网络</li><li><strong>volumes</strong> 创建存储卷</li></ul><h3 id="_3-yaml-文件语法" tabindex="-1"><a class="header-anchor" href="#_3-yaml-文件语法" aria-hidden="true">#</a> 3.yaml 文件语法</h3><ul><li>缩进代表上下级关系</li><li><strong>缩进时不允许使用 Tab 键，只允许使用空格</strong></li><li><code>:</code> 键值对，后面必须有空格</li><li><code>-</code> 列表，后面必须有空格</li><li><code>[ ]</code> 数组</li><li><code>#</code> 注释</li><li><code>{key:value, k1:v1}</code> 键值对</li><li><code>|</code> 多行文本块 如果一个文件中包含多个文档</li><li><code>---</code> 表示一个文档的开始</li></ul><p><strong>还有一种常见的用法</strong>：</p><p>把公共的配置提取出来，用 <code>&amp;</code> 来建立锚点，<code>&lt;&lt;</code> 合并到当前数据，用 <code>*</code> 引用锚点，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.7&#39;</span>

<span class="token comment"># Settings and configurations that are common for all containers</span>
<span class="token key atrule">x-minio-common</span><span class="token punctuation">:</span> <span class="token important">&amp;minio-common</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/minio/minio<span class="token punctuation">:</span>RELEASE.2022<span class="token punctuation">-</span>08<span class="token punctuation">-</span>13T21<span class="token punctuation">-</span>54<span class="token punctuation">-</span>44Z
  <span class="token key atrule">command</span><span class="token punctuation">:</span> server <span class="token punctuation">-</span><span class="token punctuation">-</span>console<span class="token punctuation">-</span>address &quot;<span class="token punctuation">:</span>9001&quot; http<span class="token punctuation">:</span>//minio<span class="token punctuation">{</span>1<span class="token punctuation">...</span>2<span class="token punctuation">}</span>/data<span class="token punctuation">{</span>1<span class="token punctuation">...</span>2<span class="token punctuation">}</span>
  <span class="token key atrule">expose</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;9000&quot;</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;9001&quot;</span>
  
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">minio1</span><span class="token punctuation">:</span>
    <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*minio-common</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> data1<span class="token punctuation">-</span>1<span class="token punctuation">:</span>/data1
      <span class="token punctuation">-</span> data1<span class="token punctuation">-</span>2<span class="token punctuation">:</span>/data2

  <span class="token key atrule">minio2</span><span class="token punctuation">:</span>
    <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*minio-common</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> data2<span class="token punctuation">-</span>1<span class="token punctuation">:</span>/data1
      <span class="token punctuation">-</span> data2<span class="token punctuation">-</span>2<span class="token punctuation">:</span>/data2

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">data1-1</span><span class="token punctuation">:</span>
  <span class="token key atrule">data1-2</span><span class="token punctuation">:</span>
  <span class="token key atrule">data2-1</span><span class="token punctuation">:</span>
  <span class="token key atrule">data2-2</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-编排自己的项目" tabindex="-1"><a class="header-anchor" href="#_4-编排自己的项目" aria-hidden="true">#</a> 4.编排自己的项目</h3><p>以 ruoyi 项目为例子，先采用挂载目录的方式部署应用，等我们学完 <code>dockerfile</code> 打包，就可以完整的部署应用了。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>    
  <span class="token key atrule">ruoyi-app</span><span class="token punctuation">:</span>
    <span class="token comment">#  docker run --name ruoyi-app      \\</span>
    <span class="token comment">#             -p 8080:8080        \\</span>
    <span class="token comment">#             --network ruoyi-net      \\</span>
    <span class="token comment">#             -v /home/app/ruoyi-admin.jar:/usr/local/src/ruoyi-admin.jar   \\</span>
    <span class="token comment">#             -d openjdk:8u342-jre    \\</span>
    <span class="token comment">#             java -jar /usr/local/src/ruoyi-admin.jar</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8u342<span class="token punctuation">-</span>jre
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /home/app/ruoyi<span class="token punctuation">-</span>admin.jar<span class="token punctuation">:</span>/usr/local/src/ruoyi<span class="token punctuation">-</span>admin.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /usr/local/src/ruoyi<span class="token punctuation">-</span>admin.jar
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>db
  
  <span class="token key atrule">ruoyi-db</span><span class="token punctuation">:</span>
    <span class="token comment">#  docker run --name ruoyi-db -p 3303:3306 \\</span>
    <span class="token comment">#             --network ruoyi-net        \\</span>
    <span class="token comment">#             -v ruoyi-data:/var/lib/mysql  \\</span>
    <span class="token comment">#             -v /home/app/sql:/docker-entrypoint-initdb.d   \\</span>
    <span class="token comment">#             -e MYSQL_DATABASE=ry         \\</span>
    <span class="token comment">#             -e MYSQL_ROOT_PASSWORD=123456    \\</span>
    <span class="token comment">#             -d mysql:5.7      \\</span>
    <span class="token comment">#             --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --skip-character-set-client-handshake</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456
      <span class="token punctuation">-</span> MYSQL_DATABASE=ry
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;--character-set-server=utf8mb4&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--collation-server=utf8mb4_general_ci&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--skip-character-set-client-handshake&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /home/app/sql<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-data</span><span class="token punctuation">:</span>

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-net</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>command</code> 支持以下写法：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 推荐使用数组或列表的方式</span>
<span class="token comment"># 数组</span>
<span class="token key atrule">command</span><span class="token punctuation">:</span>
  <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span>
   <span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span>
   <span class="token string">&quot;/usr/local/src/ruoyi-admin.jar&quot;</span>
  <span class="token punctuation">]</span>
<span class="token comment"># 列表</span>
<span class="token key atrule">command</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> java
    <span class="token punctuation">-</span> <span class="token punctuation">-</span>jar
    <span class="token punctuation">-</span> /usr/local/src/ruoyi<span class="token punctuation">-</span>admin.jar

<span class="token comment"># shell命令模式</span>
<span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /usr/local/src/ruoyi<span class="token punctuation">-</span>admin.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行复杂的脚本</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">command</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> bash
  <span class="token punctuation">-</span> <span class="token string">&quot;-c&quot;</span>
  <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">
    set -ex
    # Generate mysql server-id from pod ordinal index.
    [[ \`hostname\` =~ -([0-9]+)$ ]] || exit 1
    ordinal=\${BASH_REMATCH[1]}
    echo [mysqld] &gt; /mnt/conf.d/server-id.cnf
    # Add an offset to avoid reserved server-id=0 value.
    echo server-id=$((100 + $ordinal)) &gt;&gt; /mnt/conf.d/server-id.cnf
    # Copy appropriate conf.d files from config-map to emptyDir.
    if [[ $ordinal -eq 0 ]]; then
      cp /mnt/config-map/primary.cnf /mnt/conf.d/
    else
      cp /mnt/config-map/replica.cnf /mnt/conf.d/
    fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>environment</code> 支持如下两种写法</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 使用map</span>
<span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> exampledb
    <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> exampleuser
    <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> examplepass
    <span class="token key atrule">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span>

<span class="token comment">#使用列表</span>
<span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456
    <span class="token punctuation">-</span> MYSQL_DATABASE=ry
    <span class="token punctuation">-</span> LANG=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-容器启动顺序-depends-on" tabindex="-1"><a class="header-anchor" href="#_5-容器启动顺序-depends-on" aria-hidden="true">#</a> 5.容器启动顺序 depends_on</h3><p>数据库初始化完成之前，不会建立 connections。</p><figure><img src="`+b+`" alt="MySQL 初始化" tabindex="0" loading="lazy"><figcaption>MySQL 初始化</figcaption></figure><p><code>depends_on</code> 只能保证容器的启动和销毁顺序，不能确保依赖的容器是否 ready。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
      <span class="token punctuation">-</span> redis
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>depends_on</code> 只能保证 <code>web</code> 容器在 <code>db</code>，<code>redis</code> 之后启动，不会关注他们的状态是否启动完成或准备就绪。</p>`,28),mn={href:"https://docs.docker.com/compose/compose-file/#depends_on",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://docs.docker.com/compose/compose-file/#healthcheck",target:"_blank",rel:"noopener noreferrer"},bn=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token key atrule">db</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy
      <span class="token key atrule">redis</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_started
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>condition</code> 有三种状态：</p><ul><li><code>service_started</code>：容器已启动</li><li><code>service_healthy</code>：容器处于健康状态</li><li><code>service_completed_successfully</code>：容器执行完成且成功退出（退出状态码为 0）</li></ul><p>我们来改造一下我们自己的 <code>docker-compose.yaml</code> 文件，完整例子如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span> 

  <span class="token key atrule">ruoyi-app</span><span class="token punctuation">:</span>
    <span class="token comment">#  docker run --name ruoyi-app      \\</span>
    <span class="token comment">#             -p 8080:8080        \\</span>
    <span class="token comment">#             --network ruoyi-net      \\</span>
    <span class="token comment">#             -v /home/app/ruoyi-admin.jar:/usr/local/src/ruoyi-admin.jar   \\</span>
    <span class="token comment">#             -d openjdk:8u342-jre    \\</span>
    <span class="token comment">#             java -jar /usr/local/src/ruoyi-admin.jar</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8u342<span class="token punctuation">-</span>jre
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /home/app/ruoyi<span class="token punctuation">-</span>admin.jar<span class="token punctuation">:</span>/usr/local/src/ruoyi<span class="token punctuation">-</span>admin.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/usr/local/src/ruoyi-admin.jar&quot;</span> <span class="token punctuation">]</span>
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;curl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 10s
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token key atrule">ruoyi-db</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy

  <span class="token key atrule">ruoyi-db</span><span class="token punctuation">:</span>
    <span class="token comment">#  docker run --name ruoyi-db -p 3303:3306 \\</span>
    <span class="token comment">#             --network ruoyi-net        \\</span>
    <span class="token comment">#             -v ruoyi-data:/var/lib/mysql  \\</span>
    <span class="token comment">#             -v /home/app/sql:/docker-entrypoint-initdb.d   \\</span>
    <span class="token comment">#             -e MYSQL_DATABASE=ry         \\</span>
    <span class="token comment">#             -e MYSQL_ROOT_PASSWORD=123456    \\</span>
    <span class="token comment">#             -d mysql:5.7      \\</span>
    <span class="token comment">#             --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --skip-character-set-client-handshake</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> MYSQL_DATABASE=ry
      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql
      <span class="token punctuation">-</span> /home/app/sql<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">[</span>
        <span class="token string">&quot;--character-set-server=utf8mb4&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;--collation-server=utf8mb4_unicode_ci&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;--skip-character-set-client-handshake&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;mysqladmin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-u&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-p$$MYSQL_ROOT_PASSWORD&#39;</span><span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 10s

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-data</span><span class="token punctuation">:</span>

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-net</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-参考文档" tabindex="-1"><a class="header-anchor" href="#_6-参考文档" aria-hidden="true">#</a> 6.参考文档</h3>`,6),hn={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://docs.docker.com/compose/compose-file/#depends_on",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://docs.docker.com/compose/startup-order/",target:"_blank",rel:"noopener noreferrer"},_n=t(`<h2 id="八、dockerfile-制作镜像" tabindex="-1"><a class="header-anchor" href="#八、dockerfile-制作镜像" aria-hidden="true">#</a> 八、dockerfile 制作镜像</h2><h3 id="_1-dockerfile" tabindex="-1"><a class="header-anchor" href="#_1-dockerfile" aria-hidden="true">#</a> 1.dockerfile</h3><p>dockerfile 通常包含以下几个常用命令：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>
<span class="token instruction"><span class="token keyword">RUN</span> make .</span>
<span class="token instruction"><span class="token keyword">CMD</span> python app.py</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>FROM</code>：打包使用的基础镜像</li><li><code>WORKDIR</code>：相当于 <code>cd</code> 命令，进入工作目录</li><li><code>COPY</code>：将宿主机的文件复制到容器内</li><li><code>RUN</code>：打包时执行的命令，相当于打包过程中在容器中执行 shell 脚本，通常用来安装应用程序所需要的依赖、设置权限、初始化配置文件等</li><li><code>CMD</code>：运行镜像时执行的命令</li><li><code>EXPOSE</code>：指定容器在运行时监听的网络端口，它并不会公开端口，仅起到声明的作用，公开端口需要容器运行时使用 <code>-p</code> 参数指定。</li></ul><h3 id="_2-制作自己的镜像" tabindex="-1"><a class="header-anchor" href="#_2-制作自己的镜像" aria-hidden="true">#</a> 2.制作自己的镜像</h3><p>参考我们之前的配置，制作 dockerfile 文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">ruoyi-java</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8u342<span class="token punctuation">-</span>jre
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /home/app/ruoyi<span class="token punctuation">-</span>admin.jar<span class="token punctuation">:</span>/usr/local/src/ruoyi<span class="token punctuation">-</span>admin.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/usr/local/src/ruoyi-admin.jar&quot;</span> <span class="token punctuation">]</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 dockerfile 文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> openjdk:8u342-jre</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./ruoyi-admin.jar .</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;ruoyi-admin.jar&quot;</span> ]</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker build .</code> 打包</p><figure><img src="`+h+'" alt="Docker 构建镜像" tabindex="0" loading="lazy"><figcaption>Docker 构建镜像</figcaption></figure><p><code>docker images</code> 查看镜像 id</p><figure><img src="'+g+'" alt="查看镜像" tabindex="0" loading="lazy"><figcaption>查看镜像</figcaption></figure><p><code>docker tag 79d007b05ff6 ruoyi-app:4.7.4-jar</code> 设置镜像的标签</p><h3 id="_3-image-镜像与-layer-层" tabindex="-1"><a class="header-anchor" href="#_3-image-镜像与-layer-层" aria-hidden="true">#</a> 3.image 镜像与 layer 层</h3><p>image 文件由一系列层构建而成，dockerfile 每一个命令都会生成一个层。每一层都是只读的。</p><p>例如前面我们制作镜像，就产生了 4 个层。</p><figure><img src="'+y+'" alt="镜像构建" tabindex="0" loading="lazy"><figcaption>镜像构建</figcaption></figure><p>也可以使用 <code>docker image history ruoyi-java:4.7.4</code> 命令查看</p><figure><img src="'+f+'" alt="查看镜像构建历史" tabindex="0" loading="lazy"><figcaption>查看镜像构建历史</figcaption></figure><p>创建容器时，会创建一个新的可写层，通常称为 “容器层”。对正在运行的容器所做的所有更改（如写入新文件、修改现有文件和删除文件）都将写入容器层，而不会修改镜像。</p><figure><img src="'+i+`" alt="镜像分层" tabindex="0" loading="lazy"><figcaption>镜像分层</figcaption></figure><h3 id="_4-多阶段构建" tabindex="-1"><a class="header-anchor" href="#_4-多阶段构建" aria-hidden="true">#</a> 4.多阶段构建</h3><p>在构建基于 Java 的应用程序时，需要一个 JDK 将源代码编译为 Java 字节码。但是，在生产中不需要该 JDK。多阶段构建可以将生成时依赖与运行时依赖分开，减小整个 image 文件大小。</p><h4 id="maven-tomcat-示例" tabindex="-1"><a class="header-anchor" href="#maven-tomcat-示例" aria-hidden="true">#</a> Maven/Tomcat 示例</h4><p>使用 Maven 来构建应用，在最终的 image 中不需要包含 maven。我们可以使用多阶段构建，每一个阶段从 FROM 开始，最终的 image 只会从最后一个阶段构建，不会包含前面阶段产生的层，因此可以减少镜像体积。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> maven <span class="token keyword">AS</span> build</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /source</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>
<span class="token instruction"><span class="token keyword">RUN</span> mvn package</span>

<span class="token instruction"><span class="token keyword">FROM</span>  openjdk:8u342-jre</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> /source/ruoyi-admin/target/ruoyi-admin.jar .</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;ruoyi-admin.jar&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker build -t ruoyi-jar:4.7.4 .</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># project name</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;app&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">ruoyi-java</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> ruoyi<span class="token punctuation">-</span>jar<span class="token punctuation">:</span>4.7.4
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;--server.port=8080&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--ruoyi.profile=/home/ruoyi/uploadPath&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--spring.datasource.druid.master.url=jdbc:mysql://ruoyi-db:3306/ry?useUnicode=true&amp;characterEncoding=utf8&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--spring.datasource.druid.master.username=root&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--spring.datasource.druid.master.password=123456&quot;</span>
    <span class="token punctuation">]</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;curl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-f&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080&quot;</span> <span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 10s
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token key atrule">ruoyi-db</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy

  <span class="token key atrule">ruoyi-db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456
      <span class="token punctuation">-</span> MYSQL_DATABASE=ry
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;--character-set-server=utf8mb4&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--collation-server=utf8mb4_general_ci&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;--skip-character-set-client-handshake&quot;</span>
    <span class="token punctuation">]</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /home/app/sql<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>net
    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;mysqladmin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-u&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-p$$MYSQL_ROOT_PASSWORD&#39;</span> <span class="token punctuation">]</span>
      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s
      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 10s

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-data</span><span class="token punctuation">:</span>

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-net</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="entrypoint-和-cmd-的区别" tabindex="-1"><a class="header-anchor" href="#entrypoint-和-cmd-的区别" aria-hidden="true">#</a> <code>ENTRYPOINT</code> 和 <code>CMD</code> 的区别</h4><p><code>dockerfile</code> 应该至少包含一个 <code>ENTRYPOINT</code> 或 <code>CMD</code>。</p><p><code>ENTRYPOINT</code> 指定容器启动时执行的默认程序，一般运行容器时不会被替换或覆盖。</p><p>除非使用 <code>--entrypoint</code> 进行指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--entrypoint</span> /bin/bash redis 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>CMD</code> 可以在启动容器时被替换和覆盖。</p><p>例如 <code>docker run -it --rm mysql:5.7 /bin/bash</code></p><p>如果镜像中 <code>ENTRYPOINT</code> 和 <code>CMD</code> 都存在，则 <code>CMD</code> 将作为 <code>ENTRYPOINT</code> 的参数使用。</p><h3 id="_5-参考文档" tabindex="-1"><a class="header-anchor" href="#_5-参考文档" aria-hidden="true">#</a> 5.参考文档</h3>`,39),qn={href:"https://docs.docker.com/get-started/09_image_best/",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://docs.docker.com/language/java/build-images/",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://docs.docker.com/storage/storagedriver/",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://docs.docker.com/engine/reference/run/#cmd-default-command-or-options",target:"_blank",rel:"noopener noreferrer"},On=t('<h2 id="九、私有仓库" tabindex="-1"><a class="header-anchor" href="#九、私有仓库" aria-hidden="true">#</a> 九、私有仓库</h2><h3 id="_1-docker-registry" tabindex="-1"><a class="header-anchor" href="#_1-docker-registry" aria-hidden="true">#</a> 1.docker registry</h3><p>我们可以使用 <code>docker push</code> 将自己的 image 推送到 docker hub 中进行共享，但是在实际工作中，很多公司的代码不能上传到公开的仓库中，因此我们可以创建自己的镜像仓库。</p><p>docker 官网提供了一个 docker registry 的私有仓库项目，可以方便的通过 docker 部署。</p><p><code>docker run -d -p 5000:5000 --restart always --name registry registry:2</code></p><p><code>docker image tag ruoyi-java:4.7.4 localhost:5000/ruoyi-java:4.7.4</code></p><p><code>docker push localhost:5000/ruoyi-java:4.7.4</code></p><p><code>docker pull localhost:5000/ruoyi-java:4.7.4</code></p><p>如果遇到以下错误：</p><figure><img src="'+_+`" alt="构建异常" tabindex="0" loading="lazy"><figcaption>构建异常</figcaption></figure><p>这是因为 <code>docker push</code> 默认使用 <code>HTTPS</code> 协议，而服务端的 <code>registry</code> 仓库使用的是 <code>HTTP</code>。</p><p>解决这个问题，需要修改 <code>/etc/docker/daemon.json</code>，加入</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;192.168.56.108:5000&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-harbor" tabindex="-1"><a class="header-anchor" href="#_2-harbor" aria-hidden="true">#</a> 2.harbor</h3><p>habor 是一个功能更强大镜像仓库，它具有完整的权限控制和 Web 界面，更符合我们的实际工作场景。</p>`,15),jn={href:"https://github.com/bitnami/containers/archive/main.tar.gz",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> harbor
<span class="token function">tar</span> xzvf containers-main.tar.gz
<span class="token builtin class-name">cd</span> containers-main/bitnami/harbor-portal
<span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),An={href:"http://192.168.56.108",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"admin/bitnami",-1),Tn=t('<figure><img src="'+q+'" alt="Harbor" tabindex="0" loading="lazy"><figcaption>Harbor</figcaption></figure><h3 id="_3-保存与加载镜像" tabindex="-1"><a class="header-anchor" href="#_3-保存与加载镜像" aria-hidden="true">#</a> 3.保存与加载镜像</h3><p>当我们处于离线状态，比如在很多内网上不能访问互联网，这时候不能通过镜像仓库的方式共享镜像，我们可以使用导出和导入功能，手动拷贝镜像。</p><ul><li><code>docker save</code>：会包含所有层，以及所有标签 + 版本信息。</li><li><code>docker save alpine:3.15 &gt; alpine-3.15.tar</code>：保存镜像</li><li><code>docker rmi alpine:3.15</code>：删除本地镜像</li><li><code>docker load &lt; alpine-3.15.tar</code>：加载镜像</li></ul><blockquote><p><strong>说明</strong></p><ul><li>不要跟 <code>export</code> 和 <code>import</code> 命令混淆</li><li><code>docker save/load IMAGE</code>：<code>save</code> 和 <code>load</code> 操作的是镜像</li><li><code>docker export/import CONTAINER</code>：<code>export</code> 和 <code>import</code> 操作对象是容器</li><li>镜像包含多个层，每一层都不可变，save 保存的信息包含每个层和所有标签 + 版本信息。</li><li>容器运行的时候会创建一个可写入的容器层，所有的更改都写入容器层，export 导出的只有容器层，不包含父层和标签信息。</li></ul><figure><img src="'+i+'" alt="镜像分层" tabindex="0" loading="lazy"><figcaption>镜像分层</figcaption></figure></blockquote><h2 id="十、windows-安装-docker" tabindex="-1"><a class="header-anchor" href="#十、windows-安装-docker" aria-hidden="true">#</a> 十、windows 安装 docker</h2><blockquote><ul><li><p><strong>Docker Engine</strong> 我们通常所说的 docker，是指 Docker Engine，它是一种容器化技术，用于创建和运行容器。</p></li><li><p><strong>Docker Desktop</strong> Docker Desktop 是一个用于操作 docker的 GUI 图形界面化工具，它包含 Docker Engine。<br></p></li></ul></blockquote><h3 id="_1-windows-下安装-docker-desktop" tabindex="-1"><a class="header-anchor" href="#_1-windows-下安装-docker-desktop" aria-hidden="true">#</a> 1.Windows 下安装 Docker Desktop</h3><blockquote><p><strong>注意</strong></p><ol><li>如果是 Windows 7、Windows8 用户，推荐在虚拟机中安装 docker。</li></ol></blockquote><h4 id="系统版本要求" tabindex="-1"><a class="header-anchor" href="#系统版本要求" aria-hidden="true">#</a> 系统版本要求</h4><p>在 PowerShell 中使用 <code>winver</code> 命令查看系统版本</p><ul><li>Windows 11</li><li>Windows 10 21H1 或更高版本</li></ul><h4 id="必要条件" tabindex="-1"><a class="header-anchor" href="#必要条件" aria-hidden="true">#</a> 必要条件</h4><ol><li>在 “任务管理器” 的 “性能” 选项里查看虚拟化是否启用。如果没有，需要在 BIOS 中开启。</li></ol><figure><img src="'+x+'" alt="任务管理器" tabindex="0" loading="lazy"><figcaption>任务管理器</figcaption></figure><ol start="2"><li>安装“虚拟机平台”和 WSL</li></ol><figure><img src="'+w+`" alt="控制面板" tabindex="0" loading="lazy"><figcaption>控制面板</figcaption></figure><p>或者以管理员身份运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Enable-WindowsOptionalFeature <span class="token parameter variable">-Online</span> <span class="token parameter variable">-FeatureName</span> VirtualMachinePlatform <span class="token parameter variable">-All</span> <span class="token parameter variable">-NoRestart</span>
Enable-WindowsOptionalFeature <span class="token parameter variable">-Online</span> <span class="token parameter variable">-FeatureName</span> Microsoft-Windows-Subsystem-Linux <span class="token parameter variable">-All</span> <span class="token parameter variable">-NoRestart</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>设置 Hypervisor 开机自动启动</li></ol><p>一些程序（例如旧版本的 Virtual Box 或某些游戏）会禁用 Hypervisor 自动启动，可能会使 docker 无法正常运行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bcdedit /set hypervisorlaunchtype auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>安装 WSL2 内核更新包</li></ol>`,23),Pn={href:"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi",target:"_blank",rel:"noopener noreferrer"},Ln=t(`<ol start="5"><li>将 WSL 2 设置为默认版本</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wsl --set-default-version <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启系统。</p><h4 id="安装-docker-desktop" tabindex="-1"><a class="header-anchor" href="#安装-docker-desktop" aria-hidden="true">#</a> 安装 Docker Desktop</h4>`,4),En={href:"https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe",target:"_blank",rel:"noopener noreferrer"},Yn=t('<figure><img src="'+S+'" alt="Docker Desktop for Window" tabindex="0" loading="lazy"><figcaption>Docker Desktop for Window</figcaption></figure><h4 id="配置镜像站" tabindex="-1"><a class="header-anchor" href="#配置镜像站" aria-hidden="true">#</a> 配置镜像站</h4><p>由于访问 docker hub 网络比较慢，因此需要配置国内的容器仓库镜像站。</p><figure><img src="'+D+`" alt="配置镜像站" tabindex="0" loading="lazy"><figcaption>配置镜像站</figcaption></figure><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;builder&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;gc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;defaultKeepStorage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;20GB&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;experimental&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;features&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;buildkit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;https://reg-mirror.qiniu.com/&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://hub-mirror.c.163.com/&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2.注意事项</h3><ul><li><strong>挂载路径</strong></li></ul><blockquote><p><strong>注意</strong>：windows 下路径使用 <code>\\</code> 作为分割符</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> D:<span class="token punctuation">\\</span>docker<span class="token punctuation">\\</span>data1:/work1 alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者采用 Linux 路径写法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /D/docker/data2:/work2 alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>dockerfile 换行符</strong></li></ul><p>Docker 容器基于 Linux 运行环境，容器内文件必须使用 Linux 样式的换行符 <code>\\n</code>，不能使用 windows 换行符 <code>\\r\\n</code>。</p><p>例如 dockerfile 文件，windows 下的一些工具会默认使用 windows 换行符，可能导致这些文件在容器中显示语法错误。</p><h3 id="_3-参考文档" tabindex="-1"><a class="header-anchor" href="#_3-参考文档" aria-hidden="true">#</a> 3.参考文档</h3>`,15),Wn={href:"https://docs.docker.com/desktop/windows/wsl/",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://docs.docker.com/desktop/troubleshoot/topics/",target:"_blank",rel:"noopener noreferrer"},In={href:"https://forums.virtualbox.org/viewtopic.php?f=6&t=105951",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://docs.docker.com/desktop/faqs/windowsfaqs/",target:"_blank",rel:"noopener noreferrer"},Cn=t('<h2 id="十一、安装-portainer" tabindex="-1"><a class="header-anchor" href="#十一、安装-portainer" aria-hidden="true">#</a> 十一、安装 portainer</h2><h3 id="_1-portainer" tabindex="-1"><a class="header-anchor" href="#_1-portainer" aria-hidden="true">#</a> 1.portainer</h3><p>Portainer 是一个可视化的 Docker 管理系统，功能十分全面，提供状态显示面板、应用模板快速部署、容器镜像、网络、数据卷的基本操作、事件日志显示、容器控制台操作、登录用户管理和控制等功能。</p><figure><img src="'+O+`" alt="Portainer" tabindex="0" loading="lazy"><figcaption>Portainer</figcaption></figure><h3 id="_2-使用-docker-部署-portainer" tabindex="-1"><a class="header-anchor" href="#_2-使用-docker-部署-portainer" aria-hidden="true">#</a> 2.使用 docker 部署 portainer</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建挂载卷</span>
<span class="token function">docker</span> volume create portainer_data

<span class="token comment">## 启动容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9443</span>:9443 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> portainer_data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> portainer portainer/portainer-ce:2.14.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Bn={href:"https://xn--IP-wz2c754c5qn:9443/",target:"_blank",rel:"noopener noreferrer"},Un=t(`<h3 id="_3-重启策略" tabindex="-1"><a class="header-anchor" href="#_3-重启策略" aria-hidden="true">#</a> 3.重启策略</h3><p>容器的重启策略。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always IMAGE:TAG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><ul><li><code>--restart=no</code> 默认为 no，不会自动重启容器。</li><li><code>--restart=always</code> 当容器停止运行时，总是重启容器。当我们重启 docker 进程时，也会自动重启容器。如果我们使用 <code>docker stop</code> 停止容器时，则不会自动重启容器。</li><li><code>--restart=on-failure:10</code> 仅当容器以异常状态退出时，才重启容器。若重启不成功，最多尝试重启 10 次。</li><li><code>--restart=unless-stopped</code> 当我们重启 docker 时，若这个容器已经处停止状态，则不进行自动重启。</li></ul></blockquote><h2 id="十二、参考" tabindex="-1"><a class="header-anchor" href="#十二、参考" aria-hidden="true">#</a> 十二、参考</h2>`,5),Fn={href:"https://www.yuque.com/wukong-zorrm/xwas40",target:"_blank",rel:"noopener noreferrer"};function Hn(Gn,$n){const a=r("ExternalLinkIcon");return c(),l("div",null,[R,n("p",null,[s("容器包括应用程序及其所有依赖项。容器运行时，与宿主机共享操作系统内核，容器在 Linux 内核层面（使用 "),n("a",A,[s("Cgroups"),e(a)]),s(" 和 "),n("a",M,[s("namespaces"),e(a)]),s("）来实现进程间的隔离，容器在主机操作系统上的用户空间中作为独立进程运行。")]),T,P,L,E,Y,n("ul",null,[n("li",null,[n("a",W,[s("https://www.docker.com/resources/what-container/#/package_software"),e(a)])]),n("li",null,[n("a",N,[s("https://docs.docker.com/engine/security/"),e(a)])])]),Q,n("ul",null,[n("li",null,[n("a",I,[s("https://docs.docker.com/get-started/overview/"),e(a)])]),n("li",null,[n("a",z,[s("https://docs.docker.com/engine/reference/run/"),e(a)])])]),C,n("ul",null,[n("li",null,[n("a",B,[s("https://docs.docker.com/network/"),e(a)])]),n("li",null,[n("a",U,[s("https://docs.docker.com/network/bridge/"),e(a)])]),n("li",null,[n("a",F,[s("https://docs.docker.com/config/containers/container-networking/"),e(a)])]),n("li",null,[n("a",H,[s("https://docs.docker.com/network/network-tutorial-standalone/"),e(a)])])]),G,n("ul",null,[n("li",null,[n("a",$,[s("https://docs.docker.com/storage/"),e(a)])]),n("li",null,[n("a",K,[s("https://docs.docker.com/storage/bind-mounts/"),e(a)])]),n("li",null,[n("a",V,[s("https://docs.docker.com/storage/tmpfs/"),e(a)])]),n("li",null,[n("a",X,[s("https://docs.docker.com/storage/volumes/"),e(a)])]),n("li",null,[n("a",J,[s("https://docs.docker.com/engine/reference/commandline/volume_create/"),e(a)])])]),Z,nn,n("p",null,[s("RuoYi 官方文档："),n("a",sn,[s("http://doc.ruoyi.vip/ruoyi/"),e(a)])]),n("p",null,[s("源码下载："),n("a",an,[s("https://gitee.com/y_project/RuoYi/tree/v4.7.4/"),e(a)])]),en,n("p",null,[s("参考："),n("a",tn,[s("https://github.com/docker-library/mysql/issues/131"),e(a)])]),on,n("ul",null,[n("li",null,[n("a",cn,[s("https://mariadb.com/kb/en/setting-character-sets-and-collations/"),e(a)])])]),ln,rn,pn,dn,n("p",null,[n("a",un,[s("wordpress"),e(a)]),s(" 是一个著名的开源博客系统。")]),kn,n("p",null,[s("要确保应用服务在数据库初始化完成后再启动，需要配合 "),n("a",mn,[s("condition"),e(a)]),s(" 和 "),n("a",vn,[s("healthcheck"),e(a)]),s(" 使用。")]),bn,n("ul",null,[n("li",null,[n("a",hn,[s("https://docs.docker.com/compose/"),e(a)])]),n("li",null,[n("a",gn,[s("https://docs.docker.com/compose/compose-file/"),e(a)])]),n("li",null,[n("a",yn,[s("https://docs.docker.com/compose/compose-file/#depends_on"),e(a)])]),n("li",null,[n("a",fn,[s("https://docs.docker.com/compose/startup-order/"),e(a)])])]),_n,n("ul",null,[n("li",null,[n("a",qn,[s("https://docs.docker.com/get-started/09_image_best/"),e(a)])]),n("li",null,[n("a",xn,[s("https://docs.docker.com/language/java/build-images/"),e(a)])]),n("li",null,[n("a",wn,[s("https://docs.docker.com/storage/storagedriver/"),e(a)])]),n("li",null,[n("a",Sn,[s("https://docs.docker.com/develop/develop-images/dockerfile_best-practices/"),e(a)])]),n("li",null,[n("a",Dn,[s("https://docs.docker.com/engine/reference/run/#cmd-default-command-or-options"),e(a)])])]),On,n("p",null,[s("下载 bitname 发布的 harbor 镜像配置包："),n("a",jn,[s("https://github.com/bitnami/containers/archive/main.tar.gz"),e(a)])]),Rn,n("p",null,[s("浏览器访问："),n("a",An,[s("http://192.168.56.108"),e(a)]),s("，默认用户名/密码："),Mn]),Tn,n("ul",null,[n("li",null,[n("a",Pn,[s("适用于 x64 计算机的 WSL2 Linux 内核更新包"),e(a)])])]),Ln,n("p",null,[s("下载 "),n("a",En,[s("Docker Desktop for Windows"),e(a)]),s(" 进行安装。出现以下界面，安装成功。")]),Yn,n("ul",null,[n("li",null,[n("a",Wn,[s("https://docs.docker.com/desktop/windows/wsl/"),e(a)])]),n("li",null,[n("a",Nn,[s("https://docs.microsoft.com/zh-cn/windows/wsl/install-manual"),e(a)])]),n("li",null,[n("a",Qn,[s("https://docs.docker.com/desktop/troubleshoot/topics/"),e(a)])]),n("li",null,[n("a",In,[s("https://forums.virtualbox.org/viewtopic.php?f=6&t=105951"),e(a)])]),n("li",null,[n("a",zn,[s("https://docs.docker.com/desktop/faqs/windowsfaqs/"),e(a)])])]),Cn,n("p",null,[s("打开浏览器访问："),n("a",Bn,[s("https://宿主机IP:9443/"),e(a)])]),Un,n("ul",null,[n("li",null,[n("a",Fn,[s("https://www.yuque.com/wukong-zorrm/xwas40"),e(a)])])])])}const Vn=o(j,[["render",Hn],["__file","docker-use-guide.html.vue"]]);export{Vn as default};
