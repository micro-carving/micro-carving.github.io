import{_ as p,W as o,X as c,Y as s,Z as n,$ as e,a1 as t,C as l}from"./framework-158a71b3.js";const i="/assets/internationalization-project-infra-ff6a04b9.png",u="/assets/locale-resolve-31876a16.png",r="/assets/add-resource-bundle-file-7be565ae.png",k="/assets/internationalization-test-582947de.png",d={},m=t(`<h2 id="国际化-internationalization" tabindex="-1"><a class="header-anchor" href="#国际化-internationalization" aria-hidden="true">#</a> 国际化（Internationalization）</h2><p>Spring Boot 支持本地化消息，以便你的应用程序能够迎合不同语言偏好的用户。默认情况下，Spring Boot 会在类路径的根位置查找 <code>messages</code> 资源包。</p><p><strong>注意</strong>：</p><p>当配置的资源捆绑包的默认属性文件可用时（缺省情况下为 <code>messages.properties</code> ），就会应用自动配置。如果你的资源包仅包含特定于语言的属性文件，则需要添加默认的。如果找不到与任何已配置基本名称匹配的属性文件，则不会有自动配置的 <code>MessageSource</code>。</p><p>可以使用 <code>spring.messages</code> 命名空间配置资源包的基本名称以及其他几个属性，如下例所示：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token value attr-value">messages,config.i18n.messages</span>
<span class="token key attr-name">spring.messages.fallback-to-system-locale</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;messages,config.i18n.messages&quot;</span>
    <span class="token key atrule">fallback-to-system-locale</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p><code>spring.messages.basename</code> 支持逗号分隔的位置列表，可以是包限定符，也可以是从类路径根解析的资源。</p>`,11),v={href:"https://github.com/spring-projects/spring-boot/tree/v2.7.8/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h3><h4 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h4><figure><img src="`+i+'" alt="国际化之项目结构" tabindex="0" loading="lazy"><figcaption>国际化之项目结构</figcaption></figure><h4 id="配置步骤" tabindex="-1"><a class="header-anchor" href="#配置步骤" aria-hidden="true">#</a> 配置步骤</h4><h5 id="_1-配置解析器" tabindex="-1"><a class="header-anchor" href="#_1-配置解析器" aria-hidden="true">#</a> 1.配置解析器</h5><p>我们首先要来初始化 <code>LocaleResolver</code> 接口，该类 SpringBoot 提供了默认实现，如下图所示：</p><figure><img src="'+u+`" alt="LocaleResolve实现类层次结构" tabindex="0" loading="lazy"><figcaption>LocaleResolve实现类层次结构</figcaption></figure><p>这里我选择 <code>SessionLocaleResolver</code> 实现类作为 bean 对象注册到容器中，主要是设置默认的本地化语言为 <code>Locale.CHINA</code> （中文），代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">LocaleResolver</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>i18n<span class="token punctuation">.</span></span><span class="token class-name">SessionLocaleResolver</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocaleConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 设置会话的本地化语言默认为中文
     *
     * <span class="token keyword">@return</span> LocaleResolver
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">LocaleResolver</span> <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SessionLocaleResolver</span> sessionLocaleResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SessionLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sessionLocaleResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sessionLocaleResolver<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-配置拦截器" tabindex="-1"><a class="header-anchor" href="#_2-配置拦截器" aria-hidden="true">#</a> 2.配置拦截器</h5><p>配置拦截器的目的主要是用于拦截请求（URL）的请求参数是否携带 “lang” 请求参数，根据请求参数的值来判断读取到具体的国际化语言值。比如：URL 为 <code>http://localhost:8080/i18n/osm?lang=en_US</code> ，此时读取的 <code>lang</code> 值为 “en_US”，收到请求会自动读取 <code>messages_en_US.properties</code> 配置文件中的属性值，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>i18n<span class="token punctuation">.</span></span><span class="token class-name">LocaleChangeInterceptor</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * 默认拦截器，其中 lang 表示切换语言的参数名
     *
     * 比如当请求的 url 为：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://ip:port/?lang=zh_CN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>https://ip:port/?lang=zh_CN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>，表示读取国际化文件 messages_zh_CN.properties。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span> 拦截器注册
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">LocaleChangeInterceptor</span> localeChangeInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocaleChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localeChangeInterceptor<span class="token punctuation">.</span><span class="token function">setParamName</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>localeChangeInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-添加国际化文件" tabindex="-1"><a class="header-anchor" href="#_3-添加国际化文件" aria-hidden="true">#</a> 3.添加国际化文件</h5><p>首先新增 <code>i18n</code> 目录，用于统一管理国际化相关的文件目录；然后新增 <code>Resource Bundle</code> 文件，名称定义格式为：“<strong>messages_xxx.properties</strong>”，分别新建 <code>messages.properties</code>（必须有，可以为空）、<code>messages_zh_CN.properties</code>（可选，中文）、<code>messages_zh_TW.properties</code> （可选，中文繁体）、<code>messages_en_US.properties</code>（可选，英文）文件；最后补充好对应的内容信息即可，如下所示：</p><figure><img src="`+r+`" alt="新增ResourceBundle文件" tabindex="0" loading="lazy"><figcaption>新增ResourceBundle文件</figcaption></figure><p><strong>messages.properties</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">operation.success</span><span class="token punctuation">=</span><span class="token value attr-value">success!</span>
<span class="token key attr-name">start.ge.end</span><span class="token punctuation">=</span><span class="token value attr-value">The start date {0} must be earlier than the end date {1}!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>messages_zh_CN.properties</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">operation.success</span><span class="token punctuation">=</span><span class="token value attr-value">操作成功!</span>
<span class="token key attr-name">start.ge.end</span><span class="token punctuation">=</span><span class="token value attr-value">开始日期{0}必须小于结束日期{1}!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>messages_zh_TW.properties</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">operation.success</span><span class="token punctuation">=</span><span class="token value attr-value">操縱成功!</span>
<span class="token key attr-name">start.ge.end</span><span class="token punctuation">=</span><span class="token value attr-value">開始日期 {0} 必須小於結束日期 {1}!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>messages_en_US.properties</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">operation.success</span><span class="token punctuation">=</span><span class="token value attr-value">The operation is successful!</span>
<span class="token key attr-name">start.ge.end</span><span class="token punctuation">=</span><span class="token value attr-value">The start date {0} must be earlier than the end date {1}!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,25),b={href:"https://blog.csdn.net/shenenhua/article/details/79150053",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>在 application.yml 配置文件中新增国际化文件扫描配置规则，如下例所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;i18n/messages&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>前面是没有斜杠的，<code>i18n</code> 表示在此目录，为相对路径。而文件名为 <code>messages</code>，也不需要添加 <code>properties</code> 后缀。</p><h5 id="_4-添加工具类" tabindex="-1"><a class="header-anchor" href="#_4-添加工具类" aria-hidden="true">#</a> 4.添加工具类</h5><p>添加工具类方便在任何地方都能读取国际化文件内容，这里提供了两种不同的方法来获取，一种是获取固定的信息；一种是获取动态的信息，如下例所示：</p><p>同时这里提供了2种方式来读取消息文件，如下所示：</p><ol><li>普通方式（主要是借助 <code>ReloadableResourceBundleMessageSource</code> 来读取消息文件）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>i18n<span class="token punctuation">.</span></span><span class="token class-name">LocaleContextHolder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ReloadableResourceBundleMessageSource</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">I18nUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">I18nUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取单个翻译值，固定参数格式
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 例如：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">*     <span class="token line"><span class="token code language-java">operation<span class="token punctuation">.</span>success<span class="token operator">=</span>操作成功<span class="token operator">!</span></span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> msg <span class="token operator">=</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;operation.success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">translateMsg</span> 翻译的信息
     * <span class="token keyword">@return</span> 翻译之后的字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> translateMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReloadableResourceBundleMessageSource</span> messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReloadableResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setCacheSeconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置文件基础扫描路径名称</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span><span class="token string">&quot;i18n/messages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message <span class="token operator">=</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>translateMsg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[I18nUtil#get] - parse message error! &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取单个翻译值，动态参数格式
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 例如：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">*     <span class="token line"><span class="token code language-java">start<span class="token punctuation">.</span>ge<span class="token punctuation">.</span>end <span class="token operator">=</span> 开始日期<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>必须小于结束日期<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>！</span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>startDate<span class="token punctuation">,</span> endDate<span class="token punctuation">}</span><span class="token punctuation">;</span></span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> msg <span class="token operator">=</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;start.ge.end&quot;</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">translateMsg</span> 翻译的信息，可能携带参数
     * <span class="token keyword">@param</span> <span class="token parameter">params</span>       填充的参数数组
     * <span class="token keyword">@return</span> 翻译之后的字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> translateMsg<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReloadableResourceBundleMessageSource</span> messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReloadableResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setCacheSeconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置文件基础扫描路径名称</span>
        messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span><span class="token string">&quot;i18n/messages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message <span class="token operator">=</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>translateMsg<span class="token punctuation">,</span> params<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[I18nUtil#get] - parse message error! &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong>：</p><p>此方式<strong>不需要</strong>在 <code>application.yml</code> 中设置 <code>spring.messages.basename</code> 属性值，已经在代码中固定了该属性值，具体参考代码。</p><ol start="2"><li>spring 容器工具类（需要注入 <code>MessageSource</code> 接口来读取消息文件）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">MessageSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>i18n<span class="token punctuation">.</span></span><span class="token class-name">LocaleContextHolder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">I18nBootUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">I18nBootUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">;</span>

    <span class="token comment">// 注入 MessageSource 属性，方便上下文获取</span>
    <span class="token keyword">private</span> <span class="token class-name">I18nBootUtil</span><span class="token punctuation">(</span><span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">I18nBootUtil</span><span class="token punctuation">.</span>messageSource <span class="token operator">=</span> messageSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取单个翻译值，固定参数格式
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 例如：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">*     <span class="token line"><span class="token code language-java">operation<span class="token punctuation">.</span>success<span class="token operator">=</span>操作成功<span class="token operator">!</span></span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> msg <span class="token operator">=</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;operation.success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">translateMsg</span> 翻译的信息
     * <span class="token keyword">@return</span> 翻译之后的字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> translateMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message <span class="token operator">=</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>translateMsg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[I18nBootUtil#get] - parse message error! &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取单个翻译值，动态参数格式
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 例如：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">*     <span class="token line"><span class="token code language-java">start<span class="token punctuation">.</span>ge<span class="token punctuation">.</span>end <span class="token operator">=</span> 开始日期<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>必须小于结束日期<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>！</span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>startDate<span class="token punctuation">,</span> endDate<span class="token punctuation">}</span><span class="token punctuation">;</span></span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token class-name">String</span> msg <span class="token operator">=</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;start.ge.end&quot;</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">translateMsg</span> 翻译的信息，可能携带参数
     * <span class="token keyword">@param</span> <span class="token parameter">params</span>       填充的参数数组
     * <span class="token keyword">@return</span> 翻译之后的字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> translateMsg<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message <span class="token operator">=</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>translateMsg<span class="token punctuation">,</span> params<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[I18nBootUtil#get] - parse message error! &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong>：</p><p>此方式<strong>必须需要</strong>在 <code>application.yml</code> 中设置 <code>spring.messages.basename</code> 属性值，不指定值代码会提示解析异常，具体参考代码。</p><h5 id="_5-添加控制器" tabindex="-1"><a class="header-anchor" href="#_5-添加控制器" aria-hidden="true">#</a> 5.添加控制器</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/i18n&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">I18nController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/osm&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOperationSuccessMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// return I18nUtil.get(&quot;operation.success&quot;);</span>
        <span class="token keyword">return</span> <span class="token class-name">I18nBootUtil</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;operation.success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/sgm&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStartGeEndMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;20230224&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;20230228&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// return I18nUtil.get(&quot;start.ge.end&quot;, param);</span>
        <span class="token keyword">return</span> <span class="token class-name">I18nBootUtil</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;start.ge.end&quot;</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-测试" tabindex="-1"><a class="header-anchor" href="#_6-测试" aria-hidden="true">#</a> 6.测试</h5>`,18),y={href:"http://127.0.0.1:8080/i18n/osm?lang=zh_TW",target:"_blank",rel:"noopener noreferrer"},f={href:"http://127.0.0.1:8080/i18n/sgm",target:"_blank",rel:"noopener noreferrer"},w=s("figure",null,[s("img",{src:k,alt:"国际化测试",tabindex:"0",loading:"lazy"}),s("figcaption",null,"国际化测试")],-1);function _(S,q){const a=l("ExternalLinkIcon");return o(),c("div",null,[m,s("p",null,[n("有关更多支持的选项，请参阅 "),s("a",v,[n("MessageSourceProperties"),e(a)]),n(" 。")]),g,s("p",null,[n("更多的语言代码与国家地区对照表，可以参考 "),s("a",b,[n("https://blog.csdn.net/shenenhua/article/details/79150053"),e(a)]),n(" 链接")]),h,s("p",null,[n("完成上述之后，启动项目，在浏览器输入 "),s("a",y,[n("http://127.0.0.1:8080/i18n/osm?lang=zh_TW"),e(a)]),n(" 或者 "),s("a",f,[n("http://127.0.0.1:8080/i18n/sgm"),e(a)]),n(" ，出现如下图所示，表示国际化配置成功！")]),w])}const L=p(d,[["render",_],["__file","internationalization.html.vue"]]);export{L as default};
