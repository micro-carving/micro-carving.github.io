import{_ as t,W as o,X as d,Y as n,Z as e,$ as a,a0 as l,a1 as i,C as s}from"./framework-158a71b3.js";const p="/assets/jenkins-docker-dir-load-c22c403b.png",k="/assets/jenkins-docker-validate-37617483.png",u="/assets/jenkins-docker-initial-admin-pwd-41c79a0b.png",m="/assets/jenkins-docker-startup-logs-30392b8d.png",v="/assets/jenkins-docker-customized-plugin-d66beea9.png",b="/assets/jenkins-docker-plugin-installing-69220711.png",g="/assets/jenkins-docker-create-root-4fc10af7.png",h="/assets/jenkins-docker-instance-cfg-61b080b2.png",f="/assets/jenkins-docker-login-success-801ab700.png",j="/assets/jenkins-docker-output-jdk-57e0258a.png",_="/assets/jenkins-docker-cfg-jdk-step-1-95cb40fc.png",x="/assets/jenkins-docker-cfg-jdk-step-2-288c40cd.png",J="/assets/jenkins-docker-cfg-git-7712752c.png",y="/assets/jenkins-docker-cfg-maven-step-1-9ac63574.png",w="/assets/jenkins-docker-plugins-9f014718.png",z="/assets/jenkins-docker-maven-plugin-f35807ee.png",D={},K=i(`<h2 id="dockerdesktop-版本-win10" tabindex="-1"><a class="header-anchor" href="#dockerdesktop-版本-win10" aria-hidden="true">#</a> DockerDesktop 版本（win10）</h2><h3 id="下载-jenkins" tabindex="-1"><a class="header-anchor" href="#下载-jenkins" aria-hidden="true">#</a> 下载 Jenkins</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜索镜像</span>
<span class="token function">docker</span> search jenkins

<span class="token comment"># 拉取长期支持版本镜像</span>
<span class="token function">docker</span> pull jenkins/jenkins:lts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h3><h4 id="创建挂载目录" tabindex="-1"><a class="header-anchor" href="#创建挂载目录" aria-hidden="true">#</a> 创建挂载目录</h4><figure><img src="`+p+`" alt="创建挂载目录" tabindex="0" loading="lazy"><figcaption>创建挂载目录</figcaption></figure><ul><li>jenkins：jenkins 挂载根目录</li></ul><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建 docker 网络</span>
<span class="token function">docker</span> network create jenkins

<span class="token comment">## 启动容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">--network</span> jenkins <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">8099</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50099</span>:50000 <span class="token parameter variable">-v</span> D:/DockerDesktop/docker-container-workspace/jenkins:/var/jenkins_home <span class="token parameter variable">-d</span> jenkins/jenkins:lts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>说明</p><p><code>--name jenkins</code>：容器名称为 jenkins <br><code>--network jenkins</code>：连接容器网络 <br><code>--restart=always</code>：自启动 <br><code>-p 8099:8080</code>：将容器的服务端口映射到宿主机端口（宿主机端口:容器端口），页面访问端口 <br><code>-p 50099:50000</code>：将容器的服务端口映射到宿主机端口（宿主机端口:容器端口），客户端访问端口 <br><code>-v xxx/jenkins:/var/jenkins_home</code>：容器挂载目录，容器自动映射到本地目录 <br><code>-d jenkins/jenkins:lts</code>：指定长期版本的镜像以容器方式在后台启动 <br></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查看启动容器进程</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment">## 或者查看 jenkins 容器启动日志</span>
<span class="token function">docker</span> logs jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="登录初始化-jenkins" tabindex="-1"><a class="header-anchor" href="#登录初始化-jenkins" aria-hidden="true">#</a> 登录初始化 Jenkins</h3><h4 id="初始化密码" tabindex="-1"><a class="header-anchor" href="#初始化密码" aria-hidden="true">#</a> 初始化密码</h4><p>在浏览器访问 <code>http://jenkins 所在主机 ip:8099</code>，需要等待些时间，出现如下页面表示启动成功！</p><figure><img src="`+k+'" alt="jenkins 登录访问" tabindex="0" loading="lazy"><figcaption>jenkins 登录访问</figcaption></figure><p>此时查看密码有两种方式：</p><ul><li><strong>查看自己创建的宿主机映射文件目录</strong></li></ul><p>比如我这里是 <code>xxx/secrets</code> 目录下的 <code>initialAdminPassword</code> 文件，里面存放初始化密码。</p><figure><img src="'+u+`" alt="jenkins 初始化管理员密码" tabindex="0" loading="lazy"><figcaption>jenkins 初始化管理员密码</figcaption></figure><ul><li><strong>查看 jenkins 容器启动日志</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查看 jenkins 启动日志</span>
<span class="token function">docker</span> logs jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="jenkins 容器启动日志" tabindex="0" loading="lazy"><figcaption>jenkins 容器启动日志</figcaption></figure><h4 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h4><p>输入密码后，出现如下页面，推荐选择第一种，选择后等待插件安装。</p><figure><img src="'+v+'" alt="自定义插件" tabindex="0" loading="lazy"><figcaption>自定义插件</figcaption></figure><p>等待安装插件，如下所示：</p><figure><img src="'+b+'" alt="自定义插件安装中" tabindex="0" loading="lazy"><figcaption>自定义插件安装中</figcaption></figure><h4 id="创建管理员用户" tabindex="-1"><a class="header-anchor" href="#创建管理员用户" aria-hidden="true">#</a> 创建管理员用户</h4><p>为了方便本地开发使用以及记忆，我这里使用 <code>root/root</code> ，生产请使用复杂账号和密码。</p><figure><img src="'+g+'" alt="创建管理员用户" tabindex="0" loading="lazy"><figcaption>创建管理员用户</figcaption></figure><blockquote><p><strong>说明</strong></p><p>由于这里我选择了【使用admin账号继续】，并未将设置的 root 账密进行保存，如果想用 root 账密作为管理员登录，选择【保存并完成】。</p></blockquote><h4 id="实例配置" tabindex="-1"><a class="header-anchor" href="#实例配置" aria-hidden="true">#</a> 实例配置</h4><p>实例配置采用默认配置，生产环境根据情况而定！</p><figure><img src="'+h+'" alt="实例配置" tabindex="0" loading="lazy"><figcaption>实例配置</figcaption></figure><h4 id="登录成功" tabindex="-1"><a class="header-anchor" href="#登录成功" aria-hidden="true">#</a> 登录成功</h4><figure><img src="'+f+`" alt="登录成功" tabindex="0" loading="lazy"><figcaption>登录成功</figcaption></figure><h3 id="配置-jenkins" tabindex="-1"><a class="header-anchor" href="#配置-jenkins" aria-hidden="true">#</a> 配置 Jenkins</h3><h4 id="配置-jdk" tabindex="-1"><a class="header-anchor" href="#配置-jdk" aria-hidden="true">#</a> 配置 JDK</h4><p>使用容器方式安装的 Jenkins，容器内已经默认安装好 JDK 了，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> jenkins /bin/bash

<span class="token comment">## 查看 Java 版本</span>
<span class="token function">java</span> <span class="token parameter variable">-version</span>

<span class="token comment">## 输出 Java 目录</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$JAVA_HOME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+j+'" alt="Jenkins 内置的 JDK" tabindex="0" loading="lazy"><figcaption>Jenkins 内置的 JDK</figcaption></figure><p>将 JDK 安装的路径配置到 Jenkins 全局配置中，如下所示：</p><figure><img src="'+_+'" alt="JDK 配置步骤 1" tabindex="0" loading="lazy"><figcaption>JDK 配置步骤 1</figcaption></figure><p>将上述查看的 jdk 路径添加进去，如下所示：</p><figure><img src="'+x+'" alt="JDK 配置步骤 2" tabindex="0" loading="lazy"><figcaption>JDK 配置步骤 2</figcaption></figure><blockquote><p><strong>说明</strong></p><p>如果你只需要安装 JDK，点击保存即可！</p></blockquote><h4 id="配置-git" tabindex="-1"><a class="header-anchor" href="#配置-git" aria-hidden="true">#</a> 配置 Git</h4><figure><img src="'+J+'" alt="Git 配置" tabindex="0" loading="lazy"><figcaption>Git 配置</figcaption></figure><h4 id="配置-maven" tabindex="-1"><a class="header-anchor" href="#配置-maven" aria-hidden="true">#</a> 配置 Maven</h4><p>为了和开发环境使用的 maven 版本匹配，这里安装 <code>Maven 3.6.3</code> 版本，如下所示：</p><figure><img src="'+y+'" alt="Maven 配置步骤 1" tabindex="0" loading="lazy"><figcaption>Maven 配置步骤 1</figcaption></figure><h4 id="安装-maven-插件" tabindex="-1"><a class="header-anchor" href="#安装-maven-插件" aria-hidden="true">#</a> 安装 Maven 插件</h4><p>点击插件，如下所示：</p><figure><img src="'+w+'" alt="手动安装插件" tabindex="0" loading="lazy"><figcaption>手动安装插件</figcaption></figure><figure><img src="'+z+'" alt="安装 maven 插件" tabindex="0" loading="lazy"><figcaption>安装 maven 插件</figcaption></figure><blockquote><p><strong>说明</strong></p><p>安装完插件之后进行重启，等待重启之后，输入 <code>admin/初始化密码</code> 进行登录。</p></blockquote>',56),q=i(`<h2 id="docker-命令行版本-centos-7" tabindex="-1"><a class="header-anchor" href="#docker-命令行版本-centos-7" aria-hidden="true">#</a> Docker 命令行版本（CentOS 7）</h2><p>由于和 win10 下面的 docker 命令差不多，这里不再过多赘述，只贴出命令汇总，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜索镜像</span>
<span class="token function">docker</span> search jenkins

<span class="token comment"># 拉取长期支持版本镜像</span>
<span class="token function">docker</span> pull jenkins/jenkins:lts

<span class="token comment">## 创建文件目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/你的用户名/docker/jenkins

<span class="token comment">## 赋予文件权限，防止容器启动失败</span>
<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /home/你的用户名/docker/jenkins/

<span class="token comment">## 创建 docker 网络</span>
<span class="token function">docker</span> network create jenkins

<span class="token comment">## 启动容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">--network</span> jenkins <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8099</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50099</span>:50000 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /home/你的用户名/docker/jenkins:/var/jenkins_home <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> jenkins/jenkins:lts

<span class="token comment">## 查看启动容器进程</span>
<span class="token function">docker</span> <span class="token function">ps</span>

<span class="token comment">## 或者查看 jenkins 容器启动日志</span>
<span class="token function">docker</span> logs jenkins

<span class="token comment">## 进入容器内部</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> jenkins /bin/bash

<span class="token comment">## 停止容器</span>
<span class="token function">docker</span> stop jenkins

<span class="token comment">## 删除网络配置和容器</span>
<span class="token function">docker</span> network <span class="token function">rm</span> jenkins
<span class="token function">docker</span> <span class="token function">rm</span> jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,4),M={href:"https://developer.aliyun.com/article/892646#slide-1",target:"_blank",rel:"noopener noreferrer"};function E(V,B){const c=s("RouterLink"),r=s("ExternalLinkIcon");return o(),d("div",null,[K,n("p",null,[e("自此 Jenkins 的安装已到此结束，关于 Jenkins 的详细使用请参考 "),a(c,{to:"/guide/develop/deploy-operation/jenkins-use-guide.html"},{default:l(()=>[e("Jenkins 使用指南")]),_:1})]),q,n("ul",null,[n("li",null,[n("a",M,[e("使用 Docker 安装 Jenkins 并实现项目自动化部署"),a(r)])])])])}const G=t(D,[["render",E],["__file","jenkins-env-build-guide.html.vue"]]);export{G as default};
