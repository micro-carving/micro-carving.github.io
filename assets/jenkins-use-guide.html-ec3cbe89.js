import{_ as t,W as s,X as r,Y as n,Z as i,$ as l,a1 as e,C as o}from"./framework-158a71b3.js";const c="/assets/jenkins-ci-flow-ca1e4775.png",d="/assets/jenkins-ci-compose-b13138be.png",p="/assets/jenkins-ci-offical-page-7bceda5c.png",h="/assets/jenkins-ci-flow-desc-928fa58e.png",g={},u=e('<h2 id="_1、持续集成及-jenkins-介绍" tabindex="-1"><a class="header-anchor" href="#_1、持续集成及-jenkins-介绍" aria-hidden="true">#</a> 1、持续集成及 Jenkins 介绍</h2><h3 id="什么是持续集成" tabindex="-1"><a class="header-anchor" href="#什么是持续集成" aria-hidden="true">#</a> 什么是持续集成</h3><p>持续集成（Continuous integration ， 简称 CI）指的是，频繁地（一天多次）将代码集成到主干。</p><p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量</strong>。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>通过持续集成，团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p><p><strong>持续集成的流程</strong></p><figure><img src="'+c+'" alt="持续集成流程" tabindex="0" loading="lazy"><figcaption>持续集成流程</figcaption></figure><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><ul><li><strong>提交</strong></li></ul><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p><ul><li><strong>测试（第一轮）</strong></li></ul><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><ul><li><strong>构建</strong></li></ul><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><ul><li><strong>测试（第二轮）</strong></li></ul><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><ul><li><strong>部署</strong></li></ul><p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar filename.tar *）存档，发到生产服务器。</p><ul><li><strong>回滚</strong></li></ul><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p><h3 id="持续集成的组成要素" tabindex="-1"><a class="header-anchor" href="#持续集成的组成要素" aria-hidden="true">#</a> 持续集成的组成要素</h3><ul><li>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。</li><li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用 SVN 或 Git。</li><li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li></ul><figure><img src="'+d+'" alt="持续集成的组成要素" tabindex="0" loading="lazy"><figcaption>持续集成的组成要素</figcaption></figure><h3 id="持续集成的好处" tabindex="-1"><a class="header-anchor" href="#持续集成的好处" aria-hidden="true">#</a> 持续集成的好处</h3><ol><li>降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</li><li>对系统健康持续检查，减少发布风险带来的问题；</li><li>减少重复性工作；</li><li>持续部署，提供可部署单元包；</li><li>持续交付可供使用的版本；</li><li>增强团队信心；</li></ol><h3 id="jenkins-介绍" tabindex="-1"><a class="header-anchor" href="#jenkins-介绍" aria-hidden="true">#</a> Jenkins 介绍</h3><figure><img src="'+p+'" alt="Jenkins" tabindex="0" loading="lazy"><figcaption>Jenkins</figcaption></figure>',28),f={href:"https://www.jenkins.io/",target:"_blank",rel:"noopener noreferrer"},k=e('<p>Jenkins 的特征：</p><ul><li>开源的 Java 语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过 yum 安装,或下载 war 包以及通过 docker 容器等快速实现安装部署，可</li><li>方便 web 界面配置管理。</li><li>消息通知及测试报告：集成 RSS/E-mail 通过 RSS 发布构建结果或当构建完成时通过 e-mail 通知，生成 JUnit/TestNG 测试报告。</li><li>分布式构建：支持 Jenkins 能够让多台计算机一起构建/测试。</li><li>文件识别：Jenkins 能够跟踪哪次构建生成哪些 jar，哪次构建使用哪个版本的 jar 等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如 git，svn，maven，docker等。</li></ul><h2 id="_2、jenkins-安装和持续集成环境配置" tabindex="-1"><a class="header-anchor" href="#_2、jenkins-安装和持续集成环境配置" aria-hidden="true">#</a> 2、Jenkins 安装和持续集成环境配置</h2><h3 id="持续集成流程说明" tabindex="-1"><a class="header-anchor" href="#持续集成流程说明" aria-hidden="true">#</a> 持续集成流程说明</h3><figure><img src="'+h+'" alt="持续集成流程说明" tabindex="0" loading="lazy"><figcaption>持续集成流程说明</figcaption></figure><p>1）首先，开发人员每天进行代码提交，提交到 Git 仓库。<br> 2）然后，Jenkins 作为持续集成工具，使用 Git 工具到 Git 仓库拉取代码到集成服务器，再配合 JDK，Maven 等软件完成代码编译，代码测试与审查，测试，打包等工作，在这个过程中每一步出错，都重新再执行一次整个流程。<br> 3）最后，Jenkins 把生成的 jar 或 war 包分发到测试服务器或者生产服务器，测试人员或用户就可以访问应用。<br></p>',6);function _(m,b){const a=o("ExternalLinkIcon");return s(),r("div",null,[u,n("p",null,[i("Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网： "),n("a",f,[i("https://www.jenkins.io/"),l(a)]),i("。")]),k])}const x=t(g,[["render",_],["__file","jenkins-use-guide.html.vue"]]);export{x as default};
