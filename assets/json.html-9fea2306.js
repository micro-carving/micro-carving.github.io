import{_ as o,W as p,X as c,Y as n,Z as s,$ as e,a0 as t,C as l}from"./framework-eca38234.js";const i={},u=t('<h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><p>Spring Boot 提供了与三个 JSON 映射库的集成：</p><ul><li>Gson</li><li>Jackson</li><li>JSON-B</li></ul><p>Jackson 是首选和默认库。</p><h3 id="_1-jackson" tabindex="-1"><a class="header-anchor" href="#_1-jackson" aria-hidden="true">#</a> 1.Jackson</h3><p>提供了 Jackson 的自动配置，Jackson 是 <code>spring-boot-start-json</code> 的一部分。当 Jackson 位于类路径上时，将自动配置一个 <code>ObjectMapper</code> bean。为定制 <code>ObjectMapper</code> 的配置提供了几个配置属性。</p><h4 id="自定义序列化器和反序列化器" tabindex="-1"><a class="header-anchor" href="#自定义序列化器和反序列化器" aria-hidden="true">#</a> 自定义序列化器和反序列化器</h4>',7),r=n("code",null,"JsonSerializer",-1),k=n("code",null,"JsonDeserializer",-1),d={href:"https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"@JsonComponent",-1),v=t(`<p>可以直接在 <code>JsonSerializer</code>、<code>JsonDeserializer</code> 或 <code>KeyDeserializer</code> 实现上使用 <code>@JsonComponent</code> 注解。你还可以在包含序列化程序/反序列化程序作为内部类的类上使用它，如下例所示：</p><p><strong>MyJsonComponent.java</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JacksonException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonGenerator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonParser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ObjectCodec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token class-name">JsonComponent</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@JsonComponent</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJsonComponent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 序列化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Serializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">MyObject</span> myObject<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> jsonGenerator<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
            jsonGenerator<span class="token punctuation">.</span><span class="token function">writeStartObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonGenerator<span class="token punctuation">.</span><span class="token function">writeStringField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> myObject<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonGenerator<span class="token punctuation">.</span><span class="token function">writeNumberField</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> myObject<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jsonGenerator<span class="token punctuation">.</span><span class="token function">writeEndObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 反序列化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Deserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">MyObject</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> jsonParser<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> deserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">JacksonException</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">ObjectCodec</span> codec <span class="token operator">=</span> jsonParser<span class="token punctuation">.</span><span class="token function">getCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">JsonNode</span> treeNode <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>jsonParser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> name <span class="token operator">=</span> treeNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">textValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> age <span class="token operator">=</span> treeNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MyObject.java</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getter, setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ApplicationContext</code> 中的所有 <code>@JsonComponent</code> bean 都会自动向 Jackson 注册。因为 <code>@JsonComponent</code> 是用 <code>@Component</code> 元注解的，所以通常的组件扫描规则适用。</p>`,6),b={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/jackson/JsonObjectSerializer.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"JsonObjectSerializer",-1),y={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/jackson/JsonObjectDeserializer.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"JsonObjectDeserializer",-1),h={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/jackson/JsonObjectSerializer.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"JsonObjectSerializer",-1),f={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/jackson/JsonObjectDeserializer.html",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"JsonObjectDeserializer",-1),_=t(`<p>上面的例子可以使用 <code>JsonObjectSerializer</code>/<code>JsonObjectDeserializer</code> 重写，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonGenerator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonParser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ObjectCodec</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">DeserializationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">JsonNode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">SerializerProvider</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token class-name">JsonComponent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token class-name">JsonObjectDeserializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span></span><span class="token class-name">JsonObjectSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@JsonComponent</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJSONObjectComponent</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 序列化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Serializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonObjectSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">serializeObject</span><span class="token punctuation">(</span><span class="token class-name">MyObject</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> jgen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> provider<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
            jgen<span class="token punctuation">.</span><span class="token function">writeStringField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jgen<span class="token punctuation">.</span><span class="token function">writeNumberField</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 反序列化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Deserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonObjectDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyObject</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">MyObject</span> <span class="token function">deserializeObject</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> jsonParser<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ObjectCodec</span> codec<span class="token punctuation">,</span> <span class="token class-name">JsonNode</span> tree<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">nullSafeValue</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token function">nullSafeValue</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="混合" tabindex="-1"><a class="header-anchor" href="#混合" aria-hidden="true">#</a> 混合</h4><p>Jackson 支持 mixin，它可以用来将额外的注解混合到目标类中已经声明的注解中。Spring Boot 的 Jackson 自动配置将扫描应用程序包中带有 <code>@JsonMixin</code> 注解的类，并将它们注册到自动配置的 <code>ObjectMapper</code> 中。注册是由 Spring Boot 的 <code>JsonMixinModule</code> 执行的。</p><h4 id="常用配置和常用注解" tabindex="-1"><a class="header-anchor" href="#常用配置和常用注解" aria-hidden="true">#</a> 常用配置和常用注解</h4><h5 id="常用配置" tabindex="-1"><a class="header-anchor" href="#常用配置" aria-hidden="true">#</a> 常用配置</h5><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 日期格式字符串或标准日期格式类全限定名，只控制 java.util.Date 的序列化 format</span>
<span class="token key attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM-dd HH:mm:ss</span>
<span class="token comment"># 指定 Joda date/time 的格式，比如 yyyy-MM-ddHH:mm:ss. 如果没有配置的话，dateformat 会作为 backup。</span>
<span class="token key attr-name">spring.jackson.joda-date-time-format</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM-dd HH:mm:ss</span>
<span class="token comment"># 全局设置 pojo 或被 @JsonInclude 注解的属性的序列化方式</span>
<span class="token key attr-name">spring.jackson.default-property-inclusion</span><span class="token punctuation">=</span><span class="token value attr-value">NON_NULL</span>
<span class="token comment"># 不为空的属性才会序列化,具体属性可看 JsonInclude.Include</span>
<span class="token comment"># 是否开启 Jackson 的序列化</span>
<span class="token comment"># 示例：spring.jackson.serialization.indent-output= true</span>
<span class="token key attr-name">spring.jackson.serialization.*</span><span class="token punctuation">=</span>
<span class="token comment"># 是否开启 Jackson 的反序列化</span>
<span class="token key attr-name">spring.jackson.deserialization.*</span><span class="token punctuation">=</span>
<span class="token comment"># 是否开启 json 的 generators</span>
<span class="token comment"># 示例：spring.jackson.generator.auto-close-json-content=true</span>
<span class="token key attr-name">spring.jackson.generator.*</span><span class="token punctuation">=</span>
<span class="token comment"># 指定 json 使用的 Locale</span>
<span class="token key attr-name">spring.jackson.locale</span><span class="token punctuation">=</span><span class="token value attr-value">zh</span>
<span class="token comment"># 是否开启Jackson通用的特性</span>
<span class="token key attr-name">spring.jackson.mapper.*</span><span class="token punctuation">=</span>
<span class="token comment"># 是否开启 jackson 的 parser 特性</span>
<span class="token key attr-name">spring.jackson.parser.*</span><span class="token punctuation">=</span>
<span class="token comment"># 指定 Json 策略模式</span>
<span class="token key attr-name">spring.jackson.property-naming-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">com.fasterxml.jackson.databind.PropertyNamingStrategy.UpperCamelCaseStrategy</span>
<span class="token comment"># 或</span>
<span class="token comment"># spring.jackson.property-naming-strategy=UPPER_CAMEL_CASE</span>
<span class="token comment"># 指定日期格式化时区，比如 Asia/Shanghai 或者 GMT+8</span>
<span class="token key attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span><span class="token value attr-value">GMT+8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h5><ul><li><code>@JsonPropertyOrder(value={“value1”,“value2”,“value3”})</code>：将实体对应转换后默认 json 顺序，根据注解要求进行变换</li><li><code>@JsonIgnore</code>：将某字段排除在序列化和反序列化之外</li><li><code>@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</code>：按照指定日期格式进行转换</li><li><code>@JsonProperty(&quot;邮箱&quot;)</code>：给对应字段起别名</li><li><code>@JsonInclude(JsonInclude.Include.NON_NULL)</code>：如果字段为空则不做序列化和反序列化</li></ul><h5 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h5><p>更多关于 Jackson 的使用，可以参考如下链接：</p>`,11),O={href:"https://github.com/FasterXML/jackson-docs",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.baeldung.com/jackson",target:"_blank",rel:"noopener noreferrer"},S=t('<h3 id="_2-gson" tabindex="-1"><a class="header-anchor" href="#_2-gson" aria-hidden="true">#</a> 2.Gson</h3><p>提供了 <code>GSON</code> 的自动配置。当 gson 在类路径上时，会自动配置一个 gson Bean。提供了几个 <code>spring.gson.*</code> 配置属性用于定制配置。要获得更多控制，可以使用一个或多个 <code>GsonBuilderCustomizer</code> Bean。</p><h3 id="_3-json-b" tabindex="-1"><a class="header-anchor" href="#_3-json-b" aria-hidden="true">#</a> 3.JSON-B</h3><p>提供了 JSON-B 的自动配置。当 JSON-B API 和实现在类路径上时，将自动配置 <code>Jsonb</code> bean。首选的 JSON-B 实现是 Apache Johnzon，它提供了依赖管理。</p>',4);function z(M,N){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("如果使用 Jackson 序列化和反序列化 JSON 数据，可能需要编写自己的 "),r,s(" 和 "),k,s(" 类。自定义序列化器通常"),n("a",d,[s("通过模块注册到 Jackson"),e(a)]),s("，但 Spring Boot 提供了另一种 "),m,s(" 注解，可以更容易地直接注册 Spring bean。")]),v,n("p",null,[s("Spring Boot 还提供了 "),n("a",b,[g,e(a)]),s(" 和 "),n("a",y,[j,e(a)]),s(" 基类，这些基类在序列化对象时为标准 Jackson 版本提供了有用的替代方案。有关详细信息，请参阅 Javadoc 中的 "),n("a",h,[w,e(a)]),s(" 和 "),n("a",f,[J,e(a)]),s(" 。")]),_,n("ul",null,[n("li",null,[n("a",O,[s("jackson-docs"),e(a)])]),n("li",null,[n("a",x,[s("Baeldung Jackson JSON Tutorial"),e(a)])])]),S])}const q=o(i,[["render",z],["__file","json.html.vue"]]);export{q as default};
