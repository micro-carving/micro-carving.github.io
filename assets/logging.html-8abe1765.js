import{_ as o,W as l,X as i,Y as n,Z as e,$ as t,a0 as s,C as r}from"./framework-eca38234.js";const c="/assets/debug-setting-9e5b9c2c.png",p="/assets/set-logging-output-path-d7fe77fd.png",d={},g=n("h2",{id:"日志-logging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#日志-logging","aria-hidden":"true"},"#"),e(" 日志（Logging）")],-1),u={href:"https://commons.apache.org/logging",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.oracle.com/javase/8/docs/api/java/util/logging/package-summary.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://logging.apache.org/log4j/2.x/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://logback.qos.ch/",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>默认情况下，如果使用 &quot;Starters&quot;，则使用 Logback 进行日志记录。还包括适当的 Logback 路由，以确保使用 Java Util Logging、Commons Logging、Log4J 或 SLF4J 的依赖库都能正常工作。</p><p><strong>TIP</strong>：</p><p>Java 有很多可用的日志框架。如果上面的列表看起来令人困惑，请不要担心。通常，你不需要更改日志依赖关系，Spring Boot 默认值工作正常。</p><p>当你将应用程序部署到 Servlet 容器或应用程序服务器时，使用 Java Util Logging API 执行的日志记录不会发送到应用程序的日志中。这将防止容器或已部署到容器的其他应用程序执行的日志记录出现在应用程序的日志中。</p><h3 id="_1-日志格式" tabindex="-1"><a class="header-anchor" href="#_1-日志格式" aria-hidden="true">#</a> 1.日志格式</h3><p>Spring Boot 的默认日志输出类似于以下示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-02-22 16:42:02.015  INFO 11512 --- [           main] c.o.s.core.logging.MyApplication         : Starting MyApplication using Java 11.0.9 on myhost with PID 11512
2023-02-22 16:42:02.017  INFO 11512 --- [           main] c.o.s.core.logging.MyApplication         : No active profile set, falling back to 1 default profile: &quot;default&quot;
2023-02-22 16:42:02.513  INFO 11512 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2023-02-22 16:42:02.514  INFO 11512 --- [           main] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.33] using APR version [1.7.0].
2023-02-22 16:42:02.514  INFO 11512 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2023-02-22 16:42:02.514  INFO 11512 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2023-02-22 16:42:02.516  INFO 11512 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1o  3 May 2022]
2023-02-22 16:42:02.522  INFO 11512 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-02-22 16:42:02.522  INFO 11512 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.71]
2023-02-22 16:42:02.573  INFO 11512 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-02-22 16:42:02.573  INFO 11512 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 522 ms
2023-02-22 16:42:02.766  INFO 11512 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
2023-02-22 16:42:02.773  INFO 11512 --- [           main] c.o.s.core.logging.MyApplication         : Started MyApplication in 0.992 seconds (JVM running for 1.786)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将输出以下项目：</p><ul><li>日期和时间：毫秒精度，易于排序；</li><li>日志级别：<code>ERROR</code>、<code>WARNING</code>、<code>INFO</code>、<code>DEBUG</code> 或 <code>TRACE</code>；</li><li>进程ID；</li><li><code>---</code> 分隔符，用于区分实际日志消息的开头；</li><li>线程名称：用方括号括起来（对于控制台输出，可以截断）；</li><li>日志记录器名称：这通常是源类名（通常缩写）；</li><li>日志信息。</li></ul><p><strong>注意</strong>：</p><p>Logback 没有 <code>FATAL</code> 级别。它被映射到 <code>ERROR</code>。</p><h3 id="_2-控制台输出" tabindex="-1"><a class="header-anchor" href="#_2-控制台输出" aria-hidden="true">#</a> 2.控制台输出</h3><p>默认日志配置在写入消息时将消息回显到控制台。默认情况下，记录 <code>ERROR</code> -级别、<code>WARN</code> -级别和 <code>INFO</code> -级别消息。你还可以通过使用 <code>--debug</code> 标志启动应用程序来启用“调试”模式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myapp.jar <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>你还可以在 <code>application.properties</code> 中指定 <code>debug=true</code>。如下图所示：</p><figure><img src="`+c+'" alt="debug设置" tabindex="0" loading="lazy"><figcaption>debug设置</figcaption></figure><p>当启用调试模式时，一些核心日志记录器（嵌入式容器、Hibernate 和 Spring Boot）被配置为输出更多信息。启用调试模式不会将应用程序配置为以 <code>DEBUG</code> 级别记录所有消息。</p><p>或者，你可以通过使用 <code>--trace</code> 标志启动应用程序来启用 “跟踪” 模式（或在 <code>application.properties</code> 中使用 <code>trace=true</code>）。这样可以为选择的核心日志记录器（嵌入式容器、Hibernate 模式生成以及整个 Spring 组合）启用跟踪日志记录。</p><h4 id="彩色编码输出" tabindex="-1"><a class="header-anchor" href="#彩色编码输出" aria-hidden="true">#</a> 彩色编码输出</h4>',20),k=n("code",null,"spring.output.ansi.enabled",-1),_={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/ansi/AnsiOutput.Enabled.html",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>通过使用 <code>%clr</code> 转换字配置颜色编码。在最简单的形式中，转换器根据日志级别为输出着色，如下例所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>%clr<span class="token punctuation">(</span>%5p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下表描述了日志级别到颜色的映射：</p><table><thead><tr><th>级别</th><th>颜色</th></tr></thead><tbody><tr><td>FATAL</td><td>红色</td></tr><tr><td>ERROR</td><td>红色</td></tr><tr><td>WARN</td><td>黄色</td></tr><tr><td>INFO</td><td>绿色</td></tr><tr><td>DEBUG</td><td>绿色</td></tr><tr><td>TRACE</td><td>绿色</td></tr></tbody></table><p>或者，可以通过将其作为转换选项来指定应使用的颜色或样式。例如，要使文本变为黄色，请使用以下设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>%clr<span class="token punctuation">(</span>%d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss.SSS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>yellow<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>支持以下颜色和样式：</p><ul><li>blue （蓝色的）</li><li>cyan （青色的）</li><li>faint （荧光的）</li><li>green （绿色的）</li><li>magenta （洋红色的）</li><li>red （红色的）</li><li>yellow （黄色的）</li></ul><h3 id="_3-文件输出" tabindex="-1"><a class="header-anchor" href="#_3-文件输出" aria-hidden="true">#</a> 3.文件输出</h3><p>默认情况下，Spring Boot 只记录到控制台，不写入日志文件。如果要在控制台输出之外写入日志文件，则需要设置 <code>logging.file.name</code> 或 <code>logging.files.path</code> 属性（例如，在 <code>application.properties</code> ）。</p><p>application.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 自动在项目根目录下生成 /logs/myapp.log 文件</span>
<span class="token key attr-name">logging.file.name</span><span class="token punctuation">=</span><span class="token value attr-value">./logs/myapp.log</span>
<span class="token comment"># 自动在项目根目录下生成 /logs/spring.log 文件，默认生成的日志文件名为 ”spring.log“，不能与 logging.file.name 同时生效，logging.file.name 优先级比 logging.file.path 高</span>
<span class="token key attr-name">logging.file.path</span><span class="token punctuation">=</span><span class="token value attr-value">./logs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下表显示了如何一起使用 <code>logging.*</code> 属性：</p><table><thead><tr><th><code>logging.file.name</code></th><th><code>logging.file.path</code></th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>仅控制台日志记录</td></tr><tr><td>特定文件</td><td>(none)</td><td><code>my.log</code></td><td>写入指定的日志文件。名称可以是确切的位置或相对于当前目录。</td></tr><tr><td>(none)</td><td>特定目录</td><td><code>/var/log</code></td><td>将 <code>spring.log</code> 写入指定目录。名称可以是确切的位置或相对于当前目录。</td></tr></tbody></table><p>日志结果如下图所示：</p><figure><img src="`+p+`" alt="配置日志输出文件" tabindex="0" loading="lazy"><figcaption>配置日志输出文件</figcaption></figure><p>日志文件在达到 10 MB 时会循环，并且与控制台输出一样，默认情况下会记录错误级别、警告级别和信息级别的消息。</p><p><strong>TIP</strong>：</p><p>日志记录属性独立于实际的日志记录基础结构。因此，特定的配置键（比如 Logback 的 <code>logback.configurationFile</code> ）不是由 Spring Boot 管理的。</p><h3 id="_4-文件轮换-循环" tabindex="-1"><a class="header-anchor" href="#_4-文件轮换-循环" aria-hidden="true">#</a> 4.文件轮换（循环）</h3><p>如果使用 Logback，则可以使用 <code>application.properties</code> 或 <code>application.yaml</code> 文件微调日志轮换设置。对于所有其他日志记录系统，你需要自己直接配置轮换设置（例如，如果使用 Log4J2，则可以添加 <code>log4j2.xml</code> 或 <code>log4j2-spring.xml</code> 文件）。</p><p>支持以下循环策略属性：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td>用于创建日志存档的文件名模式</td></tr><tr><td><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td>是否应在应用程序启动时进行日志归档清理</td></tr><tr><td><code>logging.logback.rollingpolicy.max-file-size</code></td><td>存档前日志文件的最大大小</td></tr><tr><td><code>logging.logback.rollingpolicy.total-size-cap</code></td><td>删除之前可以占用的最大日志档案大小</td></tr><tr><td><code>logging.logback.rollingpolicy.max-history</code></td><td>要保留的归档日志文件的最大数量(默认为 7)。</td></tr></tbody></table><h3 id="_5-日志级别" tabindex="-1"><a class="header-anchor" href="#_5-日志级别" aria-hidden="true">#</a> 5.日志级别</h3><p>所有支持的日志记录系统都可以通过使用 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code> 在 Spring 环境中设置日志记录程序级别（例如，在 <code>application.properties</code> 中），其中级别是 TRACE、DEBUG、INFO、WARN、ERROR、FATAL 或 OFF 之一。根日志记录程序可以通过使用 <code>logging.level.root</code> 进行配置。</p><p>以下示例显示 <code>application.properties</code> 中的潜在日志记录设置：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token value attr-value">warn</span>
<span class="token key attr-name">logging.level.org.springframework.web</span><span class="token punctuation">=</span><span class="token value attr-value">debug</span>
<span class="token key attr-name">logging.level.org.hibernate</span><span class="token punctuation">=</span><span class="token value attr-value">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">root</span><span class="token punctuation">:</span> <span class="token string">&quot;warn&quot;</span>
    <span class="token key atrule">org.springframework.web</span><span class="token punctuation">:</span> <span class="token string">&quot;debug&quot;</span>
    <span class="token key atrule">org.hibernate</span><span class="token punctuation">:</span> <span class="token string">&quot;error&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用环境变量设置日志记录级别。例如，<code>LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG</code> 将 <code>org.springframework.web</code> 设置为 <code>DEBUG</code>。</p><p><strong>注意</strong>：</p><p>上述方法仅适用于包级日志记录。由于宽松绑定总是将环境变量转换为小写，因此不可能以这种方式为单个类配置日志记录。如果需要为类配置日志记录，可以使用 <code>SPRING_APPLICATION_JSON</code> 变量。</p><h3 id="_6-日志分组" tabindex="-1"><a class="header-anchor" href="#_6-日志分组" aria-hidden="true">#</a> 6.日志分组</h3><p>能够将相关的日志记录器分组在一起，以便可以同时配置它们，这通常很有用。例如，你可能通常会更改所有与 Tomcat 相关的记录器的日志记录级别，但你很难记住顶级包。</p><p>为了帮助实现这一点，Spring Boot 允许你在 Spring <code>Environment</code> 中定义日志组。例如，下面是如何定义一个 “tomcat” 组，将它添加到你的 <code>application.properties</code>：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.group.tomcat</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">group</span><span class="token punctuation">:</span>
    <span class="token key atrule">tomcat</span><span class="token punctuation">:</span> <span class="token string">&quot;org.apache.catalina,org.apache.coyote,org.apache.tomcat&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦定义，你可以用一行更改组中所有日志记录器的级别：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.level.tomcat</span><span class="token punctuation">=</span><span class="token value attr-value">trace</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">tomcat</span><span class="token punctuation">:</span> <span class="token string">&quot;trace&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 包括以下预定义的日志组，可以开箱即用：</p>`,46),L=n("thead",null,[n("tr",null,[n("th",null,"名称"),n("th",null,"日志记录器")])],-1),y=n("td",null,"web",-1),x=n("br",null,null,-1),O=n("br",null,null,-1),S={href:"http://org.springframework.web",target:"_blank",rel:"noopener noreferrer"},I=n("br",null,null,-1),E={href:"http://org.springframework.boot.actuate.endpoint.web",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1),q=n("tr",null,[n("td",null,"sql"),n("td",null,[e("org.springframework.jdbc.core,"),n("br"),e("org.hibernate.SQL,"),n("br"),e("org.jooq.tools.LoggerListener")])],-1),R=n("h3",{id:"_7-日志关闭钩子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-日志关闭钩子","aria-hidden":"true"},"#"),e(" 7.日志关闭钩子")],-1),N={href:"https://logback.qos.ch/manual/loggingSeparation.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"logging.register-shutdown-hook",-1),P=n("code",null,"false",-1),T=n("code",null,"application.properties",-1),C=n("code",null,"application.yml",-1),F=s(`<p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.register-shutdown-hook</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">register-shutdown-hook</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h4><p>关于这个日志钩子问题其实spring官方设计是存在缺陷的，可以参考如下两个链接查看详情：</p>`,6),G={href:"https://github.com/spring-projects/spring-boot/issues/26660",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.jianshu.com/p/2c25e283a514",target:"_blank",rel:"noopener noreferrer"},B=s('<h3 id="_8-自定义日志配置" tabindex="-1"><a class="header-anchor" href="#_8-自定义日志配置" aria-hidden="true">#</a> 8.自定义日志配置</h3><p>可以通过在类路径上包含适当的库来激活各种日志记录系统，还可以通过在类路径的根目录中或在由以下 Spring <code>Environment</code> 属性 <code>logging.config</code> 指定的位置提供合适的配置文件来进一步定制日志系统。</p><p>你可以使用 <code>org.springframework.boot.logging.LoggingSystem</code> 系统属性来强制 Spring Boot 使用特定的日志记录系统。该值应为 <code>LoggingSystem</code> 实现的完全限定类名。你还可以通过使用值 <code>none</code> 来完全禁用 Spring Boot 的日志记录配置。</p><p><strong>注意</strong>：</p><p>由于日志记录是在创建 <code>ApplicationContext</code> 之前初始化的，因此无法从 Spring <code>@Configuration</code> 文件中的 <code>@PropertySources</code> 控制日志记录。更改日志记录系统或完全禁用日志记录系统的唯一方法是通过系统属性。</p><p>根据你的日志记录系统，将加载以下文件：</p><table><thead><tr><th>日志系统</th><th>日志系统</th></tr></thead><tbody><tr><td>Logback</td><td>Logback-spring.xml、Logback-spring.groovy、logback.xml 或 logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml 或者 log4j2.xml</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><p><strong>注意</strong>：</p><p>如果可能，我们建议你在日志配置中使用 <code>-spring</code> 变量（例如，<code>logback-spring.xml</code> 而不是 <code>logback.xml</code>）。如果你使用标准配置的位置，spring 无法完全控制日志初始化。</p><p><strong>警告</strong>：</p><p>Java Util Logging 存在已知的类加载问题，在从 “可执行jar” 运行时会导致问题。我们建议在从 “可执行jar” 运行时尽可能避免使用它。</p><p>为了帮助定制，还将一些其他属性从 Spring <code>Environment</code> 转移到系统属性，如下表所述：</p>',12),M=n("thead",null,[n("tr",null,[n("th",null,"Spring 环境"),n("th",null,"系统属性"),n("th",null,"备注")])],-1),D=n("tr",null,[n("td",null,"logging.exception-conversion-word"),n("td",null,"LOG_EXCEPTION_CONVERSION_WORD"),n("td",null,"记录异常时使用的转换字")],-1),J={href:"http://logging.file.name",target:"_blank",rel:"noopener noreferrer"},H=n("td",null,"LOG_FILE",-1),U=n("td",null,"如果已定义，则在默认日志配置中使用",-1),W=n("tr",null,[n("td",null,"logging.file.path"),n("td",null,"LOG_PATH"),n("td",null,"如果已定义，则在默认日志配置中使用")],-1),z=n("tr",null,[n("td",null,"logging.pattern.console"),n("td",null,"CONSOLE_LOG_PATTERN"),n("td",null,"要在控制台上使用的日志模式（标准输出）")],-1),V=n("tr",null,[n("td",null,"logging.pattern.dateformat"),n("td",null,"LOG_DATEFORMAT_PATTERN"),n("td",null,"日志日期格式的追加模式")],-1),Y=n("tr",null,[n("td",null,"logging.charset.console"),n("td",null,"CONSOLE_LOG_CHARSET"),n("td",null,"用于控制台日志记录的字符集")],-1),K=n("tr",null,[n("td",null,"logging.pattern.file"),n("td",null,"FILE_LOG_PATTERN"),n("td",null,"要在文件中使用的日志模式（如果启用了LOG_FILE）")],-1),X=n("tr",null,[n("td",null,"logging.charset.file"),n("td",null,"FILE_LOG_CHARSET"),n("td",null,"用于文件日志记录的字符集（如果启用了LOG_FILE）")],-1),$=n("tr",null,[n("td",null,"logging.pattern.level"),n("td",null,"LOG_LEVEL_PATTERN"),n("td",null,"呈现日志级别时使用的格式（默认值为%5p）")],-1),Z=n("tr",null,[n("td",null,"PID"),n("td",null,"PID"),n("td",null,"当前进程ID（如果可能，并且尚未定义为操作系统环境变量时被发现）。")],-1),Q=s("<p>如果使用 Logback，还会传输以下属性：</p><table><thead><tr><th>Spring 环境</th><th>系统属性</th><th>备注</th></tr></thead><tbody><tr><td>logging.logback.rollingpolicy.file-name-pattern</td><td>LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN</td><td>转存日志文件名的模式(默认为${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz)</td></tr><tr><td>logging.logback.rollingpolicy.clean-history-on-start</td><td>LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START</td><td>是否在启动时清除存档日志文件</td></tr><tr><td>logging.logback.rollingpolicy.max-file-size</td><td>LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE</td><td>最大日志文件大小</td></tr><tr><td>logging.logback.rollingpolicy.total-size-cap</td><td>LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP</td><td>要保留的日志备份的总大小</td></tr><tr><td>logging.logback.rollingpolicy.max-history</td><td>LOGBACK_ROLLINGPOLICY_MAX_HISTORY</td><td>要保留的存档日志文件的最大数量</td></tr></tbody></table><p>所有受支持的日志记录系统在解析其配置文件时都可以参考系统属性。有关示例，请参阅 <code>spring-boot.jar</code> 中的默认配置：</p>",3),nn={href:"https://github.com/spring-projects/spring-boot/tree/v2.7.8/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/spring-projects/spring-boot/tree/v2.7.8/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml",target:"_blank",rel:"noopener noreferrer"},an={href:"https://github.com/spring-projects/spring-boot/tree/v2.7.8/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging-file.properties",target:"_blank",rel:"noopener noreferrer"},tn=s(`<p><strong>TIP</strong>：</p><p>如果要在日志属性中使用占位符，则应该使用 Spring Boot 的语法，而不是底层框架的语法。值得注意的是，如果使用 Logback，则应该使用 <code>:</code> 作为属性名及其缺省值之间的分隔符，而不是使用 <code>:-</code>。</p><p>可以通过仅覆盖 <code>LOG_LEVEL_PATTERN</code>（或使用 Logback 的 <code>logging.pattern.level</code>）将 MDC 和其他内容添加到日志行。例如，如果使用 <code>logging.pattern.level=user:%X{user} %5p</code>，则默认日志格式将包含 “user” 的MDC条目(如果存在)，如下例所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2019-08-30 12:30:04.031 user:someone INFO 22174 --- [ nio-8080-exec-0] demo.Controller Handling authenticated request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-logback-扩展" tabindex="-1"><a class="header-anchor" href="#_9-logback-扩展" aria-hidden="true">#</a> 9.Logback 扩展</h3><p>Spring Boot 包括许多 Logback 扩展，可以帮助进行高级配置。你可以在 <code>logback-spring.xml</code> 配置文件中使用这些扩展名。</p><p><strong>注意</strong>：</p><p>由于标准 <code>logback.xml</code> 配置文件加载得太早，因此不能在其中使用扩展名。你需要使用 <code>logback-spring.xml</code> 或定义 <code>logging.config</code> 属性</p><p><strong>警告</strong>：</p>`,9),sn={href:"https://logback.qos.ch/manual/configuration.html#autoScan",target:"_blank",rel:"noopener noreferrer"},on=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for
[springProperty], current ElementPath is [[configuration][springProperty]]
ERROR in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for
[springProfile], current ElementPath is [[configuration][springProfile]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特定于配置文件的配置" tabindex="-1"><a class="header-anchor" href="#特定于配置文件的配置" aria-hidden="true">#</a> 特定于配置文件的配置</h4><p><code>&lt;springProfile&gt;</code> 标记允许您根据活动的 Spring 配置文件选择性地包括或排除配置部分。<code>&lt;configuration&gt;</code> 元素中的任何位置都支持配置文件部分。使用 <code>name</code> 属性指定哪个概要文件接受配置。这个 <code>&lt;springProfile&gt;</code> 标记可以包含配置文件名称（例如 <code>staging</code> ）或配置文件表达式。配置文件表达式允许表达更复杂的配置文件逻辑，例如 <code>production &amp; (eu-central | eu-west)</code>。以下列表显示了三个示例配置文件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>staging<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dev | staging<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- configuration to be enabled when the &quot;dev&quot; or &quot;staging&quot; profiles are active
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!production<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- configuration to be enabled when the &quot;production&quot; profile is not active --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="环境属性" tabindex="-1"><a class="header-anchor" href="#环境属性" aria-hidden="true">#</a> 环境属性</h4><p><code>&lt;springProperty&gt;</code> 标记允许你从 Spring <code>Environment</code> 中暴露属性，以便在 Logback 中使用。如果你想访问 Logback 配置中 <code>application.properties</code> 文件中的值，那么这样做很有用。该标记的工作方式与 Logback 的标准 <code>&lt;property&gt;</code> 标记类似。但是，可以指定属性的 <code>source</code>（从环境中），而不是指定直接 <code>value</code>。如果需要将属性存储在 <code>local</code> 范围之外的其他位置，可以使用 <code>scope</code> 属性。如果需要回退值（如果未在环境中设置该属性），则可以使用 <code>defaultValue</code> 属性。以下示例显示如何暴露属性以在 Logback 中使用：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProperty</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>context<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fluentHost<span class="token punctuation">&quot;</span></span> <span class="token attr-name">source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myapp.fluentd.host<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FLUENT<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.more.appenders.DataFluentAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remoteHost</span><span class="token punctuation">&gt;</span></span>\${fluentHost}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remoteHost</span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>必须以串行大小写指定 <code>source</code> （如 <code>my.property-name</code>）。 但是，可以使用放宽的规则将属性添加到 <code>Environment</code> 中。</p>`,9);function ln(rn,cn){const a=r("ExternalLinkIcon");return l(),i("div",null,[g,n("p",null,[e("Spring Boot 使用 "),n("a",u,[e("Commons Logging"),t(a)]),e(" 进行所有内部日志记录，但底层日志实现保持打开状态。"),n("a",m,[e("Java Util Logging"),t(a)]),e(" 、"),n("a",h,[e("Log4J2"),t(a)]),e(" 和 "),n("a",b,[e("Logback"),t(a)]),e(" 提供了默认配置。在每种情况下，记录器都预先配置为使用控制台输出，也可以使用可选的文件输出。")]),v,n("p",null,[e("如果你的终端支持 ANSI，则使用颜色输出来提高可读性。你可以将 "),k,e(" 设置为"),n("a",_,[e("支持的值"),t(a)]),e(" ，以覆盖自动检测。")]),f,n("table",null,[L,n("tbody",null,[n("tr",null,[y,n("td",null,[e("org.springframework.core.codec,"),x,e("org.springframework.http,"),O,n("a",S,[e("org.springframework.web"),t(a)]),e(","),I,n("a",E,[e("org.springframework.boot.actuate.endpoint.web"),t(a)]),e(","),A,e("org.springframework.boot.web.servlet.ServletContextInitializerBeans")])]),q])]),R,n("p",null,[e("为了在应用程序终止时释放日志记录资源，提供了一个 shutdown 钩子，该钩子将在 JVM 退出时触发日志系统清理。这个关机钩子是自动注册的，除非你的应用程序被部署为 war 文件。如果你的应用程序具有复杂的上下文层次结构，那么关闭钩子可能无法满足你的需要。如果没有，禁用 shutdown 钩子，并研究底层日志系统直接提供的选项。例如，Logback 提供"),n("a",N,[e("上下文选择器"),t(a)]),e("，允许在自己的上下文中创建每个 Logger。你可以使用 "),w,e(" 属性来禁用 shutdown 钩子。将其设置为 "),P,e(" 将禁用注册。你可以在 "),T,e(" 或者 "),C,e(" 文件中设置该属性：")]),F,n("ul",null,[n("li",null,[n("a",G,[e("官方issue"),t(a)])]),n("li",null,[n("a",j,[e("springboot日志系统的设计缺陷"),t(a)])])]),B,n("table",null,[M,n("tbody",null,[D,n("tr",null,[n("td",null,[n("a",J,[e("logging.file.name"),t(a)])]),H,U]),W,z,V,Y,K,X,$,Z])]),Q,n("ul",null,[n("li",null,[n("a",nn,[e("Logback"),t(a)])]),n("li",null,[n("a",en,[e("Log4j 2"),t(a)])]),n("li",null,[n("a",an,[e("Java Util logging"),t(a)])])]),tn,n("p",null,[e("扩展不能用于 Logback 的"),n("a",sn,[e("配置扫描"),t(a)]),e("。如果尝试这样做，则对配置文件进行更改会导致类似以下错误之一的错误被记录：")]),on])}const dn=o(d,[["render",ln],["__file","logging.html.vue"]]);export{dn as default};
