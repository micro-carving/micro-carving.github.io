import{_ as e,W as t,X as a,a1 as l}from"./framework-158a71b3.js";const i="/assets/software-sdlc-599a00e0.png",n="/assets/software-waterfall-fc7e5bbf.png",r={},o=l('<h2 id="软件开发生命周期" tabindex="-1"><a class="header-anchor" href="#软件开发生命周期" aria-hidden="true">#</a> 软件开发生命周期</h2><p>软件开发生命周期又叫做 SDLC（Software Development Life Cycle），它是集合了计划、开发、测试和部署过程的集合。如下图所示 ：</p><figure><img src="'+i+'" alt="SDLC" tabindex="0" loading="lazy"><figcaption>SDLC</figcaption></figure><ul><li>需求分析（Requirement Analysis）</li></ul><p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p><ul><li>设计（Design）</li></ul><p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目计划。计划可以使用图表，布局设计或者文者的方式呈现。</p><ul><li>实现（Implementation）</li></ul><p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p><ul><li>测试（Testing）</li></ul><p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p><ul><li>进化（Evolution）</li></ul><p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修改，bug 修复，功能增加等。</p><h2 id="软件开发瀑布模型" tabindex="-1"><a class="header-anchor" href="#软件开发瀑布模型" aria-hidden="true">#</a> 软件开发瀑布模型</h2><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开发， 但是已经不适合现在的开发了。</p><p>下图对软件开发模型的一个阐述。</p><figure><img src="'+n+'" alt="软件瀑布模型" tabindex="0" loading="lazy"><figcaption>软件瀑布模型</figcaption></figure><table><thead><tr><th style="text-align:center;">优势</th><th style="text-align:center;">逆势</th></tr></thead><tbody><tr><td style="text-align:center;">简单易用和理解</td><td style="text-align:center;">各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td></tr><tr><td style="text-align:center;">当前一阶段完成后，您只需要去关注后续阶段。</td><td style="text-align:center;">由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td></tr><tr><td style="text-align:center;">为项目提供了按阶段划分的检查节点</td><td style="text-align:center;">瀑布模型的突出缺点是不适应用户需求的变化。</td></tr></tbody></table><h2 id="软件的敏捷开发" tabindex="-1"><a class="header-anchor" href="#软件的敏捷开发" aria-hidden="true">#</a> 软件的敏捷开发</h2><h3 id="什么是敏捷开发" tabindex="-1"><a class="header-anchor" href="#什么是敏捷开发" aria-hidden="true">#</a> 什么是敏捷开发？</h3><p>敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发（Incremental Development） 。</p><ul><li><strong>何为迭代开发？</strong></li></ul><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次&quot;大开发&quot;；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次&quot;大开发&quot;变成多次&quot;小开发&quot;，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70 次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><ul><li><strong>何为增量开发？</strong></li></ul><p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p>举例来说，房产公司开发一个 10 栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼......每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好 10 栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶......</p><h3 id="敏捷开发如何迭代" tabindex="-1"><a class="header-anchor" href="#敏捷开发如何迭代" aria-hidden="true">#</a> 敏捷开发如何迭代？</h3><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><h4 id="敏捷开发有什么好处" tabindex="-1"><a class="header-anchor" href="#敏捷开发有什么好处" aria-hidden="true">#</a> 敏捷开发有什么好处？</h4><ul><li><strong>早期交付</strong></li></ul><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。还是以上一节的房产公司为例，如果按照传统的 “瀑布开发模式”，先挖 10 栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付 10 栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款 10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><ul><li><strong>降低风险</strong></li></ul><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10 栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面 9 栋楼？</p>',34),s=[o];function d(c,p){return t(),a("div",null,s)}const u=e(r,[["render",d],["__file","software-develop-flow.html.vue"]]);export{u as default};
