import{_ as p,W as o,X as i,Y as n,Z as a,$ as e,a0 as t,C as c}from"./framework-eca38234.js";const l="/assets/idea-console-output-banner-f756962c.png",r="/assets/idea-startup-config-8119fd4b.png",u={},d=t(`<h2 id="springapplication" tabindex="-1"><a class="header-anchor" href="#springapplication" aria-hidden="true">#</a> SpringApplication</h2><p><code>SpringApplication</code> 类提供了一种方便的方法来引导从 <code>main()</code> 方法启动的 Spring 应用程序。在很多情况下，你可以委托给静态的 <code>SpringApplication.run</code> 方法，如下例所示:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序启动可能会看到类似如下的输出信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  .   ____          _            __ _ _
 /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\
( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` | \\ \\ \\ \\
 \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.7.8)

2023-02-17 12:51:57.711  INFO 30352 --- [           main] c.o.s.quickstart.HelloWorldApplication   : Starting HelloWorldApplication using Java 11.0.9 on DESKTOP-2ILNKER with PID 30352 (E:\\IdeaWorkspace\\todo-projects\\spring-boot-samples\\springboot-sample-quickstart\\target\\classes started by 16602 in E:\\IdeaWorkspace\\todo-projects\\spring-boot-samples)
2023-02-17 12:51:57.713  INFO 30352 --- [           main] c.o.s.quickstart.HelloWorldApplication   : No active profile set, falling back to 1 default profile: &quot;default&quot;
2023-02-17 12:51:58.145  INFO 30352 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8089 (http)
2023-02-17 12:51:58.146  INFO 30352 --- [           main] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.33] using APR version [1.7.0].
2023-02-17 12:51:58.146  INFO 30352 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2023-02-17 12:51:58.146  INFO 30352 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2023-02-17 12:51:58.148  INFO 30352 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1o  3 May 2022]
2023-02-17 12:51:58.153  INFO 30352 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-02-17 12:51:58.153  INFO 30352 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.71]
2023-02-17 12:51:58.205  INFO 30352 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-02-17 12:51:58.205  INFO 30352 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 469 ms
2023-02-17 12:51:58.396  INFO 30352 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
2023-02-17 12:51:58.403  INFO 30352 --- [           main] c.o.s.quickstart.HelloWorldApplication   : Started HelloWorldApplication in 0.946 seconds (JVM running for 1.698)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，将显示 <code>INFO</code> 日志消息，包括一些相关的启动细节，例如启动应用程序的用户。如果需要的日志级别不是 <code>INFO</code>，可以设置为<a href="">其他日志级别</a> 。应用程序版本是使用主应用程序类包中的实现版本确定的。启动信息日志记录可以通过设置关闭 <code>spring.main.log-startup-info</code> 设为 <code>false</code>。这也将关闭应用程序活动配置文件的日志记录。</p><p><strong>application.yml</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 服务器默认端口 8080</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8070</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token comment"># 是否开启启动日志（默认为 true），true：开启；false：关闭</span>
    <span class="token key atrule">log-startup-info</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭启动日志之后，日志少了 <code>SpringBoot</code> 启动相关的日志，控制台输出如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  .   ____          _            __ _ _
 /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\
( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` | \\ \\ \\ \\
 \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.7.8)

2023-02-17 12:59:46.547  INFO 27108 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8070 (http)
2023-02-17 12:59:46.548  INFO 27108 --- [           main] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.33] using APR version [1.7.0].
2023-02-17 12:59:46.548  INFO 27108 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2023-02-17 12:59:46.549  INFO 27108 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2023-02-17 12:59:46.550  INFO 27108 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1o  3 May 2022]
2023-02-17 12:59:46.556  INFO 27108 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-02-17 12:59:46.556  INFO 27108 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.71]
2023-02-17 12:59:46.608  INFO 27108 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-02-17 12:59:46.608  INFO 27108 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 501 ms
2023-02-17 12:59:46.803  INFO 27108 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8070 (http) with context path &#39;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>要在启动期间添加额外的日志记录，可以在 <code>SpringApplication</code> 的子类中重写 <code>logStartupInfo(boolean)</code>。</p><h3 id="_1-启动失败" tabindex="-1"><a class="header-anchor" href="#_1-启动失败" aria-hidden="true">#</a> 1.启动失败</h3><p>如果应用程序无法启动，注册的 <code>FailureAnalyzers</code> 将有机会提供专用错误消息和解决问题的具体操作。例如，如果在端口 8080 上启动一个 web 应用程序，并且该端口已经在使用中，那么应该会看到类似以下消息的内容:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>***************************
APPLICATION FAILED TO START
***************************

Description:

Embedded servlet container failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that is listening on port 8080 or configure this application to listen on another port.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p><code>SpringBoot</code> 提供了许多 <code>FailureAnalyzer</code> 实现，也可以添加自己的实现。</p><p>如果没有故障分析器能够处理异常，仍然可以显示完整的条件报告，以更好地了解哪里出了问题。 为此，需要启用 <code>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</code> 的调试属性或启用调试日志记录。 例如，如果您正在使用 <code>java -jar</code> 运行应用程序，则可以按如下方式启用调试属性：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject-0.0.1-SNAPSHOT.jar <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-延迟初始化" tabindex="-1"><a class="header-anchor" href="#_2-延迟初始化" aria-hidden="true">#</a> 2.延迟初始化</h3><p><code>SpringApplication</code> 允许应用程序延迟初始化。如果启用了延迟初始化，则会根据需要而不是在应用程序启动期间创建 bean。因此，启用延迟初始化可以减少应用程序启动所需的时间。在 web 应用程序中，启用延迟初始化将导致许多 web 相关 bean 在收到 HTTP 请求之前无法初始化。</p><p>延迟初始化的一个缺点是它会延迟应用程序问题的发现。如果延迟初始化错误配置的 Bean，则在启动过程中不会再出现故障，只有在初始化 Bean 时，问题才会变得明显。还必须注意确保 JVM 有足够的内存来容纳应用程序的所有 Bean，而不仅仅是那些在启动期间初始化的 Bean。由于这些原因，默认情况下不启用延迟初始化，建议在启用延迟初始化之前对 JVM 的堆大小进行微调。</p><p>可以使用 <code>SpringApplicationBuilder</code> 上的 <code>lazyInitialization</code> 方法或 <code>SpringApplication</code> 上的 <code>setLazyInitialize</code> 方法以编程方式启用延迟初始化。或者，可以使用 <code>spring.main.lazy-initialization</code> 属性启用它，如下例所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token comment"># 是否延迟初始化，默认为 false </span>
    <span class="token key atrule">lazy-initialization</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>如果希望禁用某些 Bean 的延迟初始化，同时对应用程序的其余部分使用延迟初始化，则可以使用 <code>@Lazy(false)</code> 注释将它们的延迟属性显式设置为 false。</p><h3 id="_3-自定义-banner" tabindex="-1"><a class="header-anchor" href="#_3-自定义-banner" aria-hidden="true">#</a> 3.自定义 Banner</h3><p>在启动时打印的 banner 可以通过在类路径中添加 <code>banner.txt</code> 文件或将 <code>spring.banner.location</code> 属性设置为这样一个文件的位置来更改。如果文件的编码不是 UTF-8，你可以设置 <code>spring.banner.charset</code>。除了文本文件，还可以在类路径中添加 <code>banner.gif</code>、<code>banner.jpg</code> 或 <code>banner.png</code> 图像文件，或者设置 <code>spring.banner.image.location</code> 属性。图像转换为 ASCII 艺术表示和打印在任何文本的 banner。</p><p>在 <code>banner.txt</code> 文件中，可以使用环境中可用的任何密钥以及以下占位符：</p><p><strong>Banner 变量</strong></p>`,30),k=n("thead",null,[n("tr",null,[n("th",null,"变量"),n("th",null,"描述")])],-1),m=n("tr",null,[n("td",{"application.version":""},"$"),n("td",null,[a("应用程序的版本号，如在 "),n("code",null,"MANIFEST.MF"),a(" 中声明。例如，"),n("code",null,"实现版本：1.0"),a(" 打印为 "),n("code",null,"1.0"),a("。")])],-1),v=n("tr",null,[n("td",{"application.formatted-version":""},"$"),n("td",null,[a("应用程序的版本号，如在 "),n("code",null,"MANIFEST.MF"),a(" 中声明的，并格式化为显示（用括号括起来，前缀为 "),n("code",null,"v"),a("）。例如（"),n("code",null,"v1.0"),a("）。")])],-1),g=n("tr",null,[n("td",{"spring-boot.version":""},"$"),n("td",null,[a("正在使用的 Spring Boot 版本。例如 "),n("code",null,"2.7.8"),a("。")])],-1),b=n("tr",null,[n("td",{"spring-boot.formatted-version":""},"$"),n("td",null,[a("正在使用的Spring Boot版本，格式为显示（用括号括起来，前缀为 "),n("code",null,"v"),a("）。例如（"),n("code",null,"v2.7.8"),a("）。")])],-1),_={href:"http://Ansi.NAME",target:"_blank",rel:"noopener noreferrer"},f=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"A"),n("mi",null,"n"),n("mi",null,"s"),n("mi",null,"i"),n("mi",null,"C"),n("mi",null,"o"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"r"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"N"),n("mi",null,"A"),n("mi",null,"M"),n("mi",null,"E")]),n("mo",{separator:"true"},",")]),n("annotation",{encoding:"application/x-tex"},"{AnsiColor.NAME},")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"A"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mord mathnormal"},"A"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"ME")]),n("span",{class:"mpunct"},",")])])],-1),y={href:"http://AnsiBackground.NAME",target:"_blank",rel:"noopener noreferrer"},h={href:"http://AnsiStyle.NAME",target:"_blank",rel:"noopener noreferrer"},A=n("td",null,[n("code",null,"NAME"),a(" 是 ANSI 转义代码的名称。有关详细信息，请参见 "),n("code",null,"AnsiPropertySource"),a("。")],-1),w=n("tr",null,[n("td",{"application.title":""},"$"),n("td",null,[a("这个应用程序的标题被声明在 "),n("code",null,"MANIFEST.MF"),a(" 中。例如，"),n("code",null,"实现版本-Title: MyApp"),a(" 打印为 "),n("code",null,"MyApp")])],-1),S=t(`<p><strong>TIP</strong>：</p><p>如果你想通过编程方式生成一个 banner，可以使用 <code>SpringApplication.setBanner(…)</code>方法。使用 <code>org.springframework.boot.Banner</code> 接口并实现自己的 <code>printBanner()</code> 方法。</p><p>还可以使用 <code>spring.main.banner-mode</code> 属性来确定 banner 是否必须在 <code>System.out(console)</code> 上打印、发送到配置的日志器(<code>log</code>) 或根本不生成(<code>off</code>)。</p><p><strong>application.yml</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token comment"># banner 模式：console（打印到控制台）、log（打印到日志文件）、off（关闭）</span>
    <span class="token key atrule">banner-mode</span><span class="token punctuation">:</span> off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印的 banner 被注册为一个单例 bean，名称如下: <code>springBootBanner</code>。</p><p><strong>注意</strong>：</p><p>只有在使用 SpringBoot 启动程序时，<code>\${application.version}</code> 和 <code>\${appliation.formatted-version}</code> 属性才可用。如果正在运行一个未打包的 jar 并使用 <code>java-cp &lt;classpath&gt; &lt;mainclass&gt;</code> 启动它，则不会解析这些值。</p><p>这就是为什么我们建议始终使用 <code>java org.springframework.boot.loader.JarLauncher</code> 启动未打包的 jar 包。这将在构建类路径和启动应用程序之前初始化 <code>application.*</code> banner变量。</p><p>配置的 banner.txt 内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>                _                    _                 _                                    _
               (_)                  | |               | |                                  | |
 ___ _ __  _ __ _ _ __   __ _ ______| |__   ___   ___ | |_ ______ ___  __ _ _ __ ___  _ __ | | ___  ___
/ __| &#39;_ \\| &#39;__| | &#39;_ \\ / _\` |______| &#39;_ \\ / _ \\ / _ \\| __|______/ __|/ _\` | &#39;_ \` _ \\| &#39;_ \\| |/ _ \\/ __|
\\__ \\ |_) | |  | | | | | (_| |      | |_) | (_) | (_) | |_       \\__ \\ (_| | | | | | | |_) | |  __/\\__ \\
|___/ .__/|_|  |_|_| |_|\\__, |      |_.__/ \\___/ \\___/ \\__|      |___/\\__,_|_| |_| |_| .__/|_|\\___||___/
    | |                  __/ |                                                       | |
    |_|                 |___/                                                        |_|
\${AnsiColor.GREEN}
  :: Application Title   ::    \${application.title}
  :: Application Version ::    \${application.formatted-version}
  :: Spring Boot Version ::    \${spring-boot.formatted-version}
  :: App Server  Port    ::    \${server.port}
\${AnsiColor.BLACK}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动效果如下图所示：</p><figure><img src="`+l+'" alt="idea控制台输出的banner信息" tabindex="0" loading="lazy"><figcaption>idea控制台输出的banner信息</figcaption></figure><p><strong>扩展</strong>：</p><p>banner 艺术字体生成网址链接如下：</p>',15),x={href:"http://www.network-science.de/ascii/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://www.kammerl.de/ascii/AsciiSignature.php",target:"_blank",rel:"noopener noreferrer"},B={href:"http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.bootschool.net/ascii",target:"_blank",rel:"noopener noreferrer"},N=t(`<h3 id="_4-自定义-springapplication-程序" tabindex="-1"><a class="header-anchor" href="#_4-自定义-springapplication-程序" aria-hidden="true">#</a> 4.自定义 SpringApplication 程序</h3><p>如果 <code>SpringApplication</code> 默认值不符合你的口味，可以创建一个本地实例来自定义它。例如，要关闭 banner，可以写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">Banner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>传递给 <code>SpringApplication</code> 的构造函数参数是 Spring Bean 的配置源。在大多数情况下，这些是对 <code>@Configuration</code> 类的引用，但也可以是对 <code>@Component</code> 类的直接引用。</p><p>也可以使用 <code>application.properties</code> 文件配置 <code>SpringApplication</code>。</p>`,6),L={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/SpringApplication.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<h3 id="_5-优雅的构建器-api" tabindex="-1"><a class="header-anchor" href="#_5-优雅的构建器-api" aria-hidden="true">#</a> 5.优雅的构建器 API</h3><p>如果需要构建 <code>ApplicationContext</code> 层次结构（具有父/子关系的多个上下文），或者如果喜欢使用 “fluent”（本义是流畅、流利，个人觉得优雅更好听一点） 的构建器 API，则可以使用 <code>SpringApplicationBuilder</code>。</p><p><code>SpringApplicationBuilder</code> 允许将多个方法调用链接在一起，并包括父方法和子方法，以创建层次结构，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">SpringApplicationBuilder</span></span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">bannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p>`,5),M=n("code",null,"ApplicationContext",-1),O=n("strong",null,"必须",-1),F=n("code",null,"Environment",-1),j={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/builder/SpringApplicationBuilder.html",target:"_blank",rel:"noopener noreferrer"},T=n("h3",{id:"_6-应用程序可用性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-应用程序可用性","aria-hidden":"true"},"#"),a(" 6.应用程序可用性")],-1),P={href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>此外，您还可以通过将 <code>ApplicationAvailability</code> 接口注入到自己的 bean 中来获得可用性状态。</p><h4 id="活跃状态" tabindex="-1"><a class="header-anchor" href="#活跃状态" aria-hidden="true">#</a> 活跃状态</h4><p>应用程序的 “活跃” 状态告诉它的内部状态是否允许它正常工作，或者如果它当前出现故障，是否可以自行恢复。中断的 “活跃” 状态意味着应用程序处于无法恢复的状态，基础结构应重新启动应用程序。</p><p><strong>注意</strong>：</p><p>通常，“活跃” 状态不应基于外部检查，如健康检查。如果发生了这种情况，出现故障的外部系统（数据库、Web API、外部缓存）将触发整个平台的大规模重启和级联故障。</p><p>Spring Boot 应用程序的内部状态主要由 Spring <code>ApplicationContext</code> 表示。如果应用程序上下文已成功启动，则 Spring Boot 假定应用程序处于有效状态。一旦上下文被刷新，应用程序就被认为是活动的，请参阅 Spring Boot 应用程序生命周期和相关的应用程序事件。</p><h4 id="就绪状态" tabindex="-1"><a class="header-anchor" href="#就绪状态" aria-hidden="true">#</a> 就绪状态</h4><p>应用程序的 “就绪” 状态告诉应用程序是否已准备好处理流量。失败的 “就绪” 状态告诉平台现在不应该将流量路由到应用程序。这通常发生在启动过程中，在处理 <code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 组件时，或者在应用程序决定太忙而无法处理额外流量时的任何时候。</p><p>一旦调用了应用程序和命令行运行程序，就认为应用程序已准备就绪，请参阅 Spring Boot 应用程序生命周期和相关的应用程序事件。</p><p><strong>TIP</strong>：</p><p>启动期间预期运行的任务应由 <code>CommandLineRunner</code> 和 <code>ApplicationRunner</code> 组件执行，而不是使用 Spring 组件生命周期回调（如 <code>@PostConstruct</code>）。</p><h4 id="管理程序的可用性状态" tabindex="-1"><a class="header-anchor" href="#管理程序的可用性状态" aria-hidden="true">#</a> 管理程序的可用性状态</h4><p>应用程序组件可以随时通过注入 <code>ApplicationAvailability</code> 接口并调用其上的方法来检索当前可用性状态。更常见的情况是，应用程序希望侦听状态更新或更新应用程序的状态。</p><p>例如，我们可以将应用程序的 “就绪” 状态导出到一个文件，以便 Kubernetes &quot;exec Probe&quot; 可以查看这个文件:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">AvailabilityChangeEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">ReadinessState</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyReadinessStateExporter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@EventListener</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStateChange</span><span class="token punctuation">(</span><span class="token class-name">AvailabilityChangeEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReadinessState</span><span class="token punctuation">&gt;</span></span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">ACCEPTING_TRAFFIC</span><span class="token operator">:</span>
                <span class="token comment">// create file /tmp/healthy</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">REFUSING_TRAFFIC</span><span class="token operator">:</span>
                <span class="token comment">// remove file /tmp/healthy</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当应用程序崩溃且无法恢复时，我们也可以更新应用程序的状态:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">AvailabilityChangeEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">LivenessState</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationEventPublisher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocalCacheVerifier</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationEventPublisher</span> eventPublisher<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyLocalCacheVerifier</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span> eventPublisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher <span class="token operator">=</span> eventPublisher<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CacheCompletelyBrokenException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AvailabilityChangeEvent</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher<span class="token punctuation">,</span> ex<span class="token punctuation">,</span>
                    <span class="token class-name">LivenessState</span><span class="token punctuation">.</span><span class="token constant">BROKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 为 Kubernetes 提供了带有 Actuator Health Endpoint 的 “活跃度” 和 “就绪性” 的 HTTP 探测器。可以在专用部分中获得更多关于在 Kubernetes 上部署 Spring Boot 应用程序的指导。</p><h3 id="_7-应用程序事件和监听器" tabindex="-1"><a class="header-anchor" href="#_7-应用程序事件和监听器" aria-hidden="true">#</a> 7.应用程序事件和监听器</h3><p>除了通常的 Spring 框架事件，例如 <code>ContextRefreshedEvent</code>, <code>SpringApplication</code> 还会发送一些附加的应用程序事件。</p><p><strong>注意</strong>：</p><p>有些事件实际上是在创建 <code>ApplicationContext</code> 之前触发的，因此不能将侦听器注册为 <code>@Bean</code>。可以使用 <code>SpringApplication.addListeners(…)</code> 方法或 <code>SpringApplicationBuilder.listeners(...)</code> 方法。</p><p>如果希望这些侦听器自动注册，无论应用程序的创建方式如何，都可以将 <code>META-INF/spring.factories</code> 文件添加到项目中，并使用 <code>org.springframework.context.ApplicationListener</code> 键，如下例所示：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.context.ApplicationListener</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.project.MyListener</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当应用程序运行时，应用程序事件按以下顺序发送：</p><ol><li><code>ApplicationStartingEvent</code>：程序运行开始时并且是在任何处理之前发送该事件，当然监听器和初始化器注册除外；</li><li><code>ApplicationEnvironmentPreparedEvent</code>：在已知的上下文中使用 <code>Environment</code> 同时在上下文创建之前发送该事件；</li><li><code>ApplicationContextInitializedEvent</code>：在已准备好的 <code>ApplicationContext</code> 并且调用了 <code>ApplicationContextInitializers</code> 之后发送该事件，但是需要在加载任何 bean 定义之前发送；</li><li><code>ApplicationPreparedEvent</code>：在刷新开始之前发送该事件，但是在加载 bean 定义之后发送；</li><li><code>ApplicationStartedEvent</code>：在上下文刷新之后发送该事件，但是在调用任何应用程序和命令行运行程序之前发送；</li><li><code>AvailabilityChangeEvent</code>：在 <code>LivenessState.CORRECT</code> 之后立即发送该事件，此时标识应用程序是活动的；</li><li><code>ApplicationReadyEvent</code>：在调用任何应用程序和命令行运行程序之后发送该事件；</li><li><code>AvailabilityChangeEvent</code>：在 <code>ReadinessState.ACCEPTING_TRAFFIC</code> 之后立即发送该事件，此时标识应用程序已准备好服务请求；</li><li><code>ApplicationFailedEvent</code>：在程序启动过程中出现异常时发送该事件。</li></ol><p>上面的列表只包括与 <code>SpringApplication</code> 相关的 <code>SpringApplicationEvent</code>。除此之外，以下事件也会在 <code>ApplicationPreparedEvent</code> 之后和 <code>ApplicationStartedEvent</code> 之前发布：</p><ul><li><code>WebServerInitializedEvent</code> 在 <code>WebServer</code> 就绪后发送。<code>ServletWebServerInitializedEvent</code> 和 <code>ReactiveWebServerInitializedEvent</code> 分别是 servlet 和 reactive 变量。</li><li>刷新 <code>ApplicationContext</code> 时，将发送 <code>ContextRefreshedEvent</code>。</li></ul><p><strong>TIP</strong>：</p><p>通常不需要使用应用程序事件，但知道它们的存在会很方便。在内部，Spring Boot 使用事件来处理各种任务。</p><p><strong>注意</strong>：</p><p>默认情况下，事件监听器不应运行可能很长的任务，因为它们在同一线程中执行。可以考虑改用应用程序和命令行运行程序来处理。</p><p>应用程序事件是通过使用 Spring 框架的事件发布机制发送的。该机制的一部分确保发布到子上下文中的监听器事件也发布到任何祖先上下文中的监听器。因此，如果你的应用程序使用 <code>SpringApplication</code> 实例的层次结构，则监听器可能会接收同一类型的应用程序事件的多个实例。</p><p>为了允许监听器区分其上下文的事件和后代上下文的事件，它应该请求注入其应用程序上下文，然后将注入的上下文与事件的上下文进行比较。上下文可以通过实现 <code>ApplicationContextAware</code> 来注入，如果监听器是 bean，则可以使用 <code>@Autowired</code> 来注入。</p><h3 id="_8-web-环境" tabindex="-1"><a class="header-anchor" href="#_8-web-环境" aria-hidden="true">#</a> 8. Web 环境</h3><p><code>SpringApplication</code> 试图代表你创建正确类型的 <code>ApplicationContext</code>。用于确定 <code>WebApplicationType</code> 的算法如下：</p><ul><li>存在 Spring MVC，使用 <code>AnnotationConfigServletWebServerApplicationContext</code></li><li>如果 Spring MVC 不存在，而 Spring WebFlux 存在，则使用 <code>AnnotationConfigReactiveWebServerApplicationContext</code></li><li>否则，将使用 <code>AnnotationConfigApplicationContext</code></li></ul><p>这意味着如果在同一应用程序中使用 <code>Spring MVC</code> 和新的来自 <code>Spring WebFlux</code> 的 <code>WebClient</code>，默认情况下将使用 <code>Spring MVC</code> 。可以通过调用 <code>setWebApplicationType(WebApplicationType)</code> 轻松地覆盖它。</p><p>也可以通过调用 <code>setApplicationContextClass(…)</code> 来完全控制 <code>ApplicationContext</code> 类型。</p><p><strong>TIP</strong>：</p><p>在 JUnit 测试中使用 <code>SpringApplication</code> 时，通常需要调用 <code>setWebApplicationType(WebApplicationType.NONE)</code>。</p><h3 id="_9-访问应用程序参数" tabindex="-1"><a class="header-anchor" href="#_9-访问应用程序参数" aria-hidden="true">#</a> 9.访问应用程序参数</h3><p>如果需要访问传递给 <code>SpringApplication.run(…)</code> 的应用程序参数，可以注入 <code>org.springframework.boot.ApplicationArguments</code> bean。<code>ApplicationArguments</code> 接口提供对原始 <code>String[]</code> 参数以及解析的 <code>option</code> 和 <code>non-option</code> 参数的访问，如下例所示：</p><h4 id="官网给出的示例" tabindex="-1"><a class="header-anchor" href="#官网给出的示例" aria-hidden="true">#</a> 官网给出的示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> debug <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">containsOption</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> files <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">getNonOptionArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// if run with &quot;--debug logfile.txt&quot; prints [&quot;logfile.txt&quot;]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自行改造的示例" tabindex="-1"><a class="header-anchor" href="#自行改造的示例" aria-hidden="true">#</a> 自行改造的示例</h4><p>MyBean.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationArguments</span> arguments<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> nonOptionArgsNum <span class="token operator">=</span> arguments<span class="token punctuation">.</span><span class="token function">getNonOptionArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> optionNamesNum <span class="token operator">=</span> arguments<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> sourceArgsNum <span class="token operator">=</span> arguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;非选项参数数量为 {} 个&quot;</span><span class="token punctuation">,</span> nonOptionArgsNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;选项参数数量为 {} 个&quot;</span><span class="token punctuation">,</span> optionNamesNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;原参数数量为 {} 个&quot;</span><span class="token punctuation">,</span> sourceArgsNum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>nonOptionArgsNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arguments<span class="token punctuation">.</span><span class="token function">getNonOptionArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>nonOptionArgs <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;非可选项为 {}&quot;</span><span class="token punctuation">,</span> nonOptionArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>optionNamesNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arguments<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>optionName <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;可选项名称为 {}，选项值为 {}&quot;</span><span class="token punctuation">,</span> optionName<span class="token punctuation">,</span> arguments<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span>optionName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">boolean</span> isExistAA <span class="token operator">=</span> arguments<span class="token punctuation">.</span><span class="token function">containsOption</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;是否包含 “aa” 可选项？ {}&quot;</span><span class="token punctuation">,</span> isExistAA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceArgsNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> sourceArg <span class="token operator">:</span> arguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;原参数为 {}&quot;</span><span class="token punctuation">,</span> sourceArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyApplication.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">Banner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">MyBean</span> myBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myBean<span class="token punctuation">.</span><span class="token function">printArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>idea 启动配置</p><figure><img src="`+r+`" alt="idea启动配置" tabindex="0" loading="lazy"><figcaption>idea启动配置</figcaption></figure><p>控制台输出内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2023-02-18 15:56:52.335  INFO 4172 --- [           main] c.o.s.core.application.MyApplication     : Starting MyApplication using Java 11.0.9 on DESKTOP-2ILNKER with PID 4172 (E:\\IdeaWorkspace\\todo-projects\\spring-boot-samples\\springboot-sample-core\\springboot-sample-application\\target\\classes started by 16602 in E:\\IdeaWorkspace\\todo-projects\\spring-boot-samples)
2023-02-18 15:56:52.337  INFO 4172 --- [           main] c.o.s.core.application.MyApplication     : No active profile set, falling back to 1 default profile: &quot;default&quot;
2023-02-18 15:56:52.743  INFO 4172 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8070 (http)
2023-02-18 15:56:52.743  INFO 4172 --- [           main] o.a.catalina.core.AprLifecycleListener   : Loaded Apache Tomcat Native library [1.2.33] using APR version [1.7.0].
2023-02-18 15:56:52.743  INFO 4172 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true], UDS [true].
2023-02-18 15:56:52.743  INFO 4172 --- [           main] o.a.catalina.core.AprLifecycleListener   : APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
2023-02-18 15:56:52.745  INFO 4172 --- [           main] o.a.catalina.core.AprLifecycleListener   : OpenSSL successfully initialized [OpenSSL 1.1.1o  3 May 2022]
2023-02-18 15:56:52.750  INFO 4172 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-02-18 15:56:52.750  INFO 4172 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.71]
2023-02-18 15:56:52.800  INFO 4172 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-02-18 15:56:52.801  INFO 4172 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 438 ms
2023-02-18 15:56:52.871  INFO 4172 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8070 (http) with context path &#39;&#39;
2023-02-18 15:56:52.891  INFO 4172 --- [           main] c.o.s.core.application.MyApplication     : Started MyApplication in 0.836 seconds (JVM running for 1.465)
2023-02-18 15:56:52.895  INFO 4172 --- [           main] c.o.springboot.core.application.MyBean   : 非选项参数数量为 0 个
2023-02-18 15:56:52.895  INFO 4172 --- [           main] c.o.springboot.core.application.MyBean   : 选项参数数量为 1 个
2023-02-18 15:56:52.895  INFO 4172 --- [           main] c.o.springboot.core.application.MyBean   : 原参数数量为 1 个
2023-02-18 15:56:52.895  INFO 4172 --- [           main] c.o.springboot.core.application.MyBean   : 可选项名称为 aa，选项值为 [logfile.txt]
2023-02-18 15:56:52.896  INFO 4172 --- [           main] c.o.springboot.core.application.MyBean   : 是否包含 “aa” 可选项？ true
2023-02-18 15:56:52.896  INFO 4172 --- [           main] c.o.springboot.core.application.MyBean   : 原参数为 --aa=logfile.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>Spring Boot 还向 Spring <code>Environment</code> 注册了一个 <code>CommandLinePropertySource</code>。这还允许通过使用 <code>@Value</code> 注解注入单个应用程序参数。</p><h3 id="_10-使用-applicationrunner-或者-commandlinerunner" tabindex="-1"><a class="header-anchor" href="#_10-使用-applicationrunner-或者-commandlinerunner" aria-hidden="true">#</a> 10.使用 ApplicationRunner 或者 CommandLineRunner</h3><p>如果需要在 <code>SpringApplication</code> 启动后运行一些特定的代码，可以实现 <code>ApplicationRunner</code> 或 <code>CommandLineRunner</code> 接口。这两个接口以相同的方式工作，并提供一个单独的 <code>run</code> 方法，该方法在 <code>SpringApplication.run(…)</code> 完成之前被调用。</p><p><strong>注意</strong>：</p><p>此约定非常适合在应用程序启动后但在开始接受流量之前运行的任务。</p><p><code>CommandLineRunner</code> 接口提供对应用程序参数的字符串数组访问，而 <code>ApplicationRunner</code> 使用前面讨论的 <code>ApplicationArguments</code> 接口。下面的例子显示了一个带有 <code>run</code> 方法的 <code>CommandLineRunner</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandLineRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Do something...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果定义了几个必须按特定顺序调用的 <code>CommandLineRunner</code> 或 <code>ApplicationRunner</code> bean，则可以另外实现 <code>org.springframework.core.Ordered</code> 接口或使用 <code>org.springframework.core.annotation.Order</code> 注解。</p><h3 id="_11-应用程序退出" tabindex="-1"><a class="header-anchor" href="#_11-应用程序退出" aria-hidden="true">#</a> 11.应用程序退出</h3><p>每个 <code>SpringApplication</code> 都向 JVM 注册一个关闭钩子，以确保 <code>ApplicationContext</code> 在退出时正常关闭。所有标准的 Spring 生命周期回调(如 <code>DisposableBean</code> 接口或 <code>@PreDestroy</code> 注解)都可以使用。</p><p>此外，如果 bean 希望在调用 <code>SpringApplication.exit()</code> 时返回特定的退出码，它们可以实现 <code>org.springframework.boot.ExitCodeGenerator</code> 接口。然后，这个退出码可以传递给 <code>System.exit()</code> 以状态码的形式返回，如下例所示:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ExitCodeGenerator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ExitCodeGenerator</span> <span class="token function">exitCodeGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Connected to the target VM, address: &#39;127.0.0.1:61941&#39;, transport: &#39;socket&#39;
....
Disconnected from the target VM, address: &#39;127.0.0.1:61941&#39;, transport: &#39;socket&#39;

Process finished with exit code 42
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<code>ExitCodeGenerator</code> 接口可以通过异常实现。当遇到这样的异常时，Spring Boot 返回由已实现的 <code>getExitCode()</code> 方法提供的退出码。</p><p>如果存在多个 <code>ExitCodeGenerator</code>，则使用生成的第一个非零退出代码。要控制调用生成器的顺序，请另外实现 <code>org.springframework.core.Ordered</code> 接口或使用 <code>org.springframework.core.annotation.Order</code> 注解。</p><h3 id="_12-管理功能" tabindex="-1"><a class="header-anchor" href="#_12-管理功能" aria-hidden="true">#</a> 12.管理功能</h3><p>可以通过指定 <code>spring.application.admin.enabled</code> 属性。这将在 <code>MBeanServer</code> 平台上公开 <code>SpringApplicationAdminMXBean</code>。可以使用此功能远程管理 Spring Boot 应用程序。这个特性对于任何服务包装器实现都很有用。</p><p><code>TIP</code>：</p><p>如果想知道应用程序正在哪个 HTTP 端口上运行，请使用 <code>local.server.port</code> 键获取属性。如下有三种方式，准确来说是两种，前两种是同一种方式。</p><ul><li>通过注解 <code>@LocalServerPort</code> 获取</li><li>通过注解 <code>@Value</code> 获取</li><li>通过 <code>Environment</code> 获取</li></ul><p>MyBean.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">LocalServerPort</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Environment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 端口号：方式一（注解方式，已被遗弃，底层其实使用方式二这种方式）
     */</span>
    <span class="token annotation punctuation">@LocalServerPort</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port1<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 端口号：方式二（使用@Value方式）
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${local.server.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port2<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 端口号：方式三（使用Environment方式）
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取端口
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;方式一（注解方式，已被遗弃），port -&gt; {}&quot;</span><span class="token punctuation">,</span> port1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;方式二（使用@Value方式），port -&gt; {}&quot;</span><span class="token punctuation">,</span> port2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;方式三（使用Environment方式），port -&gt; {}&quot;</span><span class="token punctuation">,</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;local.server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyApplication.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">MyBean</span> myBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myBean<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-应用程序启动跟踪" tabindex="-1"><a class="header-anchor" href="#_13-应用程序启动跟踪" aria-hidden="true">#</a> 13.应用程序启动跟踪</h3><p>在应用程序启动期间，<code>SpringApplication</code> 和 <code>ApplicationContext</code> 执行许多与应用程序生命周期、bean 生命周期甚至处理应用程序事件相关的任务。使用 <code>ApplicationStartup</code> ，Spring Framework 允许使用 <code>StartupStep</code> 对象跟踪应用程序启动顺序。收集这些数据可以用于分析目的，或者只是为了更好地了解应用程序启动过程。</p><p>在设置 <code>SpringApplication</code> 实例时，可以选择 <code>ApplicationStartup</code> 实现。例如，要使用 <code>BufferingApplicationStartup</code>，可以编写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>buffering<span class="token punctuation">.</span></span><span class="token class-name">BufferingApplicationStartup</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">setApplicationStartup</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferingApplicationStartup</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个可用的实现 <code>FlightRecorderApplicationStartup</code> 由 Spring 框架提供。它将特定于 Spring 的启动事件添加到 Java Flight Recorder 会话中，用于分析应用程序并将其 Spring 上下文生命周期与 JVM 事件（如分配、GC、类加载…）关联起来。配置后，您可以在启用飞行记录器的情况下运行应用程序来记录数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> -XX:StartFlightRecording:filename<span class="token operator">=</span>recording.jfr,duration<span class="token operator">=</span>10s <span class="token parameter variable">-jar</span> demo.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,86),q={href:"https://access.redhat.com/documentation/zh-cn/openjdk/11/html/using_jdk_flight_recorder_with_openjdk/index",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,[a("Spring Boot 附带了 "),n("code",null,"BufferingApplicationStartup"),a(" 变体；该实现用于缓冲启动步骤并将其排入外部指标系统。应用程序可以在任何组件中请求 "),n("code",null,"BufferingApplicationStartup"),a(" 类型的 Bean。Spring Boot 还可以配置为公开一个启动端点，该端点将此信息作为 JSON 文档提供。")],-1);function z(V,$){const s=c("ExternalLinkIcon");return o(),i("div",null,[d,n("table",null,[k,n("tbody",null,[m,v,g,b,n("tr",null,[n("td",null,[a("${"),n("a",_,[a("Ansi.NAME"),e(s)]),a("} (或者 "),f,a("{"),n("a",y,[a("AnsiBackground.NAME"),e(s)]),a("}, ${"),n("a",h,[a("AnsiStyle.NAME"),e(s)]),a("})")]),A]),w])]),S,n("ul",null,[n("li",null,[n("p",null,[n("a",x,[a("ASCII Generator"),e(s)])])]),n("li",null,[n("p",null,[n("a",C,[a("Ascii Text / Signature Generator"),e(s)])])]),n("li",null,[n("p",null,[n("a",B,[a("Text to ASCII Art Generator (TAAG)"),e(s)])])]),n("li",null,[n("p",null,[n("a",I,[a("Spring Boot banner在线生成工具，制作下载banner.txt，修改替换banner.txt文字实现自定义，个性化启动banner"),e(s)])])])]),N,n("p",null,[a("有关配置选项的完整列表，请参阅 "),n("a",L,[a("SpringApplication Javadoc"),e(s)]),a(" 。")]),E,n("p",null,[a("创建 "),M,a(" 层次结构时有一些限制。例如，Web 组件"),O,a("包含在子上下文中，并且父上下文和子上下文使用相同的 "),F,a(" 。详见 "),n("a",j,[a("SpringApplicationBuilder Javadoc"),e(s)]),a(" 。")]),T,n("p",null,[a("在平台上部署时，应用程序可以使用 "),n("a",P,[a("Kubernetes Probes"),e(s)]),a(" 等基础设施向平台提供关于其可用性的信息。SpringBoot 包括对常用的 “活跃” 和 “就绪” 可用性状态的开箱即用支持。如果正在使用 SpringBoot 的 “actuator” 支持，那么这些状态将作为运行状况端点组公开。")]),R,n("p",null,[a("JFR 详细使用指南，参考 "),n("a",q,[a("在 OpenJDK 中使用 JDK Flight Recorder"),e(s)])]),W])}const G=p(u,[["render",z],["__file","spring-application.html.vue"]]);export{G as default};
