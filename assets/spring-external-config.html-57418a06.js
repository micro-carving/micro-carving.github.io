const e=JSON.parse('{"key":"v-9b8072f8","path":"/guide/framework/spring-all/spring-external-config.html","title":"外部化配置","lang":"zh-CN","frontmatter":{"title":"外部化配置","icon":"leaf","order":3,"sticky":true,"star":true,"date":"2023-02-16T00:00:00.000Z","category":["spring-all"],"tag":["编程","SpringBoot 框架"],"description":"外部化配置（Externalized Configuration） Spring Boot 允许将配置外部化，方便在不同的环境中使用相同的应用程序代码。你可以使用各种外部配置源，包括 Java 配置文件、YAML 文件、环境变量和命令行参数。 属性值可以使用 @Value 注解直接注入到 bean 中，通过 Spring 的 Environment 抽象访问，或者通过 @ConfigurationProperties 绑定到结构化对象。 Spring Boot 使用了一个非常特殊的 PropertySource 顺序，旨在允许合理地重写值。以后的属性源可以替代以前的属性源中定义的值。信息来源按以下顺序考虑：","head":[["meta",{"property":"og:url","content":"https://olinonee.com/./guide/framework/spring-all/spring-external-config.html"}],["meta",{"property":"og:site_name","content":"字节微雕"}],["meta",{"property":"og:title","content":"外部化配置"}],["meta",{"property":"og:description","content":"外部化配置（Externalized Configuration） Spring Boot 允许将配置外部化，方便在不同的环境中使用相同的应用程序代码。你可以使用各种外部配置源，包括 Java 配置文件、YAML 文件、环境变量和命令行参数。 属性值可以使用 @Value 注解直接注入到 bean 中，通过 Spring 的 Environment 抽象访问，或者通过 @ConfigurationProperties 绑定到结构化对象。 Spring Boot 使用了一个非常特殊的 PropertySource 顺序，旨在允许合理地重写值。以后的属性源可以替代以前的属性源中定义的值。信息来源按以下顺序考虑："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://olinonee.com/./"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-05T12:34:04.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"外部化配置"}],["meta",{"property":"article:tag","content":"编程"}],["meta",{"property":"article:tag","content":"SpringBoot 框架"}],["meta",{"property":"article:published_time","content":"2023-02-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-05T12:34:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外部化配置\\",\\"image\\":[\\"https://olinonee.com/./\\"],\\"datePublished\\":\\"2023-02-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-05T12:34:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"外部化配置（Externalized Configuration）","slug":"外部化配置-externalized-configuration","link":"#外部化配置-externalized-configuration","children":[{"level":3,"title":"1.访问命令行属性","slug":"_1-访问命令行属性","link":"#_1-访问命令行属性","children":[]},{"level":3,"title":"2.JSON 应用程序属性","slug":"_2-json-应用程序属性","link":"#_2-json-应用程序属性","children":[]},{"level":3,"title":"3.外部应用程序属性","slug":"_3-外部应用程序属性","link":"#_3-外部应用程序属性","children":[]},{"level":3,"title":"4.加密属性","slug":"_4-加密属性","link":"#_4-加密属性","children":[]},{"level":3,"title":"5.使用 YAML","slug":"_5-使用-yaml","link":"#_5-使用-yaml","children":[]},{"level":3,"title":"6.配置随机值","slug":"_6-配置随机值","link":"#_6-配置随机值","children":[]},{"level":3,"title":"7.配置系统环境属性","slug":"_7-配置系统环境属性","link":"#_7-配置系统环境属性","children":[]},{"level":3,"title":"8.类型安全配置属性","slug":"_8-类型安全配置属性","link":"#_8-类型安全配置属性","children":[]}]}],"git":{"createdTime":1688560444000,"updatedTime":1688560444000,"contributors":[{"name":"olinonee","email":"olinone666@gmail.com","commits":1}]},"readingTime":{"minutes":37.84,"words":11351},"filePathRelative":"guide/framework/spring-all/spring-external-config.md","localizedDate":"2023年2月16日","excerpt":"<h2> 外部化配置（Externalized Configuration）</h2>\\n<p>Spring Boot 允许将配置外部化，方便在不同的环境中使用相同的应用程序代码。你可以使用各种外部配置源，包括 Java 配置文件、YAML 文件、环境变量和命令行参数。\\n属性值可以使用 <code>@Value</code> 注解直接注入到 bean 中，通过 Spring 的 <code>Environment</code> 抽象访问，或者通过 <code>@ConfigurationProperties</code> 绑定到结构化对象。</p>\\n<p>Spring Boot 使用了一个非常特殊的 <code>PropertySource</code> 顺序，旨在允许合理地重写值。以后的属性源可以替代以前的属性源中定义的值。信息来源按以下顺序考虑：</p>","autoDesc":true}');export{e as data};
