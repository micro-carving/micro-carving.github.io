import{_ as t,W as o,X as c,Y as s,Z as n,$ as e,a1 as p,C as i}from"./framework-158a71b3.js";const l="/assets/idea-spring-startup-config-8cdf6672.png",u={},r=p(`<h2 id="外部化配置-externalized-configuration" tabindex="-1"><a class="header-anchor" href="#外部化配置-externalized-configuration" aria-hidden="true">#</a> 外部化配置（Externalized Configuration）</h2><p>Spring Boot 允许将配置外部化，方便在不同的环境中使用相同的应用程序代码。你可以使用各种外部配置源，包括 Java 配置文件、YAML 文件、环境变量和命令行参数。 属性值可以使用 <code>@Value</code> 注解直接注入到 bean 中，通过 Spring 的 <code>Environment</code> 抽象访问，或者通过 <code>@ConfigurationProperties</code> 绑定到结构化对象。</p><p>Spring Boot 使用了一个非常特殊的 <code>PropertySource</code> 顺序，旨在允许合理地重写值。以后的属性源可以替代以前的属性源中定义的值。信息来源按以下顺序考虑：</p><ol><li>默认属性(通过设置 <code>SpringApplication.setDefaultProperties</code> 指定)；</li><li><code>@PropertySource</code> 注解注释在你的 <code>@Configuration</code> 配置类上。请注意，在刷新应用程序上下文之前，此类属性源不会添加到环境中。现在配置某些属性为时已晚，例如 <code>logging.*</code> 和 <code>spring.main.*</code>，它们是在刷新开始之前读取的；</li><li>配置数据(例如 <code>application.properties</code> 文件)；</li><li><code>RandomValuePropertySource</code> 只在 <code>random.*</code> 中有属性；</li><li>操作系统环境变量；</li><li>Java 系统属性(<code>System.getProperties()</code>)；</li><li>来自 <code>java:comp/env</code> 的 JNDI 属性；</li><li><code>ServletContext</code> 初始化参数；</li><li><code>ServletConfig</code> 初始化参数；</li><li><code>SPRING_APPLICATION_JSON</code> 的属性(内嵌在环境变量或系统属性中的内联 JSON)；</li><li>命令行参数；</li><li>在你的测试上的 <code>properties</code> 属性，在 <code>@SpringBootTest</code> 和测试注解中可用，用于测试应用程序的特定部分；</li><li>用于你的测试类 <code>@TestPropertySource</code> 注解；</li><li>当 DevTools 处于活动状态时，<code>$HOME/.config/spring-boot</code> 目录中的 DevTools 全局设置属性。</li></ol><p>配置数据文件按以下顺序考虑：</p><ol><li>打包在 JAR 中的应用程序属性(application.properties 和 YAML 变体)；</li><li>打包在 JAR 中的特定于配置文件的应用程序属性(application-{profile}.properties 和 YAML 变体)；</li><li>打包在 JAR 之外的应用程序属性(application.properties 和 YAML 变体)；</li><li>打包在 JAR 之外的特定于配置文件的应用程序属性(application-{profile}.properties 和 YAML 变体)；</li></ol><p><strong>注意</strong>：</p><p>对于整个应用程序，建议坚持使用一种格式。如果在同一位置具有同时具有 <code>.properties</code> 和 <code>.yml</code> 格式的配置文件，则 <code>.properties</code> 优先。</p><p>为了提供一个具体的示例，假设开发了一个使用 <code>name</code> 属性的 <code>@Component</code>，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在应用程序类路径上（例如，在 jar 中），可以有一个 <code>application.properties</code> 文件，该文件为 name 提供合理的默认属性值。在新环境中运行时，可以在 jar 外部提供 <code>application.properties</code> 文件来覆盖 <code>name</code> 值。对于一次性测试，可以使用特定的命令行开关启动（例如，<code>java -jar app.jar --name=&quot;Spring&quot;</code>）。</p><p><strong>application.yml</strong>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> springboot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行启动配置如下图所示：</p><figure><img src="`+l+`" alt="idea启动配置" tabindex="0" loading="lazy"><figcaption>idea启动配置</figcaption></figure><p>控制台输出内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...
2023-02-20 11:53:37.123  INFO 14740 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
2023-02-20 11:53:37.130  INFO 14740 --- [           main] c.o.s.core.externalconfig.MyApplication  : Started MyApplication in 0.959 seconds (JVM running for 1.611)
name：spring
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p><code>env</code> 和 <code>configprops</code> 端点在确定属性为何具有特定值时非常有用。可以使用这两个端点诊断意外的属性值。</p><h3 id="_1-访问命令行属性" tabindex="-1"><a class="header-anchor" href="#_1-访问命令行属性" aria-hidden="true">#</a> 1.访问命令行属性</h3><p>默认情况下，<code>SpringApplication</code> 将任何命令行选项参数（即以 <code>--</code> 开头的参数，例如 <code>--server.port=9000</code>）转换为 <code>property</code>，并将其添加到 Spring <code>Environment</code> 中。如前所述，命令行属性始终优先于基于文件的属性源。</p><p>如果不希望将命令行属性添加到 <code>Environment</code> 中，可以禁用它们。通过使用 <code>SpringApplication.setAddCommandLineProperties(false)</code>。如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SpringApplication</span> springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 禁用命令行参数</span>
        springApplication<span class="token punctuation">.</span><span class="token function">setAddCommandLineProperties</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-json-应用程序属性" tabindex="-1"><a class="header-anchor" href="#_2-json-应用程序属性" aria-hidden="true">#</a> 2.JSON 应用程序属性</h3><p>环境变量和系统属性通常有一些限制，这意味着某些属性名称不能使用。为了帮助实现这一点，Spring Boot 允许将属性块编码到单个 JSON 结构中。</p><p>当应用程序启动时，任何 <code>spring.application.json</code> 或 <code>SPRING_APPLICATION_JSON</code> 属性都将被解析并添加到 Environment 中。</p><p>例如，<code>SPRING_APPLICATION_JSON</code> 属性可以在 UN*X shell 的命令行中作为环境变量提供：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token assign-left variable">SPRING_APPLICATION_JSON</span><span class="token operator">=</span><span class="token string">&#39;{&quot;my&quot;:{&quot;name&quot;:&quot;test&quot;}}&#39;</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> myapp.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在前面的例子中，在 Spring <code>Environment</code> 中得到 <code>my.name=test</code>。</p><p>同样的 JSON 也可以作为系统属性提供：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-Dspring.application.json</span><span class="token operator">=</span><span class="token string">&#39;{&quot;my&quot;:{&quot;name&quot;:&quot;test&quot;}}&#39;</span> <span class="token parameter variable">-jar</span> myapp.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者你可以使用命令行参数来提供 JSON：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myapp.jar <span class="token parameter variable">--spring.application.json</span><span class="token operator">=</span><span class="token string">&#39;{&quot;my&quot;:{&quot;name&quot;:&quot;test&quot;}}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要部署到经典的应用程序服务器，还可以使用名为 <code>java:comp/env/spring.application.json</code> 的 JNDI 变量。</p><p><strong>注意</strong>：</p><p>尽管来自 JSON 的 null 值将被添加到结果属性源，但 <code>PropertySourcesPropertyResolver</code> 将 null 属性视为缺少的值。这意味着 JSON 不能用 null 值覆盖来自低级属性源的属性。</p><h3 id="_3-外部应用程序属性" tabindex="-1"><a class="header-anchor" href="#_3-外部应用程序属性" aria-hidden="true">#</a> 3.外部应用程序属性</h3><p>当应用程序启动时，Spring Boot 将自动从以下位置查找并加载 <code>application.properties</code> 和 <code>application.yaml</code> 文件：</p><ol><li><p>类路径</p><p>a. 类路径根</p><p>b. 类路径 <code>/config</code> 包</p></li><li><p>当前目录</p><p>a. 当前目录</p><p>b. 当前目录下的 <code>config/</code> 子目录</p><p>c. <code>config/</code> 子目录的直接子目录</p></li></ol><p>列表按优先级排序（来自较低项的值覆盖较早的项）。加载文件中的文档作为 <code>PropertySources</code> 添加到 Spring <code>Environment</code> 中。</p><p>如果你不喜欢将 <code>application</code> 作为配置文件名，可以通过指定 <code>spring.config.name</code> 环境属性来切换到其他文件名。例如，要查找 <code>myproject.properties</code> 和 <code>myproject.yaml</code> 文件，可以按如下方式运行应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject.jar <span class="token parameter variable">--spring.config.name</span><span class="token operator">=</span>myproject
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以使用 <code>spring.config.location</code> 环境属性来引用显式位置。此属性接受一个或多个要检查的位置的逗号分隔列表。</p><p>以下示例显示了如何指定两个不同的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject.jar <span class="token parameter variable">--spring.config.location</span><span class="token operator">=</span><span class="token punctuation">\\</span>
  optional:classpath:/default.properties,<span class="token punctuation">\\</span>
  optional:classpath:/override.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>使用 <code>optional</code> 前缀：如果位置是可选的，并且不介意它们是否存在。</p><p><strong>警告</strong>：</p><p>很早就使用 <code>spring.config.name</code>、<code>spring.config.location</code> 和 <code>spring.config.additional-location</code> 来确定必须加载哪些文件。它们必须定义为环境属性（通常是 OS 环境变量、系统属性或命令行参数）。</p><p>如果 <code>spring.config.location</code> 包含目录（而不是文件），它们应该以 <code>/</code> 结尾。在运行时，它们将在加载之前附加从 <code>spring.config.name</code> 生成的名称。直接导入 <code>spring.config.location</code> 中指定的文件。</p><p><strong>注意</strong>：</p><p>目录和文件位置值也被展开，以检查特定于概要文件的文件。例如，如果你有一个 <code>classpath:myconfig.properties</code> 的 <code>spring.config.location</code> ，还将找到适当的 <code>classpath:myconfig-&lt;profile&gt;.properties</code> 加载文件。</p><p>在大多数情况下，你添加的每个 <code>spring.config.location</code> 项都将引用单个文件或目录。位置按照定义的顺序进行处理，后一个位置可以覆盖前一个位置的值。</p><p>如果有一个复杂的位置要设置，并且使用特定于配置的配置文件，可能需要提供进一步的提示，以便 Spring Boot 知道它们应该如何分组。位置组是一组位置，这些位置都被视为处于同一级别。例如，可能希望对所有类路径位置进行分组，然后对所有外部位置进行分组。位置组中的项目应以 &quot;;&quot; 分隔。</p><p>使用 <code>spring.config.location</code> 配置的位置将替换默认位置。例如，如果 <code>spring.config.location</code> 配置值为 <code>optional:classpath:/custom-config/,optional:file:./custom-config/</code>，则考虑的完整位置集为：</p><ol><li><code>optional:classpath:custom-config/</code></li><li><code>optional:file:./custom-config/</code></li></ol><p>如果希望添加其他位置而不是替换它们，可以使用 <code>spring.config.additional-location</code> 。从其他位置加载的属性可以覆盖默认位置中的属性。例如，如果 <code>spring.config.additional-location</code> 配置了 <code>optional:classpath:/custom-config/,optional:file:./custom-config/</code>，考虑的完整位置集是：</p><ol><li><code>optional:classpath:/;optional:classpath:/config/</code></li><li><code>optional:file:./;optional:file:./config/;optional:file:./config/*/</code></li><li><code>optional:classpath:custom-config/</code></li><li><code>optional:file:./custom-config/</code></li></ol><p>这种搜索顺序允许你在一个配置文件中指定默认值，然后选择性地覆盖另一个配置中的这些值。可以在其中一个默认位置的 <code>application.properties</code>（或使用 <code>spring.config.name</code> 选择的任何其他基本名称）中为应用程序提供默认值。然后，可以在运行时使用位于其中一个自定义位置的不同文件覆盖这些默认值。</p><p><strong>注意</strong>：</p><p>如果你使用环境变量而不是系统属性，则大多数操作系统不允许使用句点分隔的键名，但可以使用下划线(例如，<code>SPRING_CONFIG_NAME</code> 而不是 <code>spring.config.name</code>)。</p><p><strong>注意</strong>：</p><p>如果你的应用程序在 Servlet 容器或应用程序服务器中运行，则可以使用 JNDI 属性(在 <code>java:comp/env</code> 中)或 Servlet 上下文初始化参数来代替环境变量或系统属性。</p><h4 id="可选位置" tabindex="-1"><a class="header-anchor" href="#可选位置" aria-hidden="true">#</a> 可选位置</h4><p>默认情况下，当指定的配置数据位置不存在时，Spring Boot 将抛出 <code>ConfigDataLocationNotFoundException</code> 异常并且应用程序将无法启动。</p><p>如果想指定一个位置，但不介意它是否总是存在，可以使用 <code>optional:</code> 前缀。可以在 <code>spring.config.location</code> 和 <code>spring.config.additional-location</code> 属性，以及 <code>spring.config.import</code> 声明。</p><p>例如，<code>spring.config.import</code> 值为 <code>optional:file:/myconfig.properties</code> 允许应用程序启动，即使 <code>myconfig.properties</code> 文件丢失也是如此。如下例所示：</p><p><strong>application.yml</strong>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> optional<span class="token punctuation">:</span>/myconfig.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要忽略所有 <code>ConfigDataLocationNotFoundExceptions</code> 并始终继续启动应用程序，可以使用 <code>spring.config.on-not-found</code> 属性。使用 <code>SpringApplication.setDefaultProperties(…)</code> 或使用系统/环境变量设置要忽略的值。</p><h4 id="通配符位置" tabindex="-1"><a class="header-anchor" href="#通配符位置" aria-hidden="true">#</a> 通配符位置</h4><p>如果配置文件位置包含最后一个路径段的 <code>*</code> 字符，则将其视为通配符位置。加载配置时会展开通配符，以便也会检查直接子目录。当存在多个配置属性源时，通配符位置在Kubernetes等环境中特别有用。</p><p>例如，如果有一些 Redis 配置和一些 MySQL 配置，可能需要保持这两种配置的分离，同时要求 <code>application.properties</code> 文件。这可能会导致两个单独的 <code>application.properties</code> 文件。安装在不同的位置，如 <code>/config/redis/application.properties</code> 和 <code>/config/mysql/application.properties</code>。在这种情况下，通配符位置为 <code>config/*/</code> ，将导致两个文件都被处理。</p><p>默认情况下，Spring Boot 在默认搜索位置包含 <code>config/*/</code>。这意味着将搜索 jar 之外的 <code>/config</code> 目录的所有子目录。</p><p>可以将通配符位置与 <code>spring.config.location</code> 和 <code>spring.config.additional-location</code> 属性一起使用。</p><p><strong>注意</strong>：</p><p>通配符位置只能包含一个 <code>*</code>，对于目录搜索位置，必须以 <code>*/</code> 结尾，对于文件搜索位置，则必须以 <code>*/&lt;filename&gt;</code> 结尾。带有通配符的位置根据文件名的绝对路径按字母顺序排序。</p><p><strong>TIP</strong>：</p><p>通配符位置仅适用于外部目录。不能在 <code>classpath:</code> 位置中使用通配符。</p><h4 id="配置特定文件" tabindex="-1"><a class="header-anchor" href="#配置特定文件" aria-hidden="true">#</a> 配置特定文件</h4><p>除了应用程序属性文件之外，Spring Boot 还将尝试使用命名约定 <code>application-{profile}</code> 加载特定配置文件。例如，如果应用程序激活名为 <code>prod</code> 的配置文件并使用 YAML 文件，那么将同时考虑 <code>application.yml</code> 和 <code>application-prod.yml</code>。</p><p>特定配置文件的属性从与标准 <code>application.properties</code> 相同的位置加载，特定配置文件总是覆盖非特定的文件。如果指定了多个配置文件，则采用最后获胜策略。例如，如果配置文件 <code>prod,live</code> 由 <code>spring.profiles.active</code> 属性指定 ，<code>application-prod.properties</code> 中的值可以被 <code>application-live.properties</code> 中的值覆盖。</p><p><strong>注意</strong>：</p><p>最后获胜策略应用于位置组级别。<code>classpath:/cfg/,classpath:/ext/</code> 的 <code>spring.config.location</code> 不会有与 <code>classpath:/cfg/;classpath:/ext/</code> 相同的重写规则。</p><p>例如，继续上面的 <code>prod,live</code> 示例，我们可能有以下文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/cfg
    application-live.properties
/ext
    application-live.properties
    application-prod.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们有 <code>classpath:/cfg/,classpath/ext/we</code> 的 <code>spring.config.Location</code> 时。先处理所有 <code>/cfg</code> 文件，然后处理所有 <code>/ext</code> 文件：</p><ol><li><code>/cfg/application-live.properties</code></li><li><code>/ext/application-prod.properties</code></li><li><code>/ext/application-live.properties</code></li></ol><p>当我们有 <code>classpath:/cfg/;classpath:/ext/</code> 时（带有 ; 分隔符）我们在同一级别上处理 <code>/cfg</code> 和 <code>/ext</code>：</p><ol><li><code>/ext/application-prod.properties</code></li><li><code>/cfg/application-live.properties</code></li><li><code>/ext/application-live.properties</code></li></ol><p><code>Environment</code> 具有一组默认配置文件（默认情况下为 <code>[default]</code>），如果未设置活动配置文件，则使用这些配置文件。换句话说，如果没有显式激活配置文件，那么将考虑 <code>application-default</code> 属性。</p><p><strong>注意</strong>：</p><p>属性文件只加载一次。 如果已经直接导入了特定配置文件的属性文件，则不会再次导入。</p><h4 id="导入附加数据" tabindex="-1"><a class="header-anchor" href="#导入附加数据" aria-hidden="true">#</a> 导入附加数据</h4><p>应用程序属性可以使用 <code>spring.config.import</code> 属性从其他位置导入更多配置数据。导入将在发现时进行处理，并被视为插入声明导入的文档下面的附加文档。</p><p>例如，类路径 <code>application.properties</code> 文件中可能包含以下内容：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">myapp</span>
<span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">optional:file:./dev.properties</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;myapp&quot;</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;optional:file:./dev.properties&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将触发当前目录中 <code>dev.properties</code> 文件的导入（如果存在这样的文件）。导入的 <code>dev.properties</code> 中的值将优先于触发导入的文件。在上面的示例中，<code>dev.properties</code> 可以将 <code>spring.application.name</code> 重新定义为不同的值。</p><p>无论声明多少次，导入都只会导入一次。在 properties/yaml 文件中的单个文档中定义导入的顺序并不重要。例如，下面的两个示例产生相同的结果：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">my.properties</span>
<span class="token key attr-name">my.property</span><span class="token punctuation">=</span><span class="token value attr-value">value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;my.properties&quot;</span>
<span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">property</span><span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.property</span><span class="token punctuation">=</span><span class="token value attr-value">value</span>
<span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">my.properties</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">property</span><span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;my.properties&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述两个示例中，<code>my.properties</code> 文件中的值将优先于触发其导入的文件。</p><p>可以在单个 <code>spring.config.import</code> 键下指定多个位置。位置将按照定义的顺序进行处理，后面导入的将优先。</p><p><strong>注意</strong>：</p><p>在适当的时候，也会考虑导入特定配置文件的变量。上面的示例将同时导入 <code>my.properties</code> 和任何 <code>my-&lt;profile&gt;.properties</code> 变量。</p><p><strong>TIP</strong>：</p><p>Spring Boot 包括可插拔API，允许支持各种不同的位置地址。默认情况下，可以导入 Java 属性、YAML和 “配置树”。</p><p>第三方 jar 可以提供对其他技术的支持（不要求文件是本地的）。例如，你可以想象配置数据来自 Consul、Apache ZooKeeper 或 Netflix Archaius 等外部存储。</p><p>如果要支持自己的位置，请查看 <code>org.springframework.boot.context.config</code> 包中的 <code>ConfigDataLocationResolver</code> 和 <code>ConfigDataLoader</code> 类。</p><h4 id="导入无扩展名文件" tabindex="-1"><a class="header-anchor" href="#导入无扩展名文件" aria-hidden="true">#</a> 导入无扩展名文件</h4><p>某些云平台无法向卷装载的文件添加文件扩展名。要导入这些无扩展名文件，您需要给 Spring Boot 一个提示，以便它知道如何加载它们。您可以通过在方括号中放置扩展提示来完成此操作。</p><p>例如，假设您有一个 <code>/etc/config/myconfig</code> 文件，希望将其作为 yaml 导入。你可以使用以下命令从 <code>application.properties</code> 导入它：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">file:/etc/config/myconfig[.yaml]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;file:/etc/config/myconfig[.yaml]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用配置树" tabindex="-1"><a class="header-anchor" href="#使用配置树" aria-hidden="true">#</a> 使用配置树</h4><p>在云平台（如 Kubernetes）上运行应用程序时，通常需要读取平台提供的配置值。出于这种目的使用环境变量并不罕见，但这可能会有缺点，特别是如果值应该保密的话。</p><p>作为环境变量的替代方案，许多云平台现在允许您将配置映射到装载的数据卷中。例如，Kubernetes 可以卷装载 <code>ConfigMaps</code> 和 <code>Secrets</code>。</p><p>可以使用两种常见的卷装载模式：</p><ol><li>一个文件包含一组完整的属性(通常写为 YAML)。</li><li>多个文件被写入目录树，其中文件名成为 “key”，内容成为 “value”。</li></ol><p>对于第一种情况，可以像上面描述的那样直接使用 <code>spring.config.import</code> 导入 YAML 或 Properties 文件。对于第二种情况，需要使用 <code>configtree:</code> 前缀，以便 Spring Boot 知道它需要将所有文件公开为属性。</p><p>作为一个例子，让我们想象 Kubernetes 已经挂载了以下卷:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>etc/
    config/
        myapp/
            username
            password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>username</code> 文件的内容将是一个配置值，<code>password</code> 的内容将是一个秘钥。</p><p>要导入这些属性，你可以将以下内容添加到你的 <code>applation.properties</code> 或 <code>applation.yaml</code>文件中：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">optional:configtree:/etc/config/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;optional:configtree:/etc/config/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，可以按照通常的方式从 <code>Environment</code> 访问或注入 <code>myapp.username</code> 和 <code>myapp.password</code> 属性。</p><p><strong>TIP</strong>：</p><p>配置树下的文件夹构成属性名称。在上述示例中，以 <code>username</code> 和 <code>password</code> 访问属性，可以将 <code>spring.config.import</code> 设置为 <code>optional:configtree:/etc/config/myapp</code>。</p><p><strong>注意</strong>：</p><p>带点符号的文件名也被正确映射。例如，在上面的示例中，<code>/etc/config</code> 中名为 <code>myapp.username</code> 的文件将导致 <code>Environment</code> 中的 <code>myapp.username</code> 属性。</p><p><strong>TIP</strong>：</p><p>配置树值可以绑定到字符串 <code>String</code> 和 <code>byte[]</code> 类型，具体取决于预期的内容。</p><p>如果要从同一父文件夹导入多个配置树，则可以使用通配符快捷方式。任何以 <code>/*/</code> 结尾的 <code>configtree:location</code> 都会将所有直接子级作为配置树导入。</p><p>例如，给定以下卷：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>etc/
    config/
        dbconfig/
            db/
                username
                password
    mqconfig/
        mq/
            username
            password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>configtree:/etc/config/*/</code> 作为导入位置：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">optional:configtree:/etc/config/*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;optional:configtree:/etc/config/*/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将添加 <code>db.username</code>, <code>db.password</code>, <code>mq.username</code> 和 <code>mq.password</code> 属性。</p><p><strong>注意</strong>：</p><p>使用通配符加载的目录按字母顺序排序。如果你需要不同的顺序，则应将每个位置作为单独的导入列出。</p><p>配置树也可以用于 Docker 秘钥。授予 Docker 群服务时访问一个秘钥，该秘钥被装入容器中。例如，如果一个名为 <code>db.password</code> 安装在 <code>/run/secrets/</code> 位置，您可以使 <code>db.password</code> 对 Spring 可用环境，使用以下选项：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">optional:configtree:/run/secrets/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span> <span class="token string">&quot;optional:configtree:/run/secrets/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性占位符" tabindex="-1"><a class="header-anchor" href="#属性占位符" aria-hidden="true">#</a> 属性占位符</h4><p><code>application.properties</code> 和 <code>application.yml</code> 中的值在使用时会通过现有的 <code>Environment</code> 进行过滤，因此可以重新引用以前定义的值(例如，从系统属性或环境变量) 。标准的 <code>\${name}</code> 属性占位符语法可以在值内的任何位置使用。属性占位符还可以使用 <code>:</code> 指定默认值，以将默认值与属性名称分开，例如 <code>\${name:default}</code>。</p><p>以下示例显示了带默认值和不带默认值的占位符的使用：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">app.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span>
<span class="token key attr-name">app.description</span><span class="token punctuation">=</span><span class="token value attr-value">\${app.name} is a Spring Boot application written by \${username:Unknown}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">app</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;MyApp&quot;</span>
  <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;\${app.name} is a Spring Boot application written by \${username:Unknown}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 <code>username</code> 属性没有在其他地方设置，<code>app.description</code> 的值将是 <code>MyApp is a Spring Boot application written by Unknown</code>。</p><p><strong>注意</strong>：</p><p>你应该始终使用占位符中的规范形式（仅使用小写字母的串形写法）引用占位符中的属性名称。这将允许 Spring Boot 使用与放松绑定 <code>@ConfigurationProperties</code> 时相同的逻辑。</p><p>例如，<code>\${demo.item-price}</code> 将从 <code>application.properties</code> 文件中获取 <code>demo.iterm-price</code> 和 <code>demo.itemPrice</code> 形式数据，并从系统环境中获取 <code>DEMO_ITEMPRICE</code>。如果改用 <code>\${demo.itemPrice}</code>，则不会考虑 <code>demo.item-price</code> 和 <code>DEMO_ITEMPRICE</code>。</p><p><strong>TIP</strong>：</p><p>你还可以使用此技术来创建现有 Spring Boot 属性的 “short” 变量。</p><h4 id="使用多文档文件" tabindex="-1"><a class="header-anchor" href="#使用多文档文件" aria-hidden="true">#</a> 使用多文档文件</h4><p>Spring Boot 允许你将单个物理文件拆分为多个逻辑文档，每个逻辑文档都是独立添加的。文档按照从上到下的顺序进行处理。后续文档可以覆盖早期文档中定义的属性。</p><p>对于 <code>application.yml</code> 文件，使用标准的 YAML 多文档语法。三个连续的连字符表示一个文档的结尾和下一个文档开始。</p><p>例如，以下文件包含两个逻辑文档：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;MyApp&quot;</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;MyCloudApp&quot;</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">activate</span><span class="token punctuation">:</span>
      <span class="token key atrule">on-cloud-platform</span><span class="token punctuation">:</span> <span class="token string">&quot;kubernetes&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>application.properties</code> 文件，使用特殊的 <code>#---</code> 或 <code>!---</code> 注释用于标记文档拆分：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span>
<span class="token comment">#---</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyCloudApp</span>
<span class="token key attr-name">spring.config.activate.on-cloud-platform</span><span class="token punctuation">=</span><span class="token value attr-value">kubernetes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>属性文件分隔符不能有任何前导空格，并且必须正好有三个连字符。分隔符前后的行不能是相同的注释前缀。</p><p><strong>TIP</strong>：</p><p>多文档属性文件通常与激活属性（如 <code>spring.config.activate.on-profile</code>）结合使用。</p><p><strong>警告</strong>：</p><p>无法使用 <code>@PropertySource</code> 或 <code>@TestPropertySource</code> 批注加载多文档属性文件。</p><h4 id="激活属性" tabindex="-1"><a class="header-anchor" href="#激活属性" aria-hidden="true">#</a> 激活属性</h4><p>有时，仅在满足某些条件时激活一组给定的属性非常有用。例如，你可能具有仅在特定配置文件处于活动状态时才相关的属性。</p><p>你可以使用 <code>spring.config.activate.*</code> 有条件地激活属性文档。</p><p>以下激活属性可用：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>on-profile</td><td>必须匹配才能激活文档的配置文件表达式。</td></tr><tr><td>on-cloud-platform</td><td>要使文档处于活动状态，必须检测到的CloudPlatform。</td></tr></tbody></table><p>例如，下面指定第二个文档仅在 Kubernetes 上运行时有效，并且仅在 “prod” 或 “staging” 配置文件处于活动状态时有效：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">myprop</span><span class="token punctuation">=</span><span class="token value attr-value">always-set</span>
<span class="token comment">#---</span>
<span class="token key attr-name">spring.config.activate.on-cloud-platform</span><span class="token punctuation">=</span><span class="token value attr-value">kubernetes</span>
<span class="token key attr-name">spring.config.activate.on-profile</span><span class="token punctuation">=</span><span class="token value attr-value">prod | staging</span>
<span class="token key attr-name">myotherprop</span><span class="token punctuation">=</span><span class="token value attr-value">sometimes-set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">myprop</span><span class="token punctuation">:</span>
  <span class="token string">&quot;always-set&quot;</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">activate</span><span class="token punctuation">:</span>
      <span class="token key atrule">on-cloud-platform</span><span class="token punctuation">:</span> <span class="token string">&quot;kubernetes&quot;</span>
      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">&quot;prod | staging&quot;</span>
<span class="token key atrule">myotherprop</span><span class="token punctuation">:</span> <span class="token string">&quot;sometimes-set&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-加密属性" tabindex="-1"><a class="header-anchor" href="#_4-加密属性" aria-hidden="true">#</a> 4.加密属性</h3><p>Spring Boot 不提供任何内置的对加密属性值的支持，但是，它提供了修改 Spring 环境中包含的值所必需的钩子点。EnvironmentPostProcessor 接口允许你在应用程序启动之前操作环境。</p>`,200),d={href:"https://cloud.spring.io/spring-cloud-vault/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.vaultproject.io/",target:"_blank",rel:"noopener noreferrer"},m=s("h3",{id:"_5-使用-yaml",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-使用-yaml","aria-hidden":"true"},"#"),n(" 5.使用 YAML")],-1),v={href:"https://yaml.org",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/snakeyaml/snakeyaml",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"SpringApplication",-1),y=p(`<p><strong>注意</strong>：</p><p>如果你使用 “Starters”，则 <code>spring-boot-starter</code> 会自动提供 SnakeYAML。</p><h4 id="将-yaml-映射到属性" tabindex="-1"><a class="header-anchor" href="#将-yaml-映射到属性" aria-hidden="true">#</a> 将 YAML 映射到属性</h4><p>YAML 文档需要从层次格式转换为可以与 Spring <code>Environment</code> 一起使用的平面结构。例如，考虑以下 YAML 文档:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">environments</span><span class="token punctuation">:</span>
  <span class="token key atrule">dev</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&quot;https://dev.example.com&quot;</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;Developer Setup&quot;</span>
  <span class="token key atrule">prod</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&quot;https://another.example.com&quot;</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;My Cool App&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了从 <code>Environment</code> 访问这些属性，它们将被展开，如下所示：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">environments.dev.url</span><span class="token punctuation">=</span><span class="token value attr-value">https://dev.example.com</span>
<span class="token key attr-name">environments.dev.name</span><span class="token punctuation">=</span><span class="token value attr-value">Developer Setup</span>
<span class="token key attr-name">environments.prod.url</span><span class="token punctuation">=</span><span class="token value attr-value">https://another.example.com</span>
<span class="token key attr-name">environments.prod.name</span><span class="token punctuation">=</span><span class="token value attr-value">My Cool App</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，YAML列表也需要扁平化。它们表示为带有 [index] 的属性键。例如，考虑以下YAML：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">servers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;dev.example.com&quot;</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;another.example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的示例将转换为以下属性：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.servers[0]</span><span class="token punctuation">=</span><span class="token value attr-value">dev.example.com</span>
<span class="token key attr-name">my.servers[1]</span><span class="token punctuation">=</span><span class="token value attr-value">another.example.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>使用 <code>[index]</code> 表示法的属性可以使用 Spring Boot 的 <code>Binder</code> 类绑定到 Java <code>List</code> 或 <code>Set</code> 对象。</p><p><strong>警告</strong>：</p><p>YAML 文件不能通过使用 <code>@PropertySource</code> 或 <code>@TestPropertySource</code> 注解来加载。因此，在需要以这种方式加载值的情况下，需要使用 properties 文件。</p><h4 id="直接加载-yaml" tabindex="-1"><a class="header-anchor" href="#直接加载-yaml" aria-hidden="true">#</a> 直接加载 YAML</h4><p>Spring Framework 提供了两个方便的类，可用于加载 YAML 文档。<code>YamlPropertiesFactoryBean</code> 将 YAML 作为 <code>Properties</code> 加载，<code>YamlMapFactoryBean</code> 将 YAML 作为 <code>Map</code> 加载。</p><p>如果要将 YAML 作为 Spring <code>PropertySource</code> 加载，也可以使用 <code>YamlPropertySourceLoader</code> 类。</p><h3 id="_6-配置随机值" tabindex="-1"><a class="header-anchor" href="#_6-配置随机值" aria-hidden="true">#</a> 6.配置随机值</h3><p><code>RandomValuePropertySource</code> 用于注入随机值（例如，注入秘钥或测试用例）。它可以生成整数、longs、uuids 或字符串，如下例所示：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.secret</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.value}</span>
<span class="token key attr-name">my.number</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int}</span>
<span class="token key attr-name">my.bignumber</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.long}</span>
<span class="token key attr-name">my.uuid</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.uuid}</span>
<span class="token key attr-name">my.number-less-than-ten</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int(10)}</span>
<span class="token key attr-name">my.number-in-range</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int[1024,65536]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">secret</span><span class="token punctuation">:</span> <span class="token string">&quot;\${random.value}&quot;</span>
  <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token string">&quot;\${random.int}&quot;</span>
  <span class="token key atrule">bignumber</span><span class="token punctuation">:</span> <span class="token string">&quot;\${random.long}&quot;</span>
  <span class="token key atrule">uuid</span><span class="token punctuation">:</span> <span class="token string">&quot;\${random.uuid}&quot;</span>
  <span class="token key atrule">number-less-than-ten</span><span class="token punctuation">:</span> <span class="token string">&quot;\${random.int(10)}&quot;</span>
  <span class="token key atrule">number-in-range</span><span class="token punctuation">:</span> <span class="token string">&quot;\${random.int[1024,65536]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>random.int*</code> 语法是 <code>OPEN value (,max) CLOSE</code>，其中 <code>OPEN,CLOSE</code> 是任意字符，并且 <code>value,max</code> 是整数。如果提供了 <code>max</code>，则 <code>value</code> 为最小值，<code>max</code> 为最大值(不包括)。</p><h3 id="_7-配置系统环境属性" tabindex="-1"><a class="header-anchor" href="#_7-配置系统环境属性" aria-hidden="true">#</a> 7.配置系统环境属性</h3><p>Spring Boot 支持为环境属性设置前缀。如果系统环境由多个具有不同配置要求的 Spring Boot 应用程序共享，这将非常有用。可以在 <code>SpringApplication</code> 上直接设置系统环境属性的前缀。</p><p>例如，如果将前缀设置为 <code>input</code>，则 <code>remote.timeout</code> 等属性也将解析为系统环境中的 <code>input.remote.timeout</code>。</p><h3 id="_8-类型安全配置属性" tabindex="-1"><a class="header-anchor" href="#_8-类型安全配置属性" aria-hidden="true">#</a> 8.类型安全配置属性</h3><p>使用 <code>@Value(&quot;\${property}&quot;)</code> 注解来注入配置属性有时会很麻烦，特别是如果你正在处理多个属性，或者你的数据本质上是分层的。Spring Boot 提供了另一种使用属性的方法，该方法允许强类型 bean 管理和验证应用程序的配置。</p><p><strong>TIP</strong>：</p><p>可以查看 <code>@Value</code> 和类型安全配置属性之间的区别。</p><h4 id="javabean-属性绑定" tabindex="-1"><a class="header-anchor" href="#javabean-属性绑定" aria-hidden="true">#</a> JavaBean 属性绑定</h4><p>可以绑定一个 bean 声明标准 JavaBean 属性，如下例所示:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my.service&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Security</span> security <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Security</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enabled<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">InetAddress</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoteAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress <span class="token operator">=</span> remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Security</span> <span class="token function">getSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>security<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Security</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> password<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> roles<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoles</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>roles <span class="token operator">=</span> roles<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的 POJO 定义了以下属性：</p><ul><li><code>my.service.enabled</code>，默认值为 <code>false</code>；</li><li><code>my.service.remote-address</code>，使用可以从 <code>String</code> 强制转换的类型；</li><li><code>my.service.security.username</code>，使用嵌套的 “security” 对象，其名称由属性的名称确定。特别是，这里根本没有使用该类型，可能是 <code>SecurityProperties</code>；</li><li><code>my.service.security.password</code>；</li><li><code>my.service.security.roles</code>，具有默认为 <code>USER</code> 的 <code>String</code> 集合。</li></ul><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">service</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">remote-address</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token key atrule">security</span><span class="token punctuation">:</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span>
      <span class="token key atrule">roles</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> USER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>通过 properties 文件、YAML 文件、环境变量和其他机制配置的映射到 Spring Boot 中可用的 <code>@ConfigurationProperties</code> 类的属性是公共 API，但类本身的访问器( getters/setters)不能直接使用。</p><p>这种安排依赖于默认的空构造函数，getter 和 setter 通常是强制性的，因为绑定是通过标准的 JavaBeans 属性描述符进行的，就像在 SpringMVC 中一样。在下列情况下，可以省略设置器：</p><ul><li>Maps，只要它们被初始化，就需要一个 getter，但不一定需要一个 setter，因为它们可以被绑定器改变；</li><li>可以通过索引(通常使用 YAML)或使用单个逗号分隔值(属性)访问集合和数组。在后一种情况下，必须使用 setter。我们建议始终为这类类型添加 setter。如果初始化集合，请确保它不是不可变的(如上例所示)；</li><li>如果初始化了嵌套的 POJO 属性(如上例中的 <code>Security</code> 字段)，则不需要 setter。如果希望绑定器创建实例。通过使用它的默认构造函数，你需要一个 setter。</li></ul><p>有些人使用 Project Lombok 自动添加 getter 和 setter。确保 Lombok 不会为这种类型生成任何特定的构造函数，因为容器会自动使用它来实例化对象。</p><p>最后，只考虑标准的 Java Bean 属性，不支持绑定静态属性。</p><h4 id="构造函数绑定" tabindex="-1"><a class="header-anchor" href="#构造函数绑定" aria-hidden="true">#</a> 构造函数绑定</h4><p>上一节中的示例可以以不可变的方式重写，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConstructorBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">DefaultValue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConstructorBinding</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my.service&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Security</span> security<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyProperties</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token class-name">Security</span> security<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress <span class="token operator">=</span> remoteAddress<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>security <span class="token operator">=</span> security<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enabled<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">InetAddress</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Security</span> <span class="token function">getSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>security<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Security</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Security</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token annotation punctuation">@DefaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>roles <span class="token operator">=</span> roles<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>roles<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此设置中，<code>@ConstructorBinding</code> 注解用于指示应使用构造函数绑定。这意味着绑定器将期望找到一个具有你希望绑定的参数的构造函数。如果你使用的是 Java16 或更高版本，则可以对记录使用构造函数绑定。在这种情况下，除非记录有多个构造函数，否则不需要使用 <code>@ConstructorBinding</code>。</p><p><code>@ConstructorBinding</code> 类的嵌套成员（例如上面示例中的 Security）也将通过其构造函数绑定。</p><p>默认值可以在构造函数参数上使用 <code>@DefaultValue</code> 指定，或者在使用 Java 16 或更高版本时使用记录组件指定。转换服务将应用于将 <code>String</code> 值强制转换为缺失属性的目标类型。</p><p>参考前面的示例，如果没有属性绑定到 <code>Security</code>, <code>MyProperties</code> 实例将包含一个用于安全性的 <code>null</code> 值。为了使它包含一个非空的 <code>Security</code> 实例，即使没有属性绑定到它(在使用 Kotlin 时，这将要求 <code>Security</code> 的 <code>username</code> 和 <code>password</code> 参数被声明为空，因为它们没有默认值)，使用一个空的 <code>@DefaultValue</code> 注解:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MyProperties</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">,</span><span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">,</span><span class="token annotation punctuation">@DefaultValue</span> <span class="token class-name">Security</span> security<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled<span class="token operator">=</span>enabled<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress<span class="token operator">=</span>remoteAddress<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>security<span class="token operator">=</span>security<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>要使用构造函数绑定，必须使用 <code>@EnableConfigurationProperties</code> 或配置属性扫描来启用类。不能对由常规 Spring 机制创建的 bean 使用构造函数绑定（例如 <code>@Component</code> Bean、使用 <code>@Bean</code> 方法创建的 Bean 或使用 <code>@Import</code> 加载的 Bean）</p><p><strong>TIP</strong>：</p><p>如果你的类有多个构造函数，你也可以在应该绑定的构造函数上直接使用 <code>@ConstructorBinding</code>。</p><p><strong>注意</strong>：</p><p>不建议 <code>java.util.Optional</code> 与 <code>@ConfigurationProperties</code> 一起使用，因为它主要用于作为返回类型。因此，它不太适合配置属性注入。为了与其他类型的属性保持一致，如果你声明了一个 <code>Optional</code> 属性并且它没有值，那么将绑定 <code>null</code> 而不是空的 <code>Optional</code>。</p><h4 id="启用-configurationproperties-注解类型" tabindex="-1"><a class="header-anchor" href="#启用-configurationproperties-注解类型" aria-hidden="true">#</a> 启用 @ConfigurationProperties 注解类型</h4><p>Spring Boot 提供了绑定 <code>@ConfigurationProperties</code> 类型并将它们注册为 Bean 的基础设施。你可以逐个类地启用配置属性，也可以启用与组件扫描类似的配置属性扫描。</p><p>有时，用 <code>@ConfigurationProperties</code> 注释的类可能不适合扫描，例如，如果你正在开发自己的自动配置或希望有条件地启用它们。在这些情况下，使用 <code>@EnableConfigurationProperties</code> 注解指定要处理的类型列表。这可以在任何 <code>@Configuration</code> 类上完成，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">SomeProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用配置属性扫描，请将 <code>@ConfigurationPropertiesScan</code> 注解添加到应用程序中。通常，它被添加到用 <code>@SpringBootApplication</code> 注解的主应用程序类中，但也可以添加到任何 <code>@Configuration</code> 类中。默认情况下，扫描将从声明注解的类的包中进行。如果要定义特定的要扫描的包，可以按以下示例所示进行扫描：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationPropertiesScan</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@ConfigurationPropertiesScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;com.example.app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;com.example.another&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>当使用配置属性扫描或通过 <code>@EnableConfigurationProperties</code> 注册 <code>@ConfigurationProperties</code> bean 时，bean 具有常规名称：<code>&lt;prefix&gt;-&lt;fqn&gt;</code> ，其中 <code>&lt;prefix&gt;</code> 是在 <code>@ConfigurationProperties</code> 注解和 <code>＜fqn＞</code> 是 bean 的完全限定名称。如果注释不提供任何前缀，则只使用 bean 的完全限定名称。</p><p>上面示例中的 bean 名称是 <code>com.example.app-com.example.app.SomeProperties</code>。</p><p>我们建议 <code>@ConfigurationProperties</code> 只处理环境，特别是不要从上下文注入其他 Bean。对于特殊情况，可以使用 setter 注入或框架提供的任何 <code>*Aware</code> 接口( 例如，如果你需要访问 <code>Environment</code>，则可以使用 <code>EnvironmentAware</code>)。如果你仍然希望使用构造函数注入其他 Bean，则配置属性 Bean 必须使用 <code>@Component</code> 进行注释，并使用基于 JavaBean 的属性绑定。</p><h4 id="使用-configurationproperties-注解类型" tabindex="-1"><a class="header-anchor" href="#使用-configurationproperties-注解类型" aria-hidden="true">#</a> 使用 @ConfigurationProperties 注解类型</h4><p>这种类型的配置在 <code>SpringApplication</code> 外部 YAML 配置中尤其适用，如下例所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">service</span><span class="token punctuation">:</span>
    <span class="token key atrule">remote-address</span><span class="token punctuation">:</span> 192.168.1.1
    <span class="token key atrule">security</span><span class="token punctuation">:</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span>
      <span class="token key atrule">roles</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;USER&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;ADMIN&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用 <code>@ConfigurationProperties</code> bean，可以以与任何其他 bean 相同的方式注入它们，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyProperties</span> properties<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token class-name">MyProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>使用 <code>@ConfigurationProperties</code> 还可以生成元数据文件，ide 可以使用该文件为自己的键提供自动补全功能。</p><h4 id="第三方配置" tabindex="-1"><a class="header-anchor" href="#第三方配置" aria-hidden="true">#</a> 第三方配置</h4><p>除了使用 <code>@ConfigurationProperties</code> 注释类之外，还可以在公共 <code>@Bean</code> 方法上使用它。当你想要将属性绑定到你无法控制的第三方组件时，这样做可能特别有用。</p><p>要从 <code>Environment</code> 属性配置 Bean，请将 <code>@ConfigurationProperties</code> 添加到其 Bean 注册中，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdPartyConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;another&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">AnotherComponent</span> <span class="token function">anotherComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnotherComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 <code>another</code> 前缀定义的任何 JavaBean 属性都被映射到该 <code>AnotherComponent</code> Bean 上，其方式类似于前面的 <code>SomeProperties</code> 示例。</p><h4 id="宽松的绑定" tabindex="-1"><a class="header-anchor" href="#宽松的绑定" aria-hidden="true">#</a> 宽松的绑定</h4><p>Spring Boot 使用一些宽松的规则将 <code>Environment</code> 属性绑定到 <code>@ConfigurationProperties</code> Bean，因此在 <code>Environment</code> 属性名称和 Bean 属性名称之间不需要完全匹配。这很有用的常见示例包括以破折号分隔的环境属性(例如，<code>context-path</code> 绑定到 <code>contextPath</code>)和大写环境属性。(例如，<code>PORT</code> 绑定到 <code>port</code>)。</p><p>例如，考虑以下 <code>@ConfigurationProperties</code> 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my.main-project.person&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPersonProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的代码中，可以使用以下属性名称：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>my.main-project.person.first-name</td><td>串行大小写格式，建议在 <code>.properties</code> 和 <code>.yml</code> 文件中使用</td></tr><tr><td>my.main-project.person.firstName</td><td>标准的驼峰大小写语法</td></tr><tr><td>my.main-project.person.first_name</td><td>下划线表示法，这是在 <code>.properties</code> 和 <code>.yml</code> 文件中使用的另一种格式</td></tr><tr><td>MY_MAINPROJECT_PERSON_FIRSTNAME</td><td>大写格式，使用系统环境变量时建议使用</td></tr></tbody></table><p><strong>注意</strong>：</p><p>注解的 <code>prefix</code> 必须是串行大小写（小写并用 <code>-</code> 分隔，例如 <code>my.main-project.person</code>）。</p><table><thead><tr><th>属性源</th><th>普通</th><th>列表</th></tr></thead><tbody><tr><td>Properties 文件</td><td>骆驼式，串行式，或者下划线符号</td><td>使用 <code>[ ]</code> 或逗号分隔值的标准列表语法</td></tr><tr><td>YAML 文件</td><td>骆驼式，串行式，或者下划线符号</td><td>标准 YAML 列表语法或逗号分隔值</td></tr><tr><td>环境变量</td><td>以下划线作为分隔符的大写格式</td><td>由下划线包围的数值</td></tr><tr><td>系统属性</td><td>骆驼式，串行式，或者下划线符号</td><td>使用 <code>[ ]</code> 或逗号分隔值的标准列表语法</td></tr></tbody></table><p><strong>TIP</strong>：</p><p>我们建议尽可能以小写的串行格式存储属性，例如 <code>my.person.first-name=Rod</code>。</p><h5 id="绑定-map" tabindex="-1"><a class="header-anchor" href="#绑定-map" aria-hidden="true">#</a> 绑定 Map</h5><p>绑定到 <code>Map</code> 属性时，可能需要使用特殊的括号表示法，以便保留原始键值。如果键没有用 <code>[]</code> 括起来，则为非字母数字、<code>-</code> 或 <code>.</code> 的任何字符都被移除了。</p><p>例如，考虑将以下属性绑定到 <code>Map&lt;String,String&gt;</code>：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.map.[/key1]</span><span class="token punctuation">=</span><span class="token value attr-value">value1</span>
<span class="token key attr-name">my.map.[/key2]</span><span class="token punctuation">=</span><span class="token value attr-value">value2</span>
<span class="token key attr-name">my.map./key3</span><span class="token punctuation">=</span><span class="token value attr-value">value3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">&quot;[/key1]&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value1&quot;</span>
    <span class="token key atrule">&quot;[/key2]&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value2&quot;</span>
    <span class="token key atrule">&quot;/key3&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><p>对于 YAML 文件，括号需要用引号括起来，以便正确地解析键。</p><p>上面的属性将绑定到一个 <code>Map</code>，其中 <code>/key1</code>、<code>/key2</code> 和 <code>key3</code> 是映射中的键。已将斜杠从 <code>key3</code> 中删除，因为它没有用方括号括起来。</p><p>绑定到标量值时，其中携带 <code>.</code> 的键不需要被 <code>[]</code> 包围。标量值包括枚举和 <code>java.lang</code> 包中除 <code>Object</code> 之外的所有类型。将 <code>a.b=c</code> 绑定到 <code>Map&lt;String，String&gt;</code> 将保留在键中的 <code>.</code> 并返回带有条目 <code>{&quot;a.b&quot;=&quot;c&quot;}</code> 的 Map。对于任何其他类型，如果键包含 <code>.</code> 。例如，将 <code>a.b=c</code> 绑定到 <code>Map&lt;String，Object&gt;</code> 将返回条目为 <code>{&quot;a&quot;＝{&quot;b&quot;＝&quot;c&quot;}}</code> 的 Map，而 <code>[a.b]=c</code> 将返回条目 <code>{&quot;a.b&quot;＝&quot;c&quot;}</code> 的 Map。</p><h5 id="从环境变量绑定" tabindex="-1"><a class="header-anchor" href="#从环境变量绑定" aria-hidden="true">#</a> 从环境变量绑定</h5><p>大多数操作系统对可用于环境变量的名称施加严格的规则。例如，Linux shell 变量只能包含字母（<code>a</code> 到 <code>z</code> 或 <code>A</code> 到 <code>Z</code>）、数字（<code>0</code> 到 <code>9</code>）或下划线字符（<code>_</code>）。按照惯例，Unix shell 变量的名称也将以大写字母表示。</p><p>Spring Boot 的宽松绑定规则尽可能与这些命名限制兼容。</p><p>要将规范形式的属性名称转换为环境变量名称，可以遵循以下规则：</p><ul><li>将点（<code>.</code>）替换为下划线（<code>_</code>）;</li><li>删除所有破折号（<code>-</code>）;</li><li>转换为大写。</li></ul><p>例如，配置属性 <code>spring.main.log-startup-info</code> 将是一个名为 <code>SPRING_MAIN_LOGSTARTUPINFO</code> 的环境变量。</p><p>当绑定到对象列表时，也可以使用环境变量。要绑定到 <code>List</code>，元素序号在变量名中应该用下划线括起来。</p><p>例如，配置属性 <code>my.service[0].other</code> 将使用名为 <code>MY_SERVICE_0_OTHER</code> 的环境变量。</p><h4 id="合并复杂类型" tabindex="-1"><a class="header-anchor" href="#合并复杂类型" aria-hidden="true">#</a> 合并复杂类型</h4><p>当在多个地方配置列表时，重写将通过替换整个列表来工作。</p><p>例如，假设 <code>MyPojo</code> 对象的 <code>name</code> 和 <code>description</code> 属性默认为 <code>null</code>。下面的例子显示了 <code>MyProperties</code> 中的 <code>MyPojo</code> 对象列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyPojo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyPojo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑以下配置：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.list[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">my name</span>
<span class="token key attr-name">my.list[0].description</span><span class="token punctuation">=</span><span class="token value attr-value">my description</span>
<span class="token comment">#---</span>
<span class="token key attr-name">spring.config.activate.on-profile</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">my.list[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">my another name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;my name&quot;</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;my description&quot;</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">activate</span><span class="token punctuation">:</span>
  <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">&quot;dev&quot;</span>
<span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;my another name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，如果 <code>dev</code> 配置文件未处于活动状态，则 <code>MyProperties.list</code> 将包含一个 <code>MyPojo</code> 条目。但是，如果启用了 <code>dev</code> 配置文件，列表仍然只包含一个条目(<code>my another name</code> 的名称，<code>null</code> 的描述)。此配置不会将第二个 <code>MyPojo</code> 实例添加到列表中，也不会合并项目。</p><p>当在多个配置文件中指定 <code>List</code> 时，将使用具有最高优先级的配置文件(且仅使用该配置文件)。请考虑以下示例：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.list[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">my name</span>
<span class="token key attr-name">my.list[0].description</span><span class="token punctuation">=</span><span class="token value attr-value">my description</span>
<span class="token key attr-name">my.list[1].name</span><span class="token punctuation">=</span><span class="token value attr-value">another name</span>
<span class="token key attr-name">my.list[1].description</span><span class="token punctuation">=</span><span class="token value attr-value">another description</span>
<span class="token comment">#---</span>
<span class="token key attr-name">spring.config.activate.on-profile</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">my.list[0].name</span><span class="token punctuation">=</span><span class="token value attr-value">my another name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;my name&quot;</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;my description&quot;</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;another name&quot;</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;another description&quot;</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
  <span class="token key atrule">activate</span><span class="token punctuation">:</span>
  <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">&quot;dev&quot;</span>
<span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;my another name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，如果 <code>dev</code> 配置文件处于活动状态，<code>MyProperties.list</code> 包含一个 <code>MyPojo</code> 条目（名称为 <code>my another name</code>，<code>null</code> 描述）。对于 YAML，逗号分隔列表和 YAML 列表都可以用于完全覆盖列表的内容。</p><p>对于 <code>Map</code> 属性，您可以绑定从多个源绘制的属性值。但是，对于多个源中的相同属性，将使用具有最高优先级的属性。下面的例子暴露了一个来自于 <code>MyProperties</code> 的 <code>Map&lt;String, MyPojo&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MyPojo</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MyPojo</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑以下配置：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">my.map.key1.name</span><span class="token punctuation">=</span><span class="token value attr-value">my name 1</span>
<span class="token key attr-name">my.map.key1.description</span><span class="token punctuation">=</span><span class="token value attr-value">my description 1</span>
<span class="token comment">#---</span>
<span class="token key attr-name">spring.config.activate.on-profile</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">my.map.key1.name</span><span class="token punctuation">=</span><span class="token value attr-value">dev name 1</span>
<span class="token key attr-name">my.map.key2.name</span><span class="token punctuation">=</span><span class="token value attr-value">dev name 2</span>
<span class="token key attr-name">my.map.key2.description</span><span class="token punctuation">=</span><span class="token value attr-value">dev description 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">key1</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;my name 1&quot;</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;my description 1&quot;</span>
<span class="token punctuation">---</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">activate</span><span class="token punctuation">:</span>
      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> <span class="token string">&quot;dev&quot;</span>
<span class="token key atrule">my</span><span class="token punctuation">:</span>
  <span class="token key atrule">map</span><span class="token punctuation">:</span>
    <span class="token key atrule">key1</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;dev name 1&quot;</span>
    <span class="token key atrule">key2</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;dev name 2&quot;</span>
      <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;dev description 2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>dev</code> 配置文件未激活，则 <code>MyProperties.map</code> 包含一个键为 <code>key1</code> 的条目（名称为 <code>myname 1</code>，描述为 <code>my description 1</code>）。但是，如果启用了 <code>dev</code> 配置文件，则 <code>map</code> 包含两个条目，分别带有 <code>key1</code>（名称为 <code>dev name 1</code>，描述为 <code>my description 1</code>）和 <code>key2</code>（名称为 <code>dev name 2</code> ，描述为 <code>dev description 2</code>）。</p><p><strong>注意</strong>：</p><p>上述合并规则适用于所有属性源中的属性，而不仅仅是文件。</p><h4 id="特性转换" tabindex="-1"><a class="header-anchor" href="#特性转换" aria-hidden="true">#</a> 特性转换</h4><p>当 Spring Boot 绑定到 <code>@ConfigurationProperties</code> bean 时，它会尝试强制外部应用程序属性为正确的类型。如果需要自定义类型转换，可以提供 <code>ConversionService</code> bean( 具有名为 <code>conversionService</code> 的 bean)或自定义属性编辑器(通过 <code>CustomEditorConfigurer</code> bean)或自定义 <code>Converters</code>( 带有注解为 <code>@ConfigurationPropertiesBinding</code> 的 bean 定义)。</p><p><strong>注意</strong>：</p><p>由于此 Bean 在应用程序生命周期的早期就被请求，因此请确保限制 <code>ConversionService</code> 正在使用的依赖项。通常，在创建时可能不会完全初始化所需的任何依赖项。如果配置键强制不需要自定义 <code>ConversionService</code>，并且仅依赖于使用 <code>@ConfigurationPropertiesBinding</code> 限定的自定义转换器，则可能需要重命名该自定义 <code>ConversionService</code>。</p><h5 id="转换时间" tabindex="-1"><a class="header-anchor" href="#转换时间" aria-hidden="true">#</a> 转换时间</h5><p>Spring Boot 对表示持续时间提供了专门的支持。如果你暴露 <code>java.time.Duration</code> 属性时，应用程序属性中的以下格式可用：</p><ul><li>常规的 <code>long</code> 表示法(使用毫秒作为默认单位，除非已指定 <code>@DurationUnit</code>)</li><li><code>java.time.Duration</code> 使用的标准 ISO-8601 格式</li><li>一种更易读的格式，其中值和单位是耦合的( <code>10s</code> 表示 10 秒)</li></ul><p>请考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span><span class="token class-name">ChronoUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">DurationUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Duration</span> sessionTimeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Duration</span> readTimeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Duration</span> <span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sessionTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSessionTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> sessionTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionTimeout <span class="token operator">=</span> sessionTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Duration</span> <span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> readTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>readTimeout <span class="token operator">=</span> readTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要将会话超时指定为 30 秒，<code>30</code>、<code>PT30S</code> 和 <code>30S</code> 都是等效的。<code>500ms</code> 的读取超时可指定为以下任何形式：<code>500</code>、<code>PT0.5S</code> 和 <code>500ms</code>。</p><p>你也可以使用任何受支持的单位。它们是：</p><ul><li><code>ns</code> 纳秒</li><li><code>us</code> 微秒</li><li><code>ms</code> 毫秒</li><li><code>s</code> 秒</li><li><code>m</code> 分钟</li><li><code>h</code> 小时</li><li><code>d</code> 天</li></ul><p>默认单位是毫秒，可以使用 @DurationUnit 覆盖，如上面的示例所示。</p><p>如果你更喜欢使用构造函数绑定，可以暴露相同的属性，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span><span class="token class-name">ChronoUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConstructorBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">DefaultValue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">DurationUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConstructorBinding</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Duration</span> sessionTimeout<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Duration</span> readTimeout<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyProperties</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@DefaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;30s&quot;</span><span class="token punctuation">)</span>
                        <span class="token class-name">Duration</span> sessionTimeout<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@DefaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;1000ms&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Duration</span> readTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionTimeout <span class="token operator">=</span> sessionTimeout<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>readTimeout <span class="token operator">=</span> readTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Duration</span> <span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sessionTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Duration</span> <span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>如果要升级 <code>Long</code> 属性，如果单位不是毫秒，请确保定义单位(使用 <code>@DurationUnit</code>)。这样做提供了一条透明的升级路径，同时支持更丰富的格式。</p><h5 id="转换时间-1" tabindex="-1"><a class="header-anchor" href="#转换时间-1" aria-hidden="true">#</a> 转换时间</h5><p>除了持续时间，Spring Boot 还可以使用 <code>java.time.Period</code> 类型。以下格式可以在应用程序属性中使用:</p><ul><li>常规 <code>int</code> 表示(使用天数作为默认单位，除非指定了 <code>@PeriodUnit</code>)</li><li><code>java.time.Period</code> 使用的标准 ISO-8601 格式</li><li>更简单的格式，其中值和单位对是耦合的( <code>1y3d</code> 表示 1 年和 3 天)</li></ul><p>简单格式支持以下单位：</p><ul><li>y 年份</li><li>m 月份</li><li>w 周</li><li>d 天</li></ul><p><strong>注意</strong>：</p><p><code>java.time.Period</code> 类型实际上从未存储周数，它是一个表示 “7天” 的快捷方式。</p><h5 id="转换数据大小" tabindex="-1"><a class="header-anchor" href="#转换数据大小" aria-hidden="true">#</a> 转换数据大小</h5><p>Spring Framework 有一个 <code>DataSize</code> 值类型，它以字节为单位表示大小。如果暴露 <code>DataSize</code> 属性，则应用程序属性中的以下格式可用：</p><ul><li>常规 <code>long</code> 表示(使用字节作为默认单位，除非指定了 <code>@DataSizeUnit</code>)</li><li>一种更可读的格式，其中值和单位是耦合的（<code>10MB</code> 表示 10 兆字节）</li></ul><p>考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">DataSizeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">DataSize</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">DataUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@DataSizeUnit</span><span class="token punctuation">(</span><span class="token class-name">DataUnit</span><span class="token punctuation">.</span><span class="token constant">MEGABYTES</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSize</span> bufferSize <span class="token operator">=</span> <span class="token class-name">DataSize</span><span class="token punctuation">.</span><span class="token function">ofMegabytes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSize</span> sizeThreshold <span class="token operator">=</span> <span class="token class-name">DataSize</span><span class="token punctuation">.</span><span class="token function">ofBytes</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DataSize</span> <span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bufferSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBufferSize</span><span class="token punctuation">(</span><span class="token class-name">DataSize</span> bufferSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bufferSize <span class="token operator">=</span> bufferSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">DataSize</span> <span class="token function">getSizeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sizeThreshold<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSizeThreshold</span><span class="token punctuation">(</span><span class="token class-name">DataSize</span> sizeThreshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sizeThreshold <span class="token operator">=</span> sizeThreshold<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要指定 10 兆字节的缓冲区大小，<code>10</code> 和 <code>10MB</code> 是等价的。256 字节的大小阈值可以指定为 <code>256</code> 或 <code>256B</code>。</p><p>你也可以使用任何受支持的单位。它们是：</p><ul><li>B 字节</li><li>KB 千字节</li><li>MB 兆字节</li><li>GB 千兆字节</li><li>TB 兆兆字节</li></ul><p>默认单位是字节，可以使用 <code>@DataSizeUnit</code> 重写，如上面的示例所示。</p><p>如果你更喜欢使用构造函数绑定，可以暴露相同的属性，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConstructorBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">DefaultValue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">DataSizeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">DataSize</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>unit<span class="token punctuation">.</span></span><span class="token class-name">DataUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConstructorBinding</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSize</span> bufferSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSize</span> sizeThreshold<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyProperties</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DataSizeUnit</span><span class="token punctuation">(</span><span class="token class-name">DataUnit</span><span class="token punctuation">.</span><span class="token constant">MEGABYTES</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@DefaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;2MB&quot;</span><span class="token punctuation">)</span>
                        <span class="token class-name">DataSize</span> bufferSize<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@DefaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;512B&quot;</span><span class="token punctuation">)</span> <span class="token class-name">DataSize</span> sizeThreshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bufferSize <span class="token operator">=</span> bufferSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sizeThreshold <span class="token operator">=</span> sizeThreshold<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">DataSize</span> <span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bufferSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">DataSize</span> <span class="token function">getSizeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sizeThreshold<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>如果要升级 <code>Long</code> 属性，如果不是字节，请确保定义单位（使用 <code>@DataSizeUnit</code>）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</p><h4 id="configurationproperties-验证" tabindex="-1"><a class="header-anchor" href="#configurationproperties-验证" aria-hidden="true">#</a> @ConfigurationProperties 验证</h4><p>当 <code>@ConfigurationProperties</code> 类被 Spring 的 <code>@Validated</code> 注解注释时，Spring Boot 会尝试验证它们。你可以直接在配置类上使用 JSR-303 <code>javax.validation</code> 约束注解。要做到这一点，请确保类路径上有一个兼容的 JSR-303 实现，然后向字段添加约束注释，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my.service&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">InetAddress</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoteAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress <span class="token operator">=</span> remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>还可以通过用 <code>@Validated</code> 注解创建配置属性的 <code>@Bean</code> 方法来触发验证。</p><p>为了确保总是触发嵌套属性的验证，即使没有找到属性，关联的字段也必须用 <code>@Valid</code> 标注。下面的示例建立在前面的 <code>MyProperties</code> 示例之上：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">Valid</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotEmpty</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my.service&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Valid</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Security</span> security <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Security</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">InetAddress</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoteAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteAddress <span class="token operator">=</span> remoteAddress<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Security</span> <span class="token function">getSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>security<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Security</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@NotEmpty</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以通过创建一个名为 <code>ConfigurationPropertiesValidator</code> 的 Bean 定义来添加一个定制的 Spring <code>Validator</code>。<code>@Bean</code> 方法应该声明为静态的。配置属性验证器是在应用程序生命周期的早期创建的，如果将 <code>@Bean</code> 方法声明为静态方法，则无需实例化 <code>@Configuration</code> 类即可创建 Bean。这样做可以避免早期实例化可能导致的任何问题。</p><p>TIP：</p><p><code>spring-boot-actuator</code> 模块包括一个端点，它暴露所有 <code>@ConfigurationProperties</code> bean。将 web 浏览器指向 <code>/actuator/configprops</code> 或使用等效的 JMX 端点。</p><h4 id="configurationproperties-和-value" tabindex="-1"><a class="header-anchor" href="#configurationproperties-和-value" aria-hidden="true">#</a> @ConfigurationProperties 和 @Value</h4><p><code>@Value</code> 注解是核心容器功能，它不提供与类型安全配置属性相同的功能。下表总结了 <code>@ConfigurationProperties</code> 和 <code>@Value</code> 支持的功能：</p><table><thead><tr><th>特性</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>宽松绑定</td><td>√</td><td>限制</td></tr><tr><td>元数据支持</td><td>√</td><td>×</td></tr><tr><td>SpEL</td><td>×</td><td>√</td></tr></tbody></table><p><strong>注意</strong>：</p><p>如果你确实想使用 <code>@Value</code>，我们建议你使用规范形式引用属性名称（串行大小写仅使用小写字母）。这将允许 Spring Boot 使用与放松绑定 <code>@ConfigurationProperties</code> 时相同的逻辑。</p><p>例如，<code>@Value(&quot;\${demo.Item-Price}&quot;)</code> 将从 <code>application.properties</code> 文件以及从系统环境 <code>DEMO_ITEMPRICE</code> 中获取 <code>demo.item-price</code> 和 <code>demo.itemPrice</code> 数据。如果你使用 <code>@Value(&quot;\${demo.itemPrice}&quot;)</code>，则不会考虑 <code>demo.item-price</code> 和 <code>DEMO_ITEMPRICE</code>。</p><p>如果为自己的组件定义了一组配置键，我们建议将它们分组到带有 <code>@ConfigurationProperties</code> 注释的 POJO 中。这样做将为你提供结构化的类型安全对象，你可以将其注入到自己的 bean 中。</p><p>在解析这些文件并填充环境时，不会处理应用程序属性文件中的 <code>SpEL</code> 表达式。但是，可以在 <code>@Value</code> 中编写 <code>SpEL</code> 表达式。如果应用程序属性文件中的属性值是 <code>SpEL</code> 表达式，则在通过 <code>@Value</code> 使用时将对其求值。</p>`,192);function f(h,w){const a=i("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("如果你需要一种安全的方式来存储凭证和密码，请使用 "),s("a",d,[n("Spring Cloud Vault"),e(a)]),n(" 项目提供在 "),s("a",k,[n("HashiCorp Vault"),e(a)]),n(" 中存储外部化配置的支持。")]),m,s("p",null,[s("a",v,[n("YAML"),e(a)]),n(" 是 JSON 的超集，因此是指定分层配置数据的方便格式。只要类路径上有 "),s("a",b,[n("SnakeYAML"),e(a)]),n(" 库，"),g,n(" 类就会自动支持 YAML 作为属性的替代。")]),y])}const q=t(u,[["render",f],["__file","spring-external-config.html.vue"]]);export{q as default};
