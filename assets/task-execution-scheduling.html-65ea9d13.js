import{_ as c,W as l,X as i,Y as n,Z as s,$ as a,a1 as u,a0 as p,C as e}from"./framework-eca38234.js";const k="/assets/sync-execute-job-d1683d34.png",r="/assets/async-execute-job-e948a5b2.png",d="/assets/springboot-dafault-thread-pool-config-param-3feaccdc.png",v="/assets/thread-pool-reject-policy-590effa5.png",m="/assets/springboot-default-scheduling-config-param-d9781322.png",b="/assets/idea-dynamic-task-http-request-b43cb432.png",g={},h=p(`<h2 id="任务执行与调度-task-execution-and-scheduling" tabindex="-1"><a class="header-anchor" href="#任务执行与调度-task-execution-and-scheduling" aria-hidden="true">#</a> 任务执行与调度（Task Execution and Scheduling）</h2><p>在上下文中没有 <code>Executor</code> bean 的情况下，Spring Boot 会自动配置 <code>ThreadPoolTaskExecutor</code>，并使用可自动关联到异步任务执行（<code>@EnableAsync</code>）和 Spring MVC 异步请求处理的合理默认值。</p><p><strong>TIP</strong>：</p><p>如果在上下文中定义了自定义 <code>Executor</code>，则常规任务执行（即 <code>@EnableAsync</code>）将透明地使用它，但不会配置 Spring MVC 支持，因为它需要 <code>AsyncTaskExecutor</code> 实现（名为 <code>applicationTaskExecutor</code>）。根据你的目标安排，你可以将 <code>Executor</code> 更改为 <code>ThreadPoolTaskExecutor</code>，或者同时定义 <code>ThreadPoolTaskExecutor</code> 和 <code>AsyncConfigurer</code> 来包装自定义 <code>Executor</code>。</p><p>自动配置的 <code>TaskExecutorBuilder</code> 允许你轻松创建复制默认情况下自动配置的实例。</p><h3 id="任务执行器" tabindex="-1"><a class="header-anchor" href="#任务执行器" aria-hidden="true">#</a> 任务执行器</h3><p>线程池使用 8 个核心线程，可以根据负载增长和收缩。可以使用 <code>spring.task.execution</code> 命名空间对这些默认设置进行微调，如下例所示：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">16</span>
<span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">100</span>
<span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">10s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">task</span><span class="token punctuation">:</span>
    <span class="token key atrule">execution</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-size</span><span class="token punctuation">:</span> <span class="token number">16</span>
        <span class="token key atrule">queue-capacity</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token key atrule">keep-alive</span><span class="token punctuation">:</span> <span class="token string">&quot;10s&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将更改线程池以使用有界队列，这样当队列已满（100个任务）时，线程池将增加到最多 16 个线程。当线程空闲 10 秒（而不是默认情况下的60秒）时，会回收线程，因此池的收缩更为积极。</p><h3 id="任务调度器" tabindex="-1"><a class="header-anchor" href="#任务调度器" aria-hidden="true">#</a> 任务调度器</h3><p>如果需要关联到计划的任务执行（例如使用 <code>@EnableScheduling</code>），也可以自动配置 <code>ThreadPoolTaskScheduler</code> 。默认情况下，线程池使用一个线程，其设置可以使用 <code>spring.task.scheduling</code> 命名空间进行微调，如下例所示：</p><p>Properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.task.scheduling.thread-name-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">scheduling-</span>
<span class="token key attr-name">spring.task.scheduling.pool.size</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Yaml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">task</span><span class="token punctuation">:</span>
    <span class="token key atrule">scheduling</span><span class="token punctuation">:</span>
      <span class="token key atrule">thread-name-prefix</span><span class="token punctuation">:</span> <span class="token string">&quot;scheduling-&quot;</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要创建自定义执行器或调度器，则 <code>TaskExecutorBuilder</code> Bean 和 <code>TaskSchedulerBuilder</code> Bean都可以在上下文中使用。</p><h3 id="任务执行实战" tabindex="-1"><a class="header-anchor" href="#任务执行实战" aria-hidden="true">#</a> 任务执行实战</h3><h4 id="使用-springboot-默认的线程池机制" tabindex="-1"><a class="header-anchor" href="#使用-springboot-默认的线程池机制" aria-hidden="true">#</a> 使用 SpringBoot 默认的线程池机制</h4><h5 id="同步任务执行" tabindex="-1"><a class="header-anchor" href="#同步任务执行" aria-hidden="true">#</a> 同步任务执行</h5><p>在异步任务执行中，启动类或者配置类上面没有启用 <code>@EnableAsync</code> 注解，异步任务会自动变成同步任务，如下图所示：</p><figure><img src="`+k+'" alt="同步执行任务" tabindex="0" loading="lazy"><figcaption>同步执行任务</figcaption></figure><h5 id="异步任务执行" tabindex="-1"><a class="header-anchor" href="#异步任务执行" aria-hidden="true">#</a> 异步任务执行</h5><p>启动类或者配置类上面启用 <code>@EnableAsync</code> 注解，异步任务开启，如下图所示：</p><figure><img src="'+r+'" alt="异步执行任务" tabindex="0" loading="lazy"><figcaption>异步执行任务</figcaption></figure><h5 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h5><h6 id="线程默认配置信息" tabindex="-1"><a class="header-anchor" href="#线程默认配置信息" aria-hidden="true">#</a> 线程默认配置信息</h6><figure><img src="'+d+`" alt="springboot默认线程池配置参数" tabindex="0" loading="lazy"><figcaption>springboot默认线程池配置参数</figcaption></figure><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 是否允许核心线程超时，默认为 true</span>
<span class="token key attr-name">spring.task.execution.pool.allow-core-thread-timeout</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 核心线程数，默认为 8</span>
<span class="token key attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token value attr-value">8</span>
<span class="token comment"># 线程在终止前可以保持空闲的时间限制，默认为 60s</span>
<span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span>
<span class="token comment"># 允许的最大线程数，默认为 0x7fffffff（2^31-1）</span>
<span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">Integer.MAX_VALUE</span>
<span class="token comment"># 线程队列容量，默认为 0x7fffffff（2^31-1）</span>
<span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">Integer.MAX_VALUE</span>
<span class="token comment"># 执行器是否应该等待计划任务在关闭时完成，默认为 false</span>
<span class="token key attr-name">spring.task.execution.shutdown.await-termination</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment"># 执行器应等待剩余任务完成的最长时间</span>
<span class="token key attr-name">spring.task.execution.shutdown.await-termination-period</span><span class="token punctuation">=</span><span class="token value attr-value">Duration</span>
<span class="token comment"># 新创建的线程使用的前缀，默认为 task-</span>
<span class="token key attr-name">spring.task.execution.thread-name-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">task-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 SpringBoot 默认线程配置参数可以参考 <code>org.springframework.boot.autoconfigure.task.TaskExecutionProperties</code> 类</p><h6 id="自动配置类" tabindex="-1"><a class="header-anchor" href="#自动配置类" aria-hidden="true">#</a> 自动配置类</h6><p>根据官方文档的说明，自动配置的 <code>TaskExecutorBuilder</code> 允许轻松复制默认情况下自动配置的实例。最终找到 SpringBoot 的线程池自动装配类 <code>TaskExecutionAutoConfiguration</code> 也是用 <code>TaskExecutorBuilder</code>，源码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfiguration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">TaskExecutionProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutionAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Bean name of the application <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TaskExecutor</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;applicationTaskExecutor&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">TaskExecutorBuilder</span> <span class="token function">taskExecutorBuilder</span><span class="token punctuation">(</span><span class="token class-name">TaskExecutionProperties</span> properties<span class="token punctuation">,</span>
                                                   <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TaskExecutorCustomizer</span><span class="token punctuation">&gt;</span></span> taskExecutorCustomizers<span class="token punctuation">,</span>
                                                   <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TaskDecorator</span><span class="token punctuation">&gt;</span></span> taskDecorator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TaskExecutionProperties<span class="token punctuation">.</span>Pool</span> pool <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskExecutorBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskExecutorBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">queueCapacity</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">getQueueCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">getCoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">maxPoolSize</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">getMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">isAllowCoreThreadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">keepAlive</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">getKeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Shutdown</span> shutdown <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span>shutdown<span class="token punctuation">.</span><span class="token function">isAwaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">awaitTerminationPeriod</span><span class="token punctuation">(</span>shutdown<span class="token punctuation">.</span><span class="token function">getAwaitTerminationPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">threadNamePrefix</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getThreadNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">customizers</span><span class="token punctuation">(</span>taskExecutorCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">iterator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">taskDecorator</span><span class="token punctuation">(</span>taskDecorator<span class="token punctuation">.</span><span class="token function">getIfUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Lazy</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">APPLICATION_TASK_EXECUTOR_BEAN_NAME</span><span class="token punctuation">,</span>
            <span class="token class-name">AsyncAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_TASK_EXECUTOR_BEAN_NAME</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">applicationTaskExecutor</span><span class="token punctuation">(</span><span class="token class-name">TaskExecutorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中不难看出自动配置类作用于的条件类是 <code>ThreadPoolTaskExecutor</code> ，深入此类，可以看出初始化执行器为 <code>ThreadPoolExecutor</code>，源码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">ExecutorConfigurationSupport</span>
        <span class="token keyword">implements</span> <span class="token class-name">AsyncListenableTaskExecutor</span><span class="token punctuation">,</span> <span class="token class-name">SchedulingTaskExecutor</span> <span class="token punctuation">{</span>

    <span class="token comment">// ...</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">ExecutorService</span> <span class="token function">initializeExecutor</span><span class="token punctuation">(</span>
            <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskDecorator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                    queue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Runnable</span> decorated <span class="token operator">=</span> taskDecorator<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>decorated <span class="token operator">!=</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        decoratedTaskMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>decorated<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>decorated<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                    queue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCoreThreadTimeOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prestartAllCoreThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor<span class="token punctuation">.</span><span class="token function">prestartAllCoreThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样地，根据初始化执行器方法不难看出来自于抽象父类 <code>ExecutorConfigurationSupport</code> 的抽象方法，父类也对该方法进行了初始化处理，这里包括线程执行的拒绝策略是 <code>AbortPolicy</code>。源码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorConfigurationSupport</span> <span class="token keyword">extends</span> <span class="token class-name">CustomizableThreadFactory</span>
        <span class="token keyword">implements</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing ExecutorService&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot; &#39;&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadNamePrefixSet <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token function">initializeExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">ExecutorService</span> <span class="token function">initializeExecutor</span><span class="token punctuation">(</span>
            <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="线程池拒绝策略" tabindex="-1"><a class="header-anchor" href="#线程池拒绝策略" aria-hidden="true">#</a> 线程池拒绝策略</h6><p>官方 api 注释说明，如下图所示：</p><figure><img src="`+v+`" alt="线程池拒绝策略" tabindex="0" loading="lazy"><figcaption>线程池拒绝策略</figcaption></figure><table><thead><tr><th>拒绝策略</th><th>描述</th></tr></thead><tbody><tr><td>AbortPolicy</td><td>处理程序在被拒绝时抛出运行时 <code>RejectedExecutionExecutionException</code> 异常</td></tr><tr><td>CallerRunsPolicy</td><td>调用 execute 本身的线程运行任务。这提供了一种简单的反馈控制机制，可以减慢提交新任务的速度</td></tr><tr><td>DiscardPolicy</td><td>简单地删除无法执行的任务</td></tr><tr><td>DiscardOldestPolicy</td><td>如果没有关闭执行器，则会丢弃工作队列顶部的任务，然后重试执行(这可能会再次失败，导致重复执行)</td></tr></tbody></table><h4 id="使用自定义的线程池" tabindex="-1"><a class="header-anchor" href="#使用自定义的线程池" aria-hidden="true">#</a> 使用自定义的线程池</h4><h5 id="自定义配置类" tabindex="-1"><a class="header-anchor" href="#自定义配置类" aria-hidden="true">#</a> 自定义配置类</h5><p>通过实现 <code>AsyncConfigurer</code> 接口来实现自定义线程池的配置，示例代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorDemoConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TaskExecutorDemoConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 通过重写 getAsyncExecutor 方法，制定默认的任务执行由该方法产生
     *
     * <span class="token keyword">@return</span> Executor
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setAllowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;defaultTask-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> threadPoolTaskExecutor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 异步任务执行异常处理器
     *
     * <span class="token keyword">@return</span> AsyncUncaughtExceptionHandler 实现
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskExecutorDemoConfig#getAsyncUncaughtExceptionHandler] - 异步任务执行异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;方法名为 [{}]，参数为 {}，执行异步任务发生异常，异常信息为：{} &quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 自定义任务执行器：在定义了多个任务执行器的情况下，可以使用 @Async(&quot;getCustomizerAsyncExecutor&quot;) 来指定
     *
     * <span class="token keyword">@return</span> Executor
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;getCustomizerAsyncExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getCustomizerAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setAllowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;customTask-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> threadPoolTaskExecutor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="新增业务类" tabindex="-1"><a class="header-anchor" href="#新增业务类" aria-hidden="true">#</a> 新增业务类</h5><p>模拟实际开发中的异步执行某些任务的业务场景，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncDemoService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoService#sayHello] - 当前线程名称为 [{}] &quot;</span> <span class="token operator">+</span>
                        <span class="token string">&quot;异步执行了 sayHello 方法&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getCustomizerAsyncExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoService#sayHi] - 当前线程名称为 [{}] &quot;</span> <span class="token operator">+</span>
                        <span class="token string">&quot;异步执行了 sayHi 方法&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;手动抛出一个异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="新增测试类" tabindex="-1"><a class="header-anchor" href="#新增测试类" aria-hidden="true">#</a> 新增测试类</h5><p>模拟调用异步执行的方法，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncDemoServiceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AsyncDemoServiceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">AsyncDemoService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testSayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testSayHello] - 执行开始！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testSayHello] - 执行结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testSayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testSayHi] - 执行开始！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testSayHi] - 执行结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="运行测试类" tabindex="-1"><a class="header-anchor" href="#运行测试类" aria-hidden="true">#</a> 运行测试类</h5><p>测试结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// ...

2023-02-25 15:41:13.429  INFO 2088 --- [           main] c.o.s.c.task.test.AsyncDemoServiceTest   : [AsyncDemoServiceTest#testSayHello] - 执行开始！
2023-02-25 15:41:13.435  INFO 2088 --- [           main] c.o.s.c.task.test.AsyncDemoServiceTest   : [AsyncDemoServiceTest#testSayHello] - 执行结束！
2023-02-25 15:41:13.443  INFO 2088 --- [  defaultTask-1] c.o.s.core.task.AsyncDemoService         : [AsyncDemoService#sayHello] - 当前线程名称为 [defaultTask-1] 异步执行了 sayHello 方法
2023-02-25 15:41:13.452  INFO 2088 --- [           main] c.o.s.c.task.test.AsyncDemoServiceTest   : [AsyncDemoServiceTest#testSayHi] - 执行开始！
2023-02-25 15:41:13.454  INFO 2088 --- [           main] c.o.s.c.task.test.AsyncDemoServiceTest   : [AsyncDemoServiceTest#testSayHi] - 执行结束！
2023-02-25 15:41:13.454  INFO 2088 --- [   customTask-1] c.o.s.core.task.AsyncDemoService         : [AsyncDemoService#sayHi] - 当前线程名称为 [customTask-1] 异步执行了 sayHi 方法
2023-02-25 15:41:13.455  WARN 2088 --- [   customTask-1] c.o.s.c.t.config.TaskExecutorDemoConfig  : [TaskExecutorDemoConfig#getAsyncUncaughtExceptionHandler] - 异步任务执行异常
2023-02-25 15:41:13.455 ERROR 2088 --- [   customTask-1] c.o.s.c.t.config.TaskExecutorDemoConfig  : 方法名为 [sayHi]，参数为 []，执行异步任务发生异常，异常信息为：手动抛出一个异常
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所述，不难看出 <code>@Async</code> 注解不指定值（<code>@Async(value =&quot;&quot;)</code>），执行配置类中默认的 Executor 线程池配置 bean 实现；反之，执行配置类中指定值的 Executor 线程池配置 bean 实现。</p><h4 id="直接调用-threadpooltaskexecutor-异步执行" tabindex="-1"><a class="header-anchor" href="#直接调用-threadpooltaskexecutor-异步执行" aria-hidden="true">#</a> 直接调用 ThreadPoolTaskExecutor 异步执行</h4><p>通过直接调用 <code>ThreadPoolTaskExecutor</code> 来异步执行业务，示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncDemoServiceTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AsyncDemoServiceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">AsyncDemoService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testThreadPoolTaskExecutor] - 执行开始！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用异步 sayHi 方法</span>
        service<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 直接执行异步</span>
        threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testThreadPoolTaskExecutor] - 当前线程名称为 [{}] 异步执行&quot;</span><span class="token punctuation">,</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用异步 sayHello 方法</span>
        service<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[AsyncDemoServiceTest#testThreadPoolTaskExecutor] - 执行结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><p>使用直接调用的方式不需要 <code>@EnableAsync</code> 注解，不推荐直接在代码中使用此方式，不便于管理。</p><h3 id="任务调度实战" tabindex="-1"><a class="header-anchor" href="#任务调度实战" aria-hidden="true">#</a> 任务调度实战</h3><h4 id="使用-springboot-定时任务" tabindex="-1"><a class="header-anchor" href="#使用-springboot-定时任务" aria-hidden="true">#</a> 使用 SpringBoot 定时任务</h4><h5 id="基于注解" tabindex="-1"><a class="header-anchor" href="#基于注解" aria-hidden="true">#</a> 基于注解</h5><p>这里是用 <code>@Scheduled</code> + <code>@EnableScheduling</code> 注解联合使用，示例代码如下所示：</p><ul><li><strong>@EnableScheduling</strong>：在配置类上使用，开启计划任务的支持</li><li><strong>@Scheduled</strong>：来声明这是一个任务，包括 cron，fixDelay，fixRate 等类型（方法上，需先开启计划任务的支持）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleTaskDemoService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 从第 0 秒开始，每 5 秒输出一次信息
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/5 * * * * ? &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execOnce5Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[ScheduleTaskDemoService#execOnce5Second] - 每 5 秒输出一次，当前时间为 {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从第 5 秒开始，每 10 秒输出一次信息
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;5/10 * * * * ? &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execOnce10Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[ScheduleTaskDemoService#execOnce10Second] - 每 10 秒输出一次，当前时间为 {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...
2023-02-25 17:31:14.605  INFO 32084 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
2023-02-25 17:31:14.615  INFO 32084 --- [           main] com.olinonee.springboot.core.task.MyApp  : Started MyApp in 1.125 seconds (JVM running for 1.813)
2023-02-25 17:31:15.009  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce5Second] - 每 5 秒输出一次，当前时间为 2023-02-25 17:31:15
2023-02-25 17:31:15.011  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce10Second] - 每 10 秒输出一次，当前时间为 2023-02-25 17:31:15
2023-02-25 17:31:20.009  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce5Second] - 每 5 秒输出一次，当前时间为 2023-02-25 17:31:20
2023-02-25 17:31:25.012  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce5Second] - 每 5 秒输出一次，当前时间为 2023-02-25 17:31:25
2023-02-25 17:31:25.012  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce10Second] - 每 10 秒输出一次，当前时间为 2023-02-25 17:31:25
2023-02-25 17:31:30.009  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce5Second] - 每 5 秒输出一次，当前时间为 2023-02-25 17:31:30
2023-02-25 17:31:35.010  INFO 32084 --- [   scheduling-1] c.o.s.core.task.ScheduleTaskDemoService  : [ScheduleTaskDemoService#execOnce5Second] - 每 5 秒输出一次，当前时间为 2023-02-25 17:31:35
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从执行结果上不难看出，默认的定时任务是单线程（例如示例中的 <code>scheduling-1</code> 线程名称）的，想要多线程输出，请修改 <code>application.properties</code> 的默认参数配置属性，如下所示：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 允许使用 2 个线程来执行定时任务</span>
<span class="token key attr-name">spring.task.scheduling.pool.size</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="参数默认配置信息" tabindex="-1"><a class="header-anchor" href="#参数默认配置信息" aria-hidden="true">#</a> 参数默认配置信息</h6><figure><img src="`+m+`" alt="springboot默认定时任务配置参数" tabindex="0" loading="lazy"><figcaption>springboot默认定时任务配置参数</figcaption></figure><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 允许的最大线程数，默认为 1（也就是单线程）</span>
<span class="token key attr-name">spring.task.scheduling.pool.size</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token comment"># 执行器是否应该等待计划任务在关闭时完成，默认为 false</span>
<span class="token key attr-name">spring.task.scheduling.shutdown.await-termination</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment"># 执行器应等待剩余任务完成的最长时间</span>
<span class="token key attr-name">spring.task.scheduling.shutdown.await-termination-period</span><span class="token punctuation">=</span><span class="token value attr-value">Duration</span>
<span class="token comment"># 创建新的线程使用的名称前缀，默认为 ”scheduling-“</span>
<span class="token key attr-name">spring.task.scheduling.thread-name-prefix</span><span class="token punctuation">=</span><span class="token value attr-value">scheduling-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="scheduled-注解各参数信息" tabindex="-1"><a class="header-anchor" href="#scheduled-注解各参数信息" aria-hidden="true">#</a> @Scheduled 注解各参数信息</h6><p>注解源码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Schedules</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scheduled</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token constant">CRON_DISABLED</span> <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">TimeUnit</span> <span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),y=n("thead",null,[n("tr",null,[n("th",null,"属性"),n("th",null,"描述"),n("th",null,"示例")])],-1),f=n("tr",null,[n("td",null,"cron"),n("td",null,"一个类似 cron 的表达式，扩展了通常的 UN*X 定义，以包括秒、分、小时、月中的第一天、月和星期中的第一天的触发器"),n("td",null,[n("code",null,"0/5 * * * * ? "),s(' 表示每5秒执行1次任务，从0秒开始，注意"?"后面有空格')])],-1),w=n("tr",null,[n("td",null,"zone"),n("td",null,"将解析 cron 表达式的时区。默认情况下，此属性为空 String(即将使用服务器的本地时区)"),n("td",null,"Asia/Shanghai，中国默认时区")],-1),x=n("tr",null,[n("td",null,"fixedDelay"),n("td",null,"在上一次调用结束和下一次调用开始之间以固定的时间间隔执行带注解的这个方法，默认情况下，时间单位为毫秒"),n("td",null,"5000，上一次执行完毕时间点之后5秒再执行")],-1),S=n("td",null,"fixedDelayString",-1),T=n("td",null,"与 fixedDelay 相同，只是使用字符串形式。唯一不同的是支持占位符",-1),E={href:"http://xxx.xxx",target:"_blank",rel:"noopener noreferrer"},q=n("tr",null,[n("td",null,"fixedRate"),n("td",null,"在调用之间以固定的周期执行带注解的这个方法，默认情况下，时间单位为毫秒"),n("td",null,"5000，按照每5秒周期执行")],-1),D=n("td",null,"fixedRateString",-1),P=n("td",null,"与 fixedRate 相同，只是使用字符串形式。唯一不同的是支持占位符",-1),A={href:"http://xxx.xxx",target:"_blank",rel:"noopener noreferrer"},C=n("tr",null,[n("td",null,"initialDelay"),n("td",null,"在第一次执行 fixedRate 或 fixedDelay 任务之前延迟的时间单位数，默认情况下，时间单位为毫秒"),n("td",null,"5000，第一次延迟5秒，之后按照 fixedRate 或 fixedDelay 规则执行")],-1),I=n("td",null,"initialDelayString",-1),_=n("td",null,"与 initialDelay 相同，只是使用字符串形式。唯一不同的是支持占位符",-1),F={href:"http://xxx.xxx",target:"_blank",rel:"noopener noreferrer"},O=n("tr",null,[n("td",null,"timeUnit"),n("td",null,"用于 fixedDelay, fixedDelayString, fixedRate, fixedRateString, initialDelay和initialDelayString的TimeUnit。默认为 TimeUnit.MILLISECONDS。对于 cron 表达式和通过 fixedDelayString、fixedRateString 或 initialDelayString 提供的 java.time.Duration 值，该属性将被忽略"),n("td",null,"TimeUnit.MILLISECONDS，默认为毫秒，可以自定义修改")],-1),j=n("p",null,[n("strong",null,"TIP"),s("：")],-1),L=p(`<h5 id="基于-schedulingconfigurer-配置器" tabindex="-1"><a class="header-anchor" href="#基于-schedulingconfigurer-配置器" aria-hidden="true">#</a> 基于 SchedulingConfigurer 配置器</h5><h6 id="新增配置类" tabindex="-1"><a class="header-anchor" href="#新增配置类" aria-hidden="true">#</a> 新增配置类</h6><p>通过实现 <code>SchedulingConfigurer</code> 接口来实现自定义的任务调度器配置，代码如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskScheduleDemoConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TaskScheduleDemoConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token class-name">ScheduledTaskRegistrar</span> taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">getCustomizerAsyncScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        taskRegistrar<span class="token punctuation">.</span><span class="token function">addCronTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CronTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleDemoConfig#configureTasks$addCronTask] - 每 3 秒输出一次，当前时间为 {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;0/3 * * * * ? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        taskRegistrar<span class="token punctuation">.</span><span class="token function">addTriggerTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TriggerTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleDemoConfig#configureTasks$addTriggerTask] - 每 6 秒输出一次，当前时间为 {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> triggerContext <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">&quot;0/6 * * * * ? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextExecutionTime</span><span class="token punctuation">(</span>triggerContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取自定义异步调度器
     *
     * <span class="token keyword">@return</span> TaskScheduler
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskScheduler</span> <span class="token function">getCustomizerAsyncScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ThreadPoolTaskScheduler</span> threadPoolTaskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span><span class="token function">getErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> threadPoolTaskScheduler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取错误处理器
     *
     * <span class="token keyword">@return</span> ErrorHandler
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">ErrorHandler</span> <span class="token function">getErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleDemoConfig#getErrorHandler] - 执行异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;异常信息为：{} &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样也可以在重写的 <code>configureTasks</code> 方法跑定时任务。</p><h6 id="扩展-1" tabindex="-1"><a class="header-anchor" href="#扩展-1" aria-hidden="true">#</a> 扩展</h6><p>动态操作定时任务案例</p><blockquote><p>启动、停止、修改执行周期</p></blockquote><ol><li>编写定时任务配置</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span></span><span class="token class-name">TaskScheduler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableScheduling</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SchedulingConfigurer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskScheduler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ScheduledTaskRegistrar</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskScheduleExtendedDemoConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TaskScheduleExtendedDemoConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token class-name">ScheduledTaskRegistrar</span> taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TaskScheduler</span> <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ThreadPoolTaskScheduler</span> threadPoolTaskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 定时任务执行线程池核心线程数</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果设置为 true，则目标执行器将切换到取消时删除模式</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setRemoveOnCancelPolicy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 自定义错误处理器</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoConfig#threadPoolTaskScheduler] - 执行定时任务发生了异常，异常信息为：{} &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化</span>
        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> threadPoolTaskScheduler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>编写业务类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span></span><span class="token class-name">TaskScheduler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">CronTrigger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ScheduledFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskScheduleExtendedDemoService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TaskScheduleExtendedDemoService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TaskScheduler</span> threadPoolTaskScheduler<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">ScheduledFutureFactory</span><span class="token punctuation">&gt;</span></span> scheduledFutureFactoryMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IdGenerator</span> idGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleIdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_CRON_EXPRESSION</span> <span class="token operator">=</span> <span class="token string">&quot;0/5 * * * * ? &quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskScheduleExtendedDemoService</span><span class="token punctuation">(</span><span class="token class-name">TaskScheduler</span> threadPoolTaskScheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolTaskScheduler <span class="token operator">=</span> threadPoolTaskScheduler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 启动定时任务，默认按照每 5 秒执行一次
     *
     * <span class="token keyword">@return</span> 返回执行结果（true-表示成功 false-表示失败）
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CRON_EXPRESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 启动定时任务，自动生成默认的定时任务 id 并按照自定义的 cron 表达式执行定时任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">cronExpression</span> 自定义的 cron 表达式
     * <span class="token keyword">@return</span> 返回执行结果（true-表示成功 false-表示失败）
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#start] - cron 表达式为空而启动失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">long</span> taskId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> schedule <span class="token operator">=</span> threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id 为 {} 的定时任务，按照 cron 为 [{}] 的规则正在执行！&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>taskId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureFactory</span><span class="token punctuation">(</span>schedule<span class="token punctuation">,</span> taskId<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#start] - 定时任务启动发生异常，异常信息为：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 启动指定 id 的定时任务，同时按照自定义的 cron 表达式执行定时任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">taskId</span>         任务 id
     * <span class="token keyword">@param</span> <span class="token parameter">cronExpression</span> 自定义的 cron 表达式
     * <span class="token keyword">@return</span> 返回执行结果（true-表示成功 false-表示失败）
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Long</span> taskId<span class="token punctuation">,</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#start] - 因为定时任务 id 或者 cron 表达式为空而启动失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> schedule <span class="token operator">=</span> threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id 为 {} 的定时任务，按照 cron 为 [{}] 的规则正在执行！&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>taskId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureFactory</span><span class="token punctuation">(</span>schedule<span class="token punctuation">,</span> taskId<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#start] - 定时任务启动发生异常，异常信息为：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询所有定时任务，格式：任务名称 -&gt; 任务
     *
     * <span class="token keyword">@return</span> 所有定时任务列表
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> taskList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;taskId -&gt; &quot;</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">&quot;, cronExpression -&gt; [&quot;</span> <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> taskList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 停止一个指定 id 的定时任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">taskId</span> 任务 id
     * <span class="token keyword">@return</span> 该 id 的定时任务停止情况（为空-表示不存在此任务；false-表示停止失败；true-表示停止成功）
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token class-name">Long</span> taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>scheduledFutureFactoryMap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#stop] - 因为定时任务 id 为空而停止失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">final</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> scheduledFuture <span class="token operator">=</span> scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduledFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>scheduledFuture<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 根据取消任务的状态来决定是否删除集合的任务</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>taskId<span class="token punctuation">,</span> scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 重启指定 id 的定时任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">taskId</span> 定时任务 id
     * <span class="token keyword">@return</span> 返回执行结果（true-表示成功 false-表示失败）
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">restart</span><span class="token punctuation">(</span><span class="token class-name">Long</span> taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> restartCronExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CRON_EXPRESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledFutureFactoryMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>taskId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                restartCronExpression<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span>taskId<span class="token punctuation">,</span> restartCronExpression<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定 id 的定时任务，同时按照自定义的 cron 表达式执行定时任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">taskId</span>         任务 id
     * <span class="token keyword">@param</span> <span class="token parameter">cronExpression</span> 自定义的 cron 表达式
     * <span class="token keyword">@return</span> 返回执行结果（true-表示成功 false-表示失败）
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">restart</span><span class="token punctuation">(</span><span class="token class-name">Long</span> taskId<span class="token punctuation">,</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#restart] - 因为定时任务 id 或者 cron 表达式为空而重启失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">final</span> <span class="token class-name">Boolean</span> stopState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stopState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#restart] - 不存 id 为 [{}] 的定时任务，请尝试启动一个新的定时任务！&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#restart] - id 为 [{}]id 的定时任务停止失败！&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">final</span> <span class="token class-name">Boolean</span> startState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>taskId<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#restart] - id 为 [{}] 的定时任务重启成功！&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[TaskScheduleExtendedDemoService#restart] - id 为 [{}] 的定时任务重启失败！&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> startState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 生成定时任务 id
     *
     * <span class="token keyword">@return</span> 定时任务 id
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">generateTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> idGenerator<span class="token punctuation">.</span><span class="token function">generateId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLeastSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledFutureFactory</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> scheduledFuture<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> taskId<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">ScheduledFutureFactory</span><span class="token punctuation">(</span><span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> scheduledFuture<span class="token punctuation">,</span> <span class="token class-name">Long</span> taskId<span class="token punctuation">,</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledFuture <span class="token operator">=</span> scheduledFuture<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>taskId <span class="token operator">=</span> taskId<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>cronExpression <span class="token operator">=</span> cronExpression<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getScheduledFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> scheduledFuture<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> taskId<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cronExpression<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>编写Restful接口</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/task&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskScheduleExtendedDemoController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TaskScheduleExtendedDemoService</span> taskScheduleExtendedDemoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskScheduleExtendedDemoController</span><span class="token punctuation">(</span><span class="token class-name">TaskScheduleExtendedDemoService</span> taskScheduleExtendedDemoService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduleExtendedDemoService <span class="token operator">=</span> taskScheduleExtendedDemoService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/start&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startTask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cronExpression&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Boolean</span> resultState<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resultState <span class="token operator">=</span> taskScheduleExtendedDemoService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            resultState <span class="token operator">=</span> taskScheduleExtendedDemoService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> resultState <span class="token operator">?</span> <span class="token string">&quot;定时任务启动成功！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;定时任务启动失败！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/queryAll&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryAllTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> taskScheduleExtendedDemoService<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/stop&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stopTask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;taskId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Boolean</span> stopState <span class="token operator">=</span> taskScheduleExtendedDemoService<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stopState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;不存在该 id 的定时任务，请尝试启动一个新的定时任务！&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stopState <span class="token operator">?</span> <span class="token string">&quot;该 id 的定时任务停止成功！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;该 id 的定时任务停止失败！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/restart&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">restartTask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;taskId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> taskId<span class="token punctuation">,</span>
                              <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cronExpression&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> cronExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Boolean</span> resultState<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resultState <span class="token operator">=</span> taskScheduleExtendedDemoService<span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span>taskId<span class="token punctuation">,</span> cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            resultState <span class="token operator">=</span> taskScheduleExtendedDemoService<span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> resultState <span class="token operator">?</span> <span class="token string">&quot;定时任务重启成功！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;定时任务重启失败！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>测试接口</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;local&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://127.0.0.1:8080&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;startCronExpression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1/10 * * * * ? &quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;stopTaskId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;restartTaskId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;restartCronExpression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2/8 * * * * ? &quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>### 查询所有启动的任务
GET {{baseUrl}}/task/queryAll

### 启动定时任务（默认规则执行）
POST {{baseUrl}}/task/start

### 启动定时任务（指定规则执行）
POST {{baseUrl}}/task/start?cronExpression={{startCronExpression}}

### 停止定时任务
POST {{baseUrl}}/task/stop?taskId={{stopTaskId}}

### 重启定时任务（按照上一次执行规则执行）
POST {{baseUrl}}/task/restart?taskId={{restartTaskId}}

### 重启定时任务（按照指定规则执行）
POST {{baseUrl}}/task/restart?taskId={{restartTaskId}}&amp;cronExpression={{restartCronExpression}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态定时任务的 http client 请求测试，如下图所示：</p><figure><img src="`+b+'" alt="idea的动态实现定时任务httpClient请求" tabindex="0" loading="lazy"><figcaption>idea的动态实现定时任务httpClient请求</figcaption></figure>',19);function R(H,N){const t=e("ExternalLinkIcon"),o=e("RouterLink");return l(),i("div",null,[h,n("table",null,[y,n("tbody",null,[f,w,x,n("tr",null,[S,T,n("td",null,[s('"5000"或者"${'),n("a",E,[s("xxx.xxx"),a(t)]),s('}"，上一次执行完毕时间点之后5秒再执行')])]),q,n("tr",null,[D,P,n("td",null,[s('"5000"或者"${'),n("a",A,[s("xxx.xxx"),a(t)]),s('}"，按照每5秒周期执行')])]),C,n("tr",null,[I,_,n("td",null,[s('"5000"或者"${'),n("a",F,[s("xxx.xxx"),a(t)]),s('}"，第一次延迟5秒，之后按照 fixedRate 或 fixedDelay 规则执行')])]),O])]),j,n("p",null,[s("关于 cron 表达式的使用，请参考文档 "),a(o,{to:"/guide/framework/spring-all/CRON.html"},{default:u(()=>[s("Cron表达式详解")]),_:1})]),L])}const B=c(g,[["render",R],["__file","task-execution-scheduling.html.vue"]]);export{B as default};
