const e=JSON.parse('{"key":"v-182e6b79","path":"/guide/framework/spring-all/task-execution-scheduling.html","title":"任务执行与调度","lang":"zh-CN","frontmatter":{"title":"任务执行与调度","icon":"leaf","order":8,"sticky":true,"star":true,"date":"2023-02-16T00:00:00.000Z","category":["spring-all"],"tag":["编程","SpringBoot 框架"],"description":"任务执行与调度（Task Execution and Scheduling） 在上下文中没有 Executor bean 的情况下，Spring Boot 会自动配置 ThreadPoolTaskExecutor，并使用可自动关联到异步任务执行（@EnableAsync）和 Spring MVC 异步请求处理的合理默认值。 TIP： 如果在上下文中定义了自定义 Executor，则常规任务执行（即 @EnableAsync）将透明地使用它，但不会配置 Spring MVC 支持，因为它需要 AsyncTaskExecutor 实现（名为 applicationTaskExecutor）。根据你的目标安排，你可以将 Executor 更改为 ThreadPoolTaskExecutor，或者同时定义 ThreadPoolTaskExecutor 和 AsyncConfigurer 来包装自定义 Executor。","head":[["meta",{"property":"og:url","content":"https://olinonee.com/./guide/framework/spring-all/task-execution-scheduling.html"}],["meta",{"property":"og:site_name","content":"字节微雕"}],["meta",{"property":"og:title","content":"任务执行与调度"}],["meta",{"property":"og:description","content":"任务执行与调度（Task Execution and Scheduling） 在上下文中没有 Executor bean 的情况下，Spring Boot 会自动配置 ThreadPoolTaskExecutor，并使用可自动关联到异步任务执行（@EnableAsync）和 Spring MVC 异步请求处理的合理默认值。 TIP： 如果在上下文中定义了自定义 Executor，则常规任务执行（即 @EnableAsync）将透明地使用它，但不会配置 Spring MVC 支持，因为它需要 AsyncTaskExecutor 实现（名为 applicationTaskExecutor）。根据你的目标安排，你可以将 Executor 更改为 ThreadPoolTaskExecutor，或者同时定义 ThreadPoolTaskExecutor 和 AsyncConfigurer 来包装自定义 Executor。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://olinonee.com/./"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"任务执行与调度"}],["meta",{"property":"article:tag","content":"编程"}],["meta",{"property":"article:tag","content":"SpringBoot 框架"}],["meta",{"property":"article:published_time","content":"2023-02-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"任务执行与调度\\",\\"image\\":[\\"https://olinonee.com/./\\"],\\"datePublished\\":\\"2023-02-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"任务执行与调度（Task Execution and Scheduling）","slug":"任务执行与调度-task-execution-and-scheduling","link":"#任务执行与调度-task-execution-and-scheduling","children":[{"level":3,"title":"任务执行器","slug":"任务执行器","link":"#任务执行器","children":[]},{"level":3,"title":"任务调度器","slug":"任务调度器","link":"#任务调度器","children":[]},{"level":3,"title":"任务执行实战","slug":"任务执行实战","link":"#任务执行实战","children":[]},{"level":3,"title":"任务调度实战","slug":"任务调度实战","link":"#任务调度实战","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":16.66,"words":4998},"filePathRelative":"guide/framework/spring-all/task-execution-scheduling.md","localizedDate":"2023年2月16日","excerpt":"<h2> 任务执行与调度（Task Execution and Scheduling）</h2>\\n<p>在上下文中没有 <code>Executor</code> bean 的情况下，Spring Boot 会自动配置 <code>ThreadPoolTaskExecutor</code>，并使用可自动关联到异步任务执行（<code>@EnableAsync</code>）和 Spring MVC\\n异步请求处理的合理默认值。</p>\\n<p><strong>TIP</strong>：</p>\\n<p>如果在上下文中定义了自定义 <code>Executor</code>，则常规任务执行（即 <code>@EnableAsync</code>）将透明地使用它，但不会配置 Spring MVC 支持，因为它需要 <code>AsyncTaskExecutor</code>\\n实现（名为 <code>applicationTaskExecutor</code>）。根据你的目标安排，你可以将 <code>Executor</code> 更改为 <code>ThreadPoolTaskExecutor</code>，或者同时定义 <code>ThreadPoolTaskExecutor</code>\\n和 <code>AsyncConfigurer</code> 来包装自定义 <code>Executor</code>。</p>","autoDesc":true}');export{e as data};
