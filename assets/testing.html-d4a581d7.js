import{_ as e,W as o,X as c,Y as s,Z as n,$ as t,a1 as p,C as i}from"./framework-158a71b3.js";const l={},u=p(`<h2 id="测试-testing" tabindex="-1"><a class="header-anchor" href="#测试-testing" aria-hidden="true">#</a> 测试（Testing）</h2><p>Spring Boot 提供了许多实用工具和注解来帮助测试应用程序。测试支持由两个模块提供：<code>spring-boot-test</code> 包含核心项，<code>spring-boot-test-autoconfigure</code> 支持测试的自动配置。</p><p>大多数开发人员使用 <code>spring-boot-starter-test</code> “启动器”，它导入了两个 Spring Boot 测试模块以及 JUnitJupiter、AssertJ、Hamcrest 和许多其他有用的库。</p><p><strong>TIP</strong>：</p><p>如果你有使用 JUnit4 的测试，则可以使用 JUnit5 的老式引擎来运行它们。要使用 Vintage Engine，请添加对 <code>junit-Vintage-Engine</code> 的依赖项，如下例所示：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hamcrest-core</code> 被排除在外，<code>org.hamcrest:hamcrest</code> 是 <code>spring-boot-starter-test</code> 的一部分。</p><h3 id="_1-测试范围依赖关系" tabindex="-1"><a class="header-anchor" href="#_1-测试范围依赖关系" aria-hidden="true">#</a> 1.测试范围依赖关系</h3><p><code>spring-boot-starter-test</code> “启动器” （在测试范围内）包含以下提供的库：</p>`,9),r={href:"https://junit.org/junit5/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.spring.io/spring-framework/docs/5.3.25/reference/html/testing.html#integration-testing",target:"_blank",rel:"noopener noreferrer"},d={href:"https://assertj.github.io/doc/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/hamcrest/JavaHamcrest",target:"_blank",rel:"noopener noreferrer"},v={href:"https://site.mockito.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/skyscreamer/JSONassert",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/jayway/JsonPath",target:"_blank",rel:"noopener noreferrer"},h=p('<p>我们通常发现这些公共库在编写测试时很有用。如果这些库不符合你的需要，你可以添加自己的附加测试依赖项。</p><h3 id="_2-测试-spring-应用程序" tabindex="-1"><a class="header-anchor" href="#_2-测试-spring-应用程序" aria-hidden="true">#</a> 2.测试 Spring 应用程序</h3><p>依赖注入的主要优点之一是它应该使你的代码更容易进行单元测试。可以使用 <code>new</code> 操作符实例化对象，甚至不需要涉及 Spring。你还可以使用模拟对象而不是真正的依赖项。</p><p>通常，你需要超越单元测试，开始集成测试（使用 Spring <code>ApplicationContext</code>）。能够在不需要部署应用程序或连接到其他基础设施的情况下执行集成测试是非常有用的。</p><p>Spring 框架包括用于此类集成测试的专用测试模块。可以直接向 <code>org.springframework:spring-test</code> 声明一个依赖项，或者使用 <code>spring-boot-starter-test</code> “启动器” 以过渡方式将其引入。</p>',5),f=s("code",null,"spring-test",-1),w={href:"https://docs.spring.io/spring-framework/docs/5.3.25/reference/html/testing.html#testing",target:"_blank",rel:"noopener noreferrer"},T=p(`<h3 id="_3-测试-spring-boot-应用程序" tabindex="-1"><a class="header-anchor" href="#_3-测试-spring-boot-应用程序" aria-hidden="true">#</a> 3.测试 Spring Boot 应用程序</h3><p>Spring Boot 应用程序是一个 Spring <code>ApplicationContext</code>，因此除了通常使用普通的 Spring 上下文进行测试外，无需进行任何特殊的测试。</p><p><strong>注意</strong>：</p><p>只有在使用 <code>SpringApplication</code> 创建的情况下，Spring Boot 的外部属性、日志记录和其他特性才会默认安装在上下文中。</p><p>SpringBoot 提供了一个 <code>@SpringBootTest</code> 注解，当你需要 SpringBoot 特性时，它可以作为标准 <code>spring-test @ContextConfiguration</code> 注解的替代。注解的工作原理是通过 <code>SpringApplication</code> 创建测试中使用的 <code>ApplicationContext</code>。除了 <code>@SpringBootTest</code> 之外，还提供了许多其他注解，用于测试应用程序中更具体的部分。</p><p><strong>TIP</strong>：</p><p>如果你正在使用 JUnit4，请不要忘记将 <code>@RunWith(SpringRunner.class)</code> 添加到测试中，否则注解将被忽略。如果你使用 JUnit 5，需要将等效的 <code>@ExtendWith(SpringExtension.class)</code> 添加为 <code>@SpringBootTest</code>，其他 <code>@…Test</code> 注解已经用它进行了注解。</p><p>默认情况下，<code>@SpringBootTest</code> 不会启动服务器。你可以使用 <code>@SpringBootTest</code> 的 <code>webEnvironment</code> 属性来进一步优化测试的运行方式：</p><ul><li>MOCK(默认)：加载 Web <code>ApplicationContext</code> 并提供模拟 web 环境。使用此注解时，嵌入式服务器不会启动。如果你的类路径上没有可用的 web 环境，则此模式将透明地退回到创建常规的非 web <code>ApplicationContext</code>。它可以与 <code>@AutoConfigureMockMvc</code> 或 <code>@AutoConfigureWebTestClient</code> 结合使用，以进行基于模拟的 web 应用程序测试。</li><li>RANDOM_PORT：加载 <code>WebServerApplicationContext</code> 并提供一个真实的 web 环境。嵌入式服务器启动并监听一个随机端口。</li><li>DEFINED_PORT：加载 <code>WebServerApplicationContext</code> 并提供一个真实的 web 环境。嵌入式服务器启动并监听已定义的端口（来自 <code>application.properties</code> ）或默认端口 <code>8080</code>。</li><li>NONE：使用 <code>SpringApplication</code> 加载 <code>ApplicationContext</code>，但不提供任何 web 环境（mock 或其他）。</li></ul><p><strong>注意</strong>：</p><p>如果你的测试是 <code>@Transactional</code>，默认情况下，它会在每个测试方法结束时回滚事务。然而，由于将这种安排与 <code>RANDOM_PORT</code> 或 <code>DEFINED_PORT</code> 一起使用，隐式地提供了一个真正的 servlet 环境，HTTP 客户机和服务器在不同的线程中运行，因此在不同的事务中运行。在这种情况下，服务器上发起的任何事务都不会回滚。</p><p>如果你的应用程序使用不同的管理服务器端口，带有 <code>webEnvironment=WebEnvironment.RANDOM_PORT</code> 属性的 <code>@SpringBootTest</code> 也将在单独的随机端口上启动管理服务器。</p><h4 id="检测-web-应用程序类型" tabindex="-1"><a class="header-anchor" href="#检测-web-应用程序类型" aria-hidden="true">#</a> 检测 Web 应用程序类型</h4><p>如果 SpringMVC 可用，则配置基于 MVC 的常规应用程序上下文。如果你只有 SpringWebFlux，我们将检测到并配置基于WebFlux的应用程序上下文。</p><p>如果两者都存在，则 Spring MVC 优先。如果要在此场景中测试反应式 web 应用程序，必须设置 <code>spring.main.web-application-type</code> 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>properties <span class="token operator">=</span> <span class="token string">&quot;spring.main.web-application-type=reactive&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyWebFluxTests</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检测查测试配置" tabindex="-1"><a class="header-anchor" href="#检测查测试配置" aria-hidden="true">#</a> 检测查测试配置</h4><p>如果你熟悉 Spring 测试框架，可能会习惯使用 <code>@ContextConfiguration(classes=…)</code> 来指定要加载的 Spring <code>@Configuration</code> 。或者，可能经常在测试中使用嵌套的 <code>@Configuration</code> 类。</p><p>在测试 Spring Boot 应用程序时，通常不需要这样做。只要你没有明确定义主配置，Spring Boot 的 <code>@*Test</code> 注解就会自动搜索主配置。</p><p>搜索算法从包含测试的包开始工作，直到找到用 <code>@SpringBootApplication</code> 或 <code>@SpringBootConfiguration</code> 注释的类。只要你以合理的方式构造代码，通常就会找到你的主要配置。</p><p><strong>注意</strong>：</p><blockquote><p>如果使用测试注解测试应用程序的更特定部分，则应避免添加特定于主方法应用程序类上特定区域的配置设置。</p><p><code>@SpringBootApplication</code> 的底层组件扫描配置定义了排除用于确保切片按预期工作的过滤器。如果你在带 <code>@SpringBootApplication</code> 注解的类上使用显式的 <code>@ComponentScan</code> 指令，请注意这些过滤器将被禁用。如果你正在使用切片，你应该重新定义它们。</p></blockquote><p>如果要自定义主配置，可以使用嵌套的 <code>@TestConfiguration</code> 类。与嵌套的 <code>@Configuration</code> 类不同，嵌套的 <code>@TestConfiguration</code> 类是在应用程序的主配置之外使用的。</p><p><strong>注意</strong>：</p><blockquote><p>Spring 的测试框架在测试之间缓存应用程序上下文。因此，只要你的测试共享相同的配置（无论如何发现），加载上下文这一可能耗时的过程只会发生一次。</p></blockquote><h4 id="排除测试配置" tabindex="-1"><a class="header-anchor" href="#排除测试配置" aria-hidden="true">#</a> 排除测试配置</h4><p>如果你的应用程序使用组件扫描（例如，如果你使用 <code>@SpringBootApplication</code> 或 <code>@ComponentScan</code>），你可能会发现仅为特定测试创建的顶级配置类在任何地方都会被意外选中。</p><p>正如我们前面所看到的，<code>@TestConfiguration</code> 可以用于测试的内部类来定制主配置。当放置在顶级类上时，<code>@TestConfiguration</code> 表示 <code>src/test/java</code> 中的类不应该通过扫描来获取。然后，可以在需要的地方显式导入该类，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyTestsConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">exampleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><blockquote><p>如果你直接使用 <code>@ComponentScan</code>（也就是说，不是通过 <code>@SpringBootApplication</code>），则需要向其注册 <code>TypeExcludeFilter</code></p></blockquote>`,31),S={href:"https://docs.spring.io/spring-boot/docs/2.7.8/api/org/springframework/boot/context/TypeExcludeFilter.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<blockquote><p>。</p></blockquote><h4 id="使用应用程序参数" tabindex="-1"><a class="header-anchor" href="#使用应用程序参数" aria-hidden="true">#</a> 使用应用程序参数</h4><p>如果应用程序需要参数，可以让 <code>@SpringBootTest</code> 使用 <code>args</code> 属性注入它们。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertThat</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>args <span class="token operator">=</span> <span class="token string">&quot;--app.test=one&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyApplicationArgumentTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">applicationArgumentsPopulated</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string">&quot;app.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">&quot;app.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用模拟环境进行测试" tabindex="-1"><a class="header-anchor" href="#使用模拟环境进行测试" aria-hidden="true">#</a> 使用模拟环境进行测试</h4><p>默认情况下，<code>@SpringBootTest</code> 不会启动服务器，而是为测试 web 端点设置一个模拟环境。</p><p>使用 Spring MVC，我们可以使用 <code>MockMvc</code> 或 <code>WebTestClient</code> 查询 web 端点，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureMockMvc</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WebTestClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@AutoConfigureMockMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMockMvcTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testWithMockMvc</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testWithWebTestClient</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">WebTestClient</span> webClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        webClient
                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><blockquote><p>如果你希望只关注 web 层而不启动完整的 <code>ApplicationContext</code>，请考虑改用 <code>@WebMvcTest</code>。</p></blockquote><p>对于 Spring WebFlux 端点，你可以使用 <code>WebTestClient</code>，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@AutoConfigureWebTestClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMockWebTestClientTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">exampleTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">WebTestClient</span> webClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        webClient
                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><blockquote><p>在模拟环境中进行测试通常比使用完整的 servlet 容器运行更快。然而，由于模仿发生在 SpringMVC 层，依赖于较低级别 servlet 容器行为的代码不能直接使用 MockMvc 进行测试。</p><p>例如，Spring Boot 的错误处理基于 servlet 容器提供的“错误页”支持。这意味着，虽然可以按预期测试 MVC 层抛出和处理异常，但不能直接测试是否呈现了特定的自定义错误页面。如果需要测试这些较低级别的问题，可以启动一个完全运行的服务器，如下一节所述。</p></blockquote><h4 id="使用运行中的服务器进行测试" tabindex="-1"><a class="header-anchor" href="#使用运行中的服务器进行测试" aria-hidden="true">#</a> 使用运行中的服务器进行测试</h4><p>如果需要启动完全运行的服务器，我们建议你使用随机端口。如果使用 <code>@SpringBootTest(webEnvironment=webEnvironment.RANDOM_PORT)</code>，则每次运行测试时都会随机选择一个可用端口。</p><p><code>@LocalServerPort</code> 注解可用于将实际使用的端口注入测试。为了方便起见，需要对启动的服务器进行 REST 调用的测试可以另外 <code>@Autowire</code> 一个 <code>WebTestClient</code> ，它解析到正在运行的服务器的相对链接，并附带一个用于验证响应的专用 API，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WebTestClient</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRandomPortWebTestClientTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">exampleTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">WebTestClient</span> webTestClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        webTestClient
                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIP</strong>：</p><blockquote><p><code>WebTestClient</code> 可用于实时服务器和模拟环境。</p></blockquote><p>此设置需要类路径上的 <code>spring-webflux</code>。如果你不能或不会添加 webflux，Spring Boot 还提供了 <code>TestRestTemplate</code> 工具：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">TestRestTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRandomPortWebTestClientTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">exampleTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">TestRestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> body <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义-webtestclient" tabindex="-1"><a class="header-anchor" href="#自定义-webtestclient" aria-hidden="true">#</a> 自定义 WebTestClient</h4><p>要自定义 <code>WebTestClient</code> bean，请配置 <code>WebTestClientBuilderCustomizer</code> bean。使用用于创建 <code>WebTestClient</code> 的 <code>WebTestClient.Builder</code> 调用任何此类 bean。</p><h4 id="使用-jmx" tabindex="-1"><a class="header-anchor" href="#使用-jmx" aria-hidden="true">#</a> 使用 JMX</h4><p>由于测试上下文框架缓存上下文，默认情况下 JMX 被禁用，以防止相同的组件在同一域上注册。如果此类测试需要访问 MBeanServer，请考虑将其标记为脏：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DirtiesContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">MBeanServer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>properties <span class="token operator">=</span> <span class="token string">&quot;spring.jmx.enabled=true&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DirtiesContext</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJmxTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MBeanServer</span> mBeanServer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">exampleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mBeanServer<span class="token punctuation">.</span><span class="token function">getDomains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用指标" tabindex="-1"><a class="header-anchor" href="#使用指标" aria-hidden="true">#</a> 使用指标</h4><p>不管你的类路径是什么，在使用 <code>@SpringBootTest</code> 时，表注册中心（内存中的表注册中心除外）都不能自动配置。</p><p>如果你需要将指标导出到不同的后端，作为集成测试的一部分，请使用 <code>@AutoConfigureMetrics</code> 对其进行注释。</p><h4 id="模拟并且监视-bean" tabindex="-1"><a class="header-anchor" href="#模拟并且监视-bean" aria-hidden="true">#</a> 模拟并且监视 Bean</h4><p>运行测试时，有时需要模拟应用程序上下文中的某些组件。例如，你可能有一个在开发期间不可用的远程服务的外观。当你想要模拟在真实环境中很难触发的故障时，模拟也很有用。</p><p>Spring Boot 包含一个 @MockBean 注解，可以用来为 ApplicationContext 中的 bean 定义一个 Mockito mock。你可以使用注释添加新的 bean 或替换单个现有 bean 定义。注释可以直接用于测试类、测试中的字段，或者 @Configuration 类和字段。当在字段上使用时，所创建的 mock 的实例也会被注入。模拟 bean 在每个测试方法之后自动重置。</p>`,33);function x(C,M){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("ul",null,[s("li",null,[s("a",r,[n("JUnit 5"),t(a)]),n("：Java 应用程序单元测试的实际标准；")]),s("li",null,[s("a",k,[n("Spring Test"),t(a)]),n(" & Spring Boot Test：Spring Boot 应用程序的实用工具和集成测试支持；")]),s("li",null,[s("a",d,[n("AssertJ"),t(a)]),n("：一个流畅的断言库；")]),s("li",null,[s("a",m,[n("Hamcrest"),t(a)]),n("：匹配器对象库（也称为约束或谓词）；")]),s("li",null,[s("a",v,[n("Mockito"),t(a)]),n("：Java mock 框架；")]),s("li",null,[s("a",g,[n("JSONassert"),t(a)]),n("：JSON 的断言库；")]),s("li",null,[s("a",b,[n("JsonPath"),t(a)]),n("：JSON 的 XPath。")])]),h,s("p",null,[n("如果你以前没有使用过 "),f,n(" 模块，那么应该首先阅读 Spring 框架参考文档的"),s("a",w,[n("相关部分"),t(a)]),n("。")]),T,s("p",null,[n("。有关详细信息，请参阅 "),s("a",S,[n("Javadoc"),t(a)])]),y])}const B=e(l,[["render",x],["__file","testing.html.vue"]]);export{B as default};
